---
// src/pages/[...slug].astro - ROUTER UNIVERSAL CON CONTENT-BACKEND INTEGRADO
import PropertyListLayout from '../layouts/PropertyListLayout.astro';
import SinglePropertyLayout from '../layouts/SinglePropertyLayout.astro';
import Error404Layout from '../layouts/Error404Layout.astro';
import HomepageLayout from '../layouts/HomepageLayout.astro';

// Importar layouts para pÃ¡ginas especiales
import AdvisorsLayout from '../layouts/AdvisorsLayout.astro';
import SingleAdvisorLayout from '../layouts/SingleAdvisorLayout.astro';
import FavoritesLayout from '../layouts/FavoritesLayout.astro';
import SharedFavoritesLayout from '../layouts/SharedFavoritesLayout.astro';

// Importar layouts para testimonios
import TestimonialsMainLayout from '../layouts/TestimonialsMainLayout.astro';
import TestimonialsCategoryLayout from '../layouts/TestimonialsCategoryLayout.astro';
import TestimonialsSingleLayout from '../layouts/TestimonialsSingleLayout.astro';

// Importar layouts para artÃ­culos
import ArticlesMainLayout from '../layouts/ArticlesMainLayout.astro';
import ArticlesCategoryLayout from '../layouts/ArticlesCategoryLayout.astro';
import ArticlesSingleLayout from '../layouts/ArticlesSingleLayout.astro';

// Importar layouts para videos
import VideosMainLayout from '../layouts/VideosMainLayout.astro';
import VideosCategoryLayout from '../layouts/VideosCategoryLayout.astro';
import VideosSingleLayout from '../layouts/VideosSingleLayout.astro';

// Importar layouts para contenido y listados curados
import ContactLayout from '../layouts/ContactLayout.astro';
import SellLayout from '../layouts/SellLayout.astro';
import VacationRentalsLayout from '../layouts/VacationRentalsLayout.astro';
import VacationRentalsMainLayout from '../layouts/VacationRentalsMainLayout.astro';
import VacationRentalsDynamicLayout from '../layouts/VacationRentalsDynamicLayout.astro';
import CuratedListingsLayout from '../layouts/CuratedListingsLayout.astro';
import CuratedListingsSingleLayout from '../layouts/CuratedListingsSingleLayout.astro';

// Habilitar SSR para esta pÃ¡gina
export const prerender = false;

console.log('ðŸ”¥ ROUTER START - All layouts imported successfully');

// =====================================================
// CONFIGURACIÃ“N DE IDIOMAS Y RUTAS ESPECIALES
// =====================================================

const LANGUAGES = {
  'es': { code: 'es', prefix: '', default: true },
  'en': { code: 'en', prefix: 'en' },
  'fr': { code: 'fr', prefix: 'fr' }
};

const SPECIAL_ROUTES = {
  // EspaÃ±ol
  'asesores': { type: 'advisors', layout: 'AdvisorsLayout' },
  'favoritos': { type: 'favorites', layout: 'FavoritesLayout', subRoutes: true },
  'testimonios': { type: 'testimonials', layout: 'TestimonialsLayout', subRoutes: true },
  'videos': { type: 'videos', layout: 'VideosLayout', subRoutes: true },
  'articulos': { type: 'articles', layout: 'ArticlesLayout', subRoutes: true },
  'contacto': { type: 'contact', layout: 'ContactLayout' },
  'rentas-vacacionales': { type: 'vacation-rentals', layout: 'VacationRentalsLayout' },
  'planes-rentas-vacacionales': { type: 'vacation-rentals-plans', layout: 'VacationRentalsLayout' },
  'vender': { type: 'sell', layout: 'SellLayout' },
  'listados-de': { type: 'curated-listings', layout: 'CuratedListingsLayout', subRoutes: true },
  
  // InglÃ©s
  'advisors': { type: 'advisors', layout: 'AdvisorsLayout' },
  'favorites': { type: 'favorites', layout: 'FavoritesLayout', subRoutes: true },
  'testimonials': { type: 'testimonials', layout: 'TestimonialsLayout', subRoutes: true },
  'videos': { type: 'videos', layout: 'VideosLayout', subRoutes: true },
  'articles': { type: 'articles', layout: 'ArticlesLayout', subRoutes: true },
  'contact': { type: 'contact', layout: 'ContactLayout' },
  'vacation-rentals': { type: 'vacation-rentals', layout: 'VacationRentalsLayout' },
  'vacation-rental-plans': { type: 'vacation-rentals-plans', layout: 'VacationRentalsLayout' },
  'sell': { type: 'sell', layout: 'SellLayout' },
  'listings-of': { type: 'curated-listings', layout: 'CuratedListingsLayout', subRoutes: true },
  
  // FrancÃ©s
  'conseillers': { type: 'advisors', layout: 'AdvisorsLayout' },
  'favoris': { type: 'favorites', layout: 'FavoritesLayout', subRoutes: true },
  'temoignages': { type: 'testimonials', layout: 'TestimonialsLayout', subRoutes: true },
  'videos': { type: 'videos', layout: 'VideosLayout', subRoutes: true },
  'articles': { type: 'articles', layout: 'ArticlesLayout', subRoutes: true },
  'contact': { type: 'contact', layout: 'ContactLayout' },
  'locations-vacances': { type: 'vacation-rentals', layout: 'VacationRentalsLayout' },
  'plans-locations-vacances': { type: 'vacation-rentals-plans', layout: 'VacationRentalsLayout' },
  'vendre': { type: 'sell', layout: 'SellLayout' },
  'listes-de': { type: 'curated-listings', layout: 'CuratedListingsLayout', subRoutes: true }
};

// =====================================================
// FUNCIÃ“N PARA FILTRAR RUTAS VÃLIDAS
// =====================================================
function shouldProcessRoute(urlSegments, pathname) {
  try {
    // EXCLUIR carpeta paginas completa
    if (pathname.startsWith('/paginas/')) {
      console.log('Excluding /paginas/ from router');
      return false;
    }
    
    // EXCLUIR archivos especÃ­ficos
    if (pathname === '/sitemap.xml' || pathname === '/robots.txt') {
      console.log('Excluding sitemap/robots from router');
      return false;
    }
    
    const excludedPaths = [
      'images', 'img', 'assets', 'static', 'public',
      'css', 'js', 'fonts', 'favicon.ico', 
      '_astro', 'api', 'admin', 'wp-admin', 'wp-content',
      '.well-known', 'manifest.json', 'sw.js', 'debug'
    ];
    
    const excludedExtensions = [
      '.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.ico',
      '.css', '.js', '.json', '.txt', '.pdf', '.zip',
      '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3'
    ];
    
    if (urlSegments.length > 0 && excludedPaths.includes(urlSegments[0].toLowerCase())) {
      return false;
    }
    
    const lastSegment = urlSegments[urlSegments.length - 1] || '';
    if (excludedExtensions.some(ext => lastSegment.toLowerCase().endsWith(ext))) {
      return false;
    }
    
    if (excludedExtensions.some(ext => pathname.toLowerCase().endsWith(ext))) {
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('âš  Error in shouldProcessRoute:', error);
    return true;
  }
}

// =====================================================
// FUNCIÃ“N PARA DETECTAR IDIOMA Y RUTAS
// =====================================================
function parseUrlSegments(urlSegments) {
  try {
    if (urlSegments.length === 0) {
      return {
        language: 'es',
        remainingSegments: [],
        routeType: 'home'
      };
    }

    const firstSegment = urlSegments[0].toLowerCase();
    
    if (LANGUAGES[firstSegment]) {
      const language = firstSegment;
      const remainingSegments = urlSegments.slice(1);
      
      if (remainingSegments.length === 0) {
        return {
          language,
          remainingSegments: [],
          routeType: 'home'
        };
      }
      
      const nextSegment = remainingSegments[0];
      if (SPECIAL_ROUTES[nextSegment]) {
        return {
          language,
          remainingSegments,
          routeType: 'special',
          specialRoute: SPECIAL_ROUTES[nextSegment]
        };
      }
      
      return {
        language,
        remainingSegments,
        routeType: 'property'
      };
    }
    
    const language = 'es';
    
    if (SPECIAL_ROUTES[firstSegment]) {
      return {
        language,
        remainingSegments: urlSegments,
        routeType: 'special',
        specialRoute: SPECIAL_ROUTES[firstSegment]
      };
    }
    
    return {
      language,
      remainingSegments: urlSegments,
      routeType: 'property'
    };
  } catch (error) {
    console.error('âš  Error in parseUrlSegments:', error);
    return {
      language: 'es',
      remainingSegments: urlSegments,
      routeType: 'property'
    };
  }
}

// =====================================================
// FUNCIONES PARA LLAMAR BACKENDS
// =====================================================

const MAIN_BACKEND_URL = 'https://pacewqgypevfgjmdsorz.supabase.co/functions/v1/backend';
const CONTENT_BACKEND_URL = 'https://pacewqgypevfgjmdsorz.supabase.co/functions/v1/content-backend';
const AUTH_TOKEN = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhY2V3cWd5cGV2ZmdqbWRzb3J6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg2NjU4OTksImV4cCI6MjA2NDI0MTg5OX0.Qlg-UVy-sikr76GxYmTcfCz1EnAqPHxvFeLrdqnjuWs';

async function callMainBackend(language, segments, searchParams) {
  try {
    let routePath = '';
    
    if (language !== 'es') {
      routePath = language + '/';
    }
    
    if (segments.length > 0) {
      routePath += segments.join('/');
    }
    
    const backendURL = `${MAIN_BACKEND_URL}/${routePath}${searchParams ? `?${searchParams}` : ''}`;
    
    console.log('ðŸš€ Calling main backend:', backendURL);
    
    const response = await fetch(backendURL, {
      method: 'GET',
      headers: {
        'Authorization': AUTH_TOKEN,
        'Content-Type': 'application/json',
        'User-Agent': `CLIC-Router/${Astro.url.host}`,
        'X-Original-Host': Astro.url.hostname, // 👈 AGREGAR ESTO
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`âš  Main backend error: ${response.status} - ${errorText}`);
      
      return {
        pageType: '404',
        type: '404',
        language: language,
        error: `Backend error: ${response.status}`,
        message: errorText || 'Page not found',
        statusCode: response.status
      };
    }

    const data = await response.json();
    
    if (data.error) {
      console.error('âš  Main backend returned error:', data.error);
      return {
        pageType: '404',
        type: '404',
        language: language,
        error: data.error,
        message: data.message || 'Backend error occurred',
        statusCode: 500
      };
    }
    
    // Asegurar estructura vÃ¡lida
    if (!data.property && !data.properties && !data.type && !data.pageType) {
      console.error('âš  Invalid main backend response structure');
      return {
        pageType: '404',
        type: '404',
        language: language,
        error: 'Invalid response structure',
        message: 'No valid content received',
        statusCode: 500
      };
    }
    
    data.language = language;
    
    if (data.type && !data.pageType) {
      data.pageType = data.type;
    }
    
    if (!data.pageType) {
      if (data.property && data.property.id) {
        data.pageType = 'single-property';
      } else if (data.properties && Array.isArray(data.properties)) {
        data.pageType = 'property-list';
      } else {
        data.pageType = '404';
      }
    }
    
    console.log('âœ… Main backend response processed:', {
      type: data.pageType,
      language: data.language,
      hasProperties: data.properties?.length > 0,
      hasProperty: !!data.property
    });
    
    return data;
    
  } catch (error) {
    console.error('âš  Error calling main backend:', error);
    
    return {
      pageType: '404',
      type: '404',
      language: language,
      error: error.message,
      message: 'Error connecting to main backend',
      statusCode: 500
    };
  }
}

async function callContentBackend(language, segments, searchParams) {
  try {
    let routePath = '';
    
    if (language !== 'es') {
      routePath = language + '/';
    }
    
    if (segments.length > 0) {
      routePath += segments.join('/');
    }
    
    const backendURL = `${CONTENT_BACKEND_URL}/${routePath}${searchParams ? `?${searchParams}` : ''}`;
    
    console.log('ðŸ“ Calling content backend:', backendURL);
    
    const response = await fetch(backendURL, {
      method: 'GET',
      headers: {
        'Authorization': AUTH_TOKEN,
        'Content-Type': 'application/json',
        'User-Agent': `CLIC-Content/${Astro.url.host}`,
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`âš  Content backend error: ${response.status} - ${errorText}`);
      
      return {
        pageType: '404',
        type: '404',
        language: language,
        error: `Content backend error: ${response.status}`,
        message: errorText || 'Content not found',
        statusCode: response.status
      };
    }

    const data = await response.json();
    
    if (data.error) {
      console.error('âš  Content backend returned error:', data.error);
      return {
        pageType: '404',
        type: '404',
        language: language,
        error: data.error,
        message: data.message || 'Content error occurred',
        statusCode: 500
      };
    }
    
    data.language = language;
    
    if (data.type && !data.pageType) {
      data.pageType = data.type;
    }
    
    console.log('âœ… Content backend response processed:', {
      type: data.pageType,
      language: data.language,
      contentType: data.contentType
    });
    
    return data;
    
  } catch (error) {
    console.error('âš  Error calling content backend:', error);
    
    return {
      pageType: '404',
      type: '404',
      language: language,
      error: error.message,
      message: 'Error connecting to content backend',
      statusCode: 500
    };
  }
}

// =====================================================
// PROCESAMIENTO PRINCIPAL
// =====================================================

let pageData = null;
let pageType = 'unknown';

try {
  console.log('ðŸ”¥ ROUTER START - Processing request...');

  const { slug } = Astro.params;
  let urlSegments = slug ? slug.split('/').filter(Boolean) : [];
  const pathname = Astro.url.pathname;

  console.log('ðŸŽ¯ Router processing:', {
    slug,
    pathname,
    segments: urlSegments
  });

  // MANEJO ESPECIAL PARA RUTAS RAÃZ Y HOMEPAGE
  if (!slug || urlSegments.length === 0) {
    // Si es la ruta raÃ­z (/), tratarla como homepage en espaÃ±ol
    if (pathname === '/' || pathname === '') {
      console.log('ðŸ  Processing root homepage (espaÃ±ol)');
      const homeData = await callContentBackend('es', [], Astro.url.searchParams.toString());
      pageData = homeData;
      pageType = homeData.pageType || 'homepage';
    } else {
      const pathSegments = pathname.split('/').filter(Boolean);
      urlSegments = [...pathSegments];
      
      if (!shouldProcessRoute(urlSegments, pathname)) {
        console.log('âš  Excluded pathname route:', pathname);
        throw new Error('Pathname route excluded');
      }
    }
  }

  // Si no se procesÃ³ como homepage raÃ­z, continuar con lÃ³gica normal
  if (!pageData) {
    if (!shouldProcessRoute(urlSegments, pathname)) {
      console.log('âš  Excluded route:', pathname);
      throw new Error('Route excluded');
    }

    const parsedRoute = parseUrlSegments(urlSegments);
    const searchParams = Astro.url.searchParams.toString();

    console.log('ðŸ“ Parsed route:', parsedRoute);

    switch (parsedRoute.routeType) {
      case 'home':
        console.log('ðŸ  Processing home page via content backend');
        const homeData = await callContentBackend(parsedRoute.language, [], searchParams);
        pageData = homeData;
        pageType = homeData.pageType || 'homepage';
        break;
      
      case 'special':
        console.log('â­ Processing special route via content backend:', parsedRoute.specialRoute.type);
        const contentData = await callContentBackend(parsedRoute.language, parsedRoute.remainingSegments, searchParams);
        pageData = contentData;
        pageType = contentData.pageType || '404';
        break;
      
      case 'property':
        console.log('ðŸ˜ Processing property route via main backend');
        const backendData = await callMainBackend(parsedRoute.language, parsedRoute.remainingSegments, searchParams);
        pageData = backendData;
        pageType = backendData.pageType || '404';
        
        const validPageTypes = ['single-property', 'property-list', '404'];
        if (!validPageTypes.includes(pageType)) {
          console.warn(`âš  Invalid pageType received: ${pageType}, defaulting to 404`);
          pageType = '404';
          pageData.pageType = '404';
        }
        break;
      
      default:
        console.log('â“ Unknown route type');
        pageData = {
          pageType: '404',
          type: '404',
          language: parsedRoute.language,
          originalUrl: pathname,
          message: 'Route not found'
        };
        pageType = '404';
        break;
    }
  }
  
} catch (error) {
  console.error('âš  Error processing page:', error);
  
  pageData = {
    pageType: '404',
    type: '404',
    language: 'es',
    originalUrl: Astro.url.pathname,
    error: error.message,
    message: 'An error occurred while processing the page'
  };
  pageType = '404';
}

// ValidaciÃ³n final para 404
if (pageType === '404') {
  if (!pageData) {
    pageData = {
      pageType: '404',
      type: '404',
      language: 'es',
      originalUrl: Astro.url.pathname,
      message: 'Page not found'
    };
  } else {
    pageData.pageType = '404';
    pageData.type = '404';
    pageData.language = pageData.language || 'es';
    pageData.message = pageData.message || 'Page not found';
  }
  
  console.log('ðŸŽ¯ Setting status 200 for custom 404 layout');
}

console.log('âœ… Page ready for render:', {
  pageType: pageType,
  hasContent: !!pageData,
  hasGlobalConfig: !!pageData?.globalConfig,
  finalPageData: pageData ? Object.keys(pageData) : []
});

// Variables de renderizado
const showHomepage = pageType === 'homepage';
const showPropertyList = pageType === 'property-list';
const showSingleProperty = pageType === 'single-property';
const showAdvisorsList = pageType === 'advisors-list' || pageType === 'advisors-main';
const showAdvisorSingle = pageType === 'advisor-single';
const showFavoritesMain = pageType === 'favorites-main';
const showFavoritesShared = pageType === 'favorites-shared';
const showTestimonialsMain = pageType === 'testimonials-main';
const showTestimonialsCategory = pageType === 'testimonials-category';
const showTestimonialsSingle = pageType === 'testimonials-single';
const showArticlesMain = pageType === 'articles-main';
const showArticlesCategory = pageType === 'articles-category';
const showArticlesSingle = pageType === 'articles-single' || pageType === 'articles-single-404';
const showVideosMain = pageType === 'videos-main';
const showVideosCategory = pageType === 'videos-category';
const showVideosSingle = pageType === 'videos-single';
const showContact = pageType === 'contact';
const showSell = pageType === 'sell';
const showVacationRentalsMain = pageType === 'vacation-rentals-main';
const showVacationRentalsPlans = pageType === 'vacation-rentals-plans';
const showVacationRentalsDynamic = pageType === 'vacation-rentals-dynamic';
const showCuratedListingsMain = pageType === 'curated-listings-main';
const showCuratedListingsSingle = pageType === 'curated-listings-single';
const show404 = pageType === '404';

console.log('ðŸŽ¨ Final render decision:', {
  pageType,
  showHomepage,
  show404,
  showPropertyList,
  showSingleProperty,
  showCuratedListingsMain,
  showCuratedListingsSingle
});
---

<!-- CLIENT DEBUG REMOVED TO AVOID SYNTAX ERRORS -->

{showHomepage && <HomepageLayout data={pageData} language={pageData?.language || 'es'} />}

{show404 && (
  <Error404Layout data={pageData} language={pageData?.language || 'es'} />
)}

{showPropertyList && <PropertyListLayout data={pageData} language={pageData?.language || 'es'} />}

{showSingleProperty && <SinglePropertyLayout data={pageData} language={pageData?.language || 'es'} />}

{showAdvisorsList && <AdvisorsLayout data={pageData} language={pageData?.language || 'es'} />}

{showAdvisorSingle && <SingleAdvisorLayout data={pageData} language={pageData?.language || 'es'} />}

{showFavoritesMain && <FavoritesLayout data={pageData} language={pageData?.language || 'es'} />}

{showFavoritesShared && <SharedFavoritesLayout data={pageData} language={pageData?.language || 'es'} />}

{showTestimonialsMain && <TestimonialsMainLayout data={pageData} language={pageData?.language || 'es'} />}

{showTestimonialsCategory && <TestimonialsCategoryLayout data={pageData} language={pageData?.language || 'es'} />}

{showTestimonialsSingle && <TestimonialsSingleLayout data={pageData} language={pageData?.language || 'es'} />}

{showArticlesMain && <ArticlesMainLayout data={pageData} language={pageData?.language || 'es'} />}

{showArticlesCategory && <ArticlesCategoryLayout data={pageData} language={pageData?.language || 'es'} />}

{showArticlesSingle && <ArticlesSingleLayout data={pageData} language={pageData?.language || 'es'} />}

{showVideosMain && <VideosMainLayout data={pageData} language={pageData?.language || 'es'} />}

{showVideosCategory && <VideosCategoryLayout data={pageData} language={pageData?.language || 'es'} />}

{showVideosSingle && <VideosSingleLayout data={pageData} language={pageData?.language || 'es'} />}

{showContact && <ContactLayout data={pageData} language={pageData?.language || 'es'} />}

{showSell && <SellLayout data={pageData} language={pageData?.language || 'es'} />}

{showVacationRentalsMain && <VacationRentalsMainLayout data={pageData} language={pageData?.language || 'es'} />}

{showVacationRentalsPlans && <VacationRentalsLayout data={pageData} language={pageData?.language || 'es'} />}

{showVacationRentalsDynamic && <VacationRentalsDynamicLayout data={pageData} language={pageData?.language || 'es'} />}

{showCuratedListingsMain && <CuratedListingsLayout data={pageData} language={pageData?.language || 'es'} />}

{showCuratedListingsSingle && <CuratedListingsSingleLayout data={pageData} language={pageData?.language || 'es'} />}