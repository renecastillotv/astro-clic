---
// MiniSearchBar.astro - VERSIÓN CON EDGE FUNCTION
import { Search, BedDouble, Bath, Car, Home, MapPin, Filter, ChevronDown, X } from "lucide-astro";

export interface Props {
  currentFilters?: {
    accion?: string;
    tipo?: string;
    ubicacion?: string;
    sector?: string;
    precioMin?: string;
    precioMax?: string;
    moneda?: string;
    habitaciones?: string;
    banos?: string;
    parqueos?: string;
    estado?: string;
    caracteristicas?: string[];
  };
  isSticky?: boolean;
  supabaseUrl?: string;
}

const { currentFilters = {}, isSticky = false, supabaseUrl } = Astro.props;

// Función para extraer filtros desde la URL actual
function extractFiltersFromURL(url: URL) {
  const pathname = url.pathname;
  const segments = pathname.split('/').filter(Boolean);
  
  const filters: any = {
    accion: 'comprar',
    moneda: 'USD',
    ubicacion: '',
    sector: '',
    tipo: '',
    habitaciones: '',
    banos: '',
    parqueos: '',
    precio: '',
    caracteristicas: []
  };

  // Detectar acción
  if (segments.length > 0 && ['comprar', 'alquilar'].includes(segments[0])) {
    filters.accion = segments[0];
  }

  // Procesar el resto de segmentos
  for (let i = 1; i < segments.length; i++) {
    const segment = segments[i];
    
    // Detectar precio
    if (segment.startsWith('precio-desde-')) {
      const priceMatch = segment.match(/^precio-desde-(\d+)(?:-(\d+))?-(usd|dop)$/i);
      if (priceMatch) {
        const [, min, max, currency] = priceMatch;
        filters.moneda = currency.toUpperCase();
        filters.precio = max ? `${min}-${max}` : `${min}+`;
      }
    }
    // Detectar habitaciones, baños, parqueos
    else if (segment.includes('-habitaciones')) {
      const match = segment.match(/^(\d+|\d+\+)-habitaciones$/);
      if (match) filters.habitaciones = match[1];
    }
    else if (segment.includes('-banos')) {
      const match = segment.match(/^(\d+|\d+\+)-banos$/);
      if (match) filters.banos = match[1];
    }
    else if (segment.includes('-parqueos')) {
      const match = segment.match(/^(\d+|\d+\+)-parqueos$/);
      if (match) filters.parqueos = match[1];
    }
    else {
      // Para otros segmentos, los agregaremos a un array temporal
      // que luego resolveremos contra los tags de la base de datos
      if (!filters.segments) filters.segments = [];
      filters.segments.push(segment);
    }
  }

  return filters;
}

const urlFilters = extractFiltersFromURL(Astro.url);
const mergedFilters = { ...urlFilters, ...currentFilters };

// URL de la Edge Function
const edgeFunctionUrl = supabaseUrl ? 
  `${supabaseUrl}/functions/v1/get-search-tags` : 
  '/api/get-search-tags';
---

<!-- Contenedor principal -->
<div class="w-full" id="mini-search-container">
  <!-- LOADING STATE -->
  <div id="loading-state" class="flex items-center justify-center py-8">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#f04e00]"></div>
    <span class="ml-3 text-gray-600">Cargando filtros...</span>
  </div>

  <!-- MAIN SEARCH BAR - Oculto inicialmente -->
  <div id="search-bar-content" class="hidden">
    <!-- FILTROS PRINCIPALES -->
    <div class="flex flex-col lg:flex-row gap-3 lg:gap-2 lg:items-center mb-4">
      
      <!-- Primera fila: Acción + Tipo + Ubicación -->
      <div class="flex flex-wrap gap-2 lg:flex-nowrap lg:flex-1">
        
        <!-- 1. ACCIÓN: Comprar/Alquilar -->
        <div class="flex bg-gray-100 rounded-lg p-1 flex-shrink-0">
          <button 
            id="action-comprar" 
            class="mini-action-btn px-3 py-2 text-xs font-semibold rounded-md transition-all"
            data-action="comprar"
          >
            COMPRAR
          </button>
          <button 
            id="action-alquilar" 
            class="mini-action-btn px-3 py-2 text-xs font-semibold rounded-md transition-all"
            data-action="alquilar"
          >
            ALQUILAR
          </button>
        </div>

        <!-- 2. TIPO DE INMUEBLE -->
        <div class="relative flex-1 min-w-0">
          <select id="mini-tipo" class="mini-select-with-icon w-full pl-9 pr-7 text-sm appearance-none">
            <option value="">Tipo de Inmueble</option>
          </select>
          <Home class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none z-10" />
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>

        <!-- 3. UBICACIÓN -->
        <div class="relative flex-1 min-w-0">
          <select id="mini-ubicacion" class="mini-select-with-icon w-full pl-9 pr-7 text-sm appearance-none">
            <option value="">Ubicación</option>
          </select>
          <MapPin class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none z-10" />
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>
      </div>

      <!-- Segunda fila: Sector + Precio + Filtros + Buscar -->
      <div class="flex flex-wrap gap-2 lg:flex-nowrap lg:flex-shrink-0">
        
        <!-- 4. SECTOR -->
        <div class="relative min-w-0 flex-1 lg:w-32">
          <select id="mini-sector" class="mini-select-with-icon w-full pl-3 pr-7 text-sm appearance-none" disabled>
            <option value="">Sector</option>
          </select>
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>

        <!-- 5. PRECIO con toggle moneda -->
        <div class="relative flex items-center bg-gray-50 rounded-lg border border-gray-200 min-w-0 flex-1 lg:w-48">
          <div class="flex bg-gray-100 rounded-l-lg">
            <button id="currency-usd" class="mini-currency-btn px-2 py-2 text-xs font-medium rounded-l-lg transition-all border-r border-gray-200">
              USD
            </button>
            <button id="currency-dop" class="mini-currency-btn px-2 py-2 text-xs font-medium transition-all">
              DOP
            </button>
          </div>
          <select id="mini-precio" class="appearance-none bg-transparent border-none outline-none pl-2 pr-6 py-2 text-sm flex-1 min-w-0">
            <option value="">Precio</option>
          </select>
          <ChevronDown class="absolute right-2 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none" />
        </div>

        <!-- BOTÓN: Más filtros -->
        <button id="more-filters-toggle" class="flex items-center gap-1 px-3 py-2 bg-white border border-gray-200 hover:border-[#f04e00] text-gray-600 hover:text-[#f04e00] rounded-lg transition-all group text-sm font-medium whitespace-nowrap">
          <span class="text-xs">Más filtros</span>
          <svg class="w-3 h-3 group-hover:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <!-- BOTÓN: Buscar -->
        <button id="mini-search-btn" class="flex items-center gap-2 px-4 py-2 bg-[#f04e00] hover:bg-[#d94400] text-white rounded-lg transition-all font-semibold text-sm whitespace-nowrap">
          <Search class="w-4 h-4" />
          <span class="hidden sm:inline">Buscar</span>
        </button>
      </div>
    </div>

    <!-- MODAL: Filtros Secundarios -->
    <div id="advanced-filters-panel" class="hidden mt-4 p-6 bg-gray-50 rounded-lg border">
      <h3 class="text-lg font-semibold text-gray-900 mb-6">Filtros adicionales</h3>
      
      <!-- Habitaciones, Baños, Parqueos -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">Habitaciones</label>
          <select id="modal-habitaciones" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">Cualquiera</option>
          </select>
        </div>
        
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">Baños</label>
          <select id="modal-banos" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">Cualquiera</option>
          </select>
        </div>
        
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">Parqueos</label>
          <select id="modal-parqueos" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">Cualquiera</option>
          </select>
        </div>
      </div>
      
      <!-- Características -->
      <div class="mb-6">
        <h4 class="text-sm font-semibold text-gray-700 mb-3">Características</h4>
        <div id="caracteristicas-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
          <!-- Se llenarán dinámicamente -->
        </div>
      </div>
      
      <!-- Botones del modal -->
      <div class="flex justify-between items-center pt-4 border-t border-gray-200">
        <button id="clear-secondary-filters" class="text-sm text-gray-600 hover:text-gray-800 font-medium">
          Limpiar filtros secundarios
        </button>
        <div class="flex gap-3">
          <button id="close-advanced" class="px-4 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            Cerrar
          </button>
          <button id="apply-secondary-filters" class="px-4 py-2 text-sm bg-[#f04e00] text-white rounded-lg hover:bg-[#d94400] transition-colors">
            Aplicar filtros
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ mergedFilters, edgeFunctionUrl }}>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('🚀 MiniSearchBar con Edge Function - Iniciando');
    
    // Estado global
    let currentState = {
      accion: 'comprar',
      tipo: '',
      ubicacion: '',
      sector: '',
      precio: '',
      moneda: 'USD',
      habitaciones: '',
      banos: '',
      parqueos: '',
      caracteristicas: [],
      ...mergedFilters
    };

    let tagsData = null;
    let isUpdatingFromCode = false;
    let isInitializing = true;
    let searchTimeout = null;

    // Referencias DOM
    const loadingState = document.getElementById('loading-state');
    const searchBarContent = document.getElementById('search-bar-content');
    const actionBtns = document.querySelectorAll('.mini-action-btn');
    const currencyBtns = document.querySelectorAll('.mini-currency-btn');
    const tipoSelect = document.getElementById('mini-tipo');
    const ubicacionSelect = document.getElementById('mini-ubicacion');
    const sectorSelect = document.getElementById('mini-sector');
    const precioSelect = document.getElementById('mini-precio');
    const modalHabitaciones = document.getElementById('modal-habitaciones');
    const modalBanos = document.getElementById('modal-banos');
    const modalParqueos = document.getElementById('modal-parqueos');
    const caracteristicasGrid = document.getElementById('caracteristicas-grid');
    const moreFiltersToggle = document.getElementById('more-filters-toggle');
    const advancedPanel = document.getElementById('advanced-filters-panel');
    const searchBtn = document.getElementById('mini-search-btn');

    // 📡 Cargar datos desde Edge Function
    async function loadTagsData() {
      try {
        console.log('📡 Cargando datos desde Edge Function...');
        
        // Construir URL con parámetros de idioma y host
        const urlParams = new URLSearchParams();
        
        // Detectar idioma desde la URL actual o navegador
        const currentPath = window.location.pathname;
        let detectedLang = 'es';
        if (currentPath.startsWith('/en/')) detectedLang = 'en';
        else if (currentPath.startsWith('/fr/')) detectedLang = 'fr';
        
        urlParams.set('lang', detectedLang);
        
        const finalUrl = `${edgeFunctionUrl}?${urlParams.toString()}`;
        console.log('🔗 Calling Edge Function:', finalUrl);
        
        const response = await fetch(finalUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'x-original-host': window.location.host,
            'x-forwarded-host': window.location.host,
            'Accept-Language': navigator.language || 'es'
          }
        });

        console.log('📡 Response status:', response.status);

        if (!response.ok) {
          const errorText = await response.text();
          console.error('❌ HTTP Error Response:', errorText);
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('📊 Raw response:', result);
        
        if (!result.success) {
          throw new Error(result.error || 'Error desconocido');
        }

        tagsData = result.data;
        console.log('✅ Datos cargados exitosamente:', {
          country: tagsData.country?.name,
          language: tagsData.language,
          total_tags: Object.values(tagsData.tags).reduce((sum, arr) => sum + arr.length, 0),
          categories: Object.keys(tagsData.tags).map(cat => `${cat}: ${tagsData.tags[cat].length}`).join(', ')
        });
        
        return tagsData;
        
      } catch (error) {
        console.error('❌ Error cargando datos:', error);
        
        // Fallback con datos mínimos para desarrollo
        console.log('🔄 Usando datos de fallback para desarrollo');
        return {
          country: { 
            name: 'República Dominicana', 
            code: 'DOM', 
            currency: 'DOP',
            id: '0bd97f6d-5eda-4990-90e7-270148613a25'
          },
          language: 'es',
          tags: {
            accion: [
              { id: '1', slug: 'comprar', display_name: 'Comprar', category: 'accion', property_count: 100 },
              { id: '2', slug: 'alquilar', display_name: 'Alquilar', category: 'accion', property_count: 50 }
            ],
            tipo: [
              { id: '3', slug: 'apartamento', display_name: 'Apartamento', category: 'tipo', property_count: 75 },
              { id: '4', slug: 'casa', display_name: 'Casa', category: 'tipo', property_count: 25 }
            ],
            ubicacion: [
              { id: '5', slug: 'distrito-nacional', display_name: 'Distrito Nacional', category: 'ubicacion', property_count: 80 }
            ],
            sector: [],
            precio: [],
            habitaciones: [
              { id: '6', slug: '1', display_name: '1', category: 'habitaciones', property_count: 20 },
              { id: '7', slug: '2', display_name: '2', category: 'habitaciones', property_count: 40 },
              { id: '8', slug: '3', display_name: '3', category: 'habitaciones', property_count: 30 }
            ],
            banos: [
              { id: '9', slug: '1', display_name: '1', category: 'banos', property_count: 30 },
              { id: '10', slug: '2', display_name: '2', category: 'banos', property_count: 50 }
            ],
            parqueos: [
              { id: '11', slug: '1', display_name: '1', category: 'parqueos', property_count: 40 }
            ],
            caracteristicas: [
              { id: '12', slug: 'piscina', display_name: 'Piscina', category: 'caracteristicas', property_count: 15 },
              { id: '13', slug: 'gimnasio', display_name: 'Gimnasio', category: 'caracteristicas', property_count: 10 }
            ]
          }
        };
      }
    }

    // 🏗️ Construir opciones de select
    function populateSelect(selectElement, tags, emptyLabel) {
      if (!selectElement || !tags) return;
      
      isUpdatingFromCode = true;
      
      selectElement.innerHTML = `<option value="">${emptyLabel}</option>`;
      
      tags.forEach(tag => {
        if (tag.property_count > 0) { // Solo mostrar tags con propiedades
          const option = document.createElement('option');
          option.value = tag.slug;
          option.textContent = tag.display_name;
          option.dataset.tagId = tag.id;
          selectElement.appendChild(option);
        }
      });
      
      setTimeout(() => {
        isUpdatingFromCode = false;
      }, 0);
    }

    // 🏗️ Construir características
    function populateCaracteristicas(caracteristicas) {
      if (!caracteristicasGrid || !caracteristicas) return;
      
      caracteristicasGrid.innerHTML = '';
      
      caracteristicas.forEach(carac => {
        if (carac.property_count > 0) {
          const label = document.createElement('label');
          label.className = 'flex items-center space-x-2 cursor-pointer';
          label.innerHTML = `
            <input 
              type="checkbox" 
              value="${carac.slug}"
              data-tag-id="${carac.id}"
              class="modal-checkbox rounded border-gray-300 text-[#f04e00] focus:ring-[#f04e00]"
            />
            <span class="text-sm text-gray-700">${carac.display_name}</span>
          `;
          caracteristicasGrid.appendChild(label);
        }
      });
    }

    // 🏗️ Resolver segmentos de URL contra tags
    function resolveUrlSegments() {
      if (!tagsData || !mergedFilters.segments) return;
      
      const segments = mergedFilters.segments;
      
      segments.forEach(segment => {
        // Buscar en todos los tags
        Object.entries(tagsData.tags).forEach(([category, tags]) => {
          const matchingTag = tags.find(tag => tag.slug === segment);
          if (matchingTag) {
            switch(category) {
              case 'tipo':
                currentState.tipo = segment;
                break;
              case 'ubicacion':
                currentState.ubicacion = segment;
                break;
              case 'sector':
                currentState.sector = segment;
                break;
              case 'caracteristicas':
                if (!currentState.caracteristicas.includes(segment)) {
                  currentState.caracteristicas.push(segment);
                }
                break;
            }
          }
        });
      });
    }

    // 🎨 Funciones de UI
    function updateActionToggle(action) {
      actionBtns.forEach(btn => {
        if (btn.dataset.action === action) {
          btn.classList.add('bg-[#f04e00]', 'text-white', 'shadow-sm');
          btn.classList.remove('text-gray-600');
        } else {
          btn.classList.remove('bg-[#f04e00]', 'text-white', 'shadow-sm');
          btn.classList.add('text-gray-600');
        }
      });
    }

    function updateCurrencyToggle(currency) {
      currencyBtns.forEach(btn => {
        if ((currency === 'USD' && btn.id === 'currency-usd') || 
            (currency === 'DOP' && btn.id === 'currency-dop')) {
          btn.classList.add('bg-white', 'text-[#f04e00]', 'shadow-sm');
          btn.classList.remove('text-gray-600');
        } else {
          btn.classList.remove('bg-white', 'text-[#f04e00]', 'shadow-sm');
          btn.classList.add('text-gray-600');
        }
      });
    }

    function updateSectorOptions() {
      if (!tagsData) return;
      
      const ubicacionSlug = currentState.ubicacion;
      
      // Si no hay ubicación seleccionada, deshabilitar sectores
      if (!ubicacionSlug) {
        isUpdatingFromCode = true;
        sectorSelect.disabled = true;
        sectorSelect.innerHTML = '<option value="">Sector</option>';
        currentState.sector = '';
        setTimeout(() => { isUpdatingFromCode = false; }, 0);
        return;
      }
      
      // Filtrar sectores que pertenecen a la ubicación actual
      // Nota: En un sistema real, podrías necesitar una tabla de relación ubicacion-sector
      // Por ahora, mostramos todos los sectores disponibles cuando hay una ubicación
      const sectores = tagsData.tags.sector.filter(sector => {
        return sector.property_count > 0;
      });
      
      isUpdatingFromCode = true;
      
      if (sectores.length > 0) {
        sectorSelect.disabled = false;
        populateSelect(sectorSelect, sectores, 'Todos los sectores');
        if (currentState.sector) {
          const sectorExists = sectores.some(s => s.slug === currentState.sector);
          if (sectorExists) {
            sectorSelect.value = currentState.sector;
          } else {
            currentState.sector = '';
            sectorSelect.value = '';
          }
        }
      } else {
        sectorSelect.disabled = true;
        sectorSelect.innerHTML = '<option value="">Sector</option>';
        currentState.sector = '';
      }
      
      setTimeout(() => { isUpdatingFromCode = false; }, 0);
    }

    // 🔧 Construir URL de búsqueda
    function buildSearchURL() {
      const urlParts = [];
      
      urlParts.push(currentState.accion || 'comprar');
      
      if (currentState.tipo) urlParts.push(currentState.tipo);
      
      if (currentState.ubicacion) {
        urlParts.push(currentState.ubicacion);
        if (currentState.sector) urlParts.push(currentState.sector);
      }
      
      if (currentState.precio) {
        const currency = currentState.moneda.toLowerCase();
        if (currentState.precio.includes('-')) {
          const [min, max] = currentState.precio.split('-');
          urlParts.push(`precio-desde-${min}-${max}-${currency}`);
        } else if (currentState.precio.includes('+')) {
          const min = currentState.precio.replace('+', '');
          urlParts.push(`precio-desde-${min}-${currency}`);
        }
      }
      
      if (currentState.habitaciones) {
        urlParts.push(`${currentState.habitaciones}-habitaciones`);
      }
      if (currentState.banos) {
        urlParts.push(`${currentState.banos}-banos`);
      }
      if (currentState.parqueos) {
        urlParts.push(`${currentState.parqueos}-parqueos`);
      }
      
      if (currentState.caracteristicas && currentState.caracteristicas.length > 0) {
        currentState.caracteristicas.sort().forEach(caracteristica => {
          urlParts.push(caracteristica);
        });
      }
      
      return '/' + urlParts.join('/');
    }

    // ⚡ Ejecutar búsqueda
    function executeSearch() {
      if (isInitializing) return;
      
      if (searchTimeout) clearTimeout(searchTimeout);
      
      searchTimeout = setTimeout(() => {
        const url = buildSearchURL();
        console.log('🔍 Ejecutando búsqueda:', url);
        window.location.href = url;
      }, 300);
    }

    // 📍 Inicializar componente
    async function initializeComponent() {
      try {
        // Cargar datos
        const data = await loadTagsData();
        
        // Resolver segmentos de URL
        resolveUrlSegments();
        
        // Poblar dropdowns
        populateSelect(tipoSelect, data.tags.tipo, 'Tipo de Inmueble');
        populateSelect(ubicacionSelect, data.tags.ubicacion, 'Ubicación');
        populateSelect(precioSelect, data.tags.precio, 'Precio');
        populateSelect(modalHabitaciones, data.tags.habitaciones, 'Cualquiera');
        populateSelect(modalBanos, data.tags.banos, 'Cualquiera');
        populateSelect(modalParqueos, data.tags.parqueos, 'Cualquiera');
        
        populateCaracteristicas(data.tags.caracteristicas);
        
        // Actualizar UI con estado actual
        updateActionToggle(currentState.accion);
        updateCurrencyToggle(currentState.moneda);
        updateSectorOptions();
        
        // Setear valores seleccionados
        if (tipoSelect && currentState.tipo) tipoSelect.value = currentState.tipo;
        if (ubicacionSelect && currentState.ubicacion) ubicacionSelect.value = currentState.ubicacion;
        if (precioSelect && currentState.precio) precioSelect.value = currentState.precio;
        if (modalHabitaciones && currentState.habitaciones) modalHabitaciones.value = currentState.habitaciones;
        if (modalBanos && currentState.banos) modalBanos.value = currentState.banos;
        if (modalParqueos && currentState.parqueos) modalParqueos.value = currentState.parqueos;
        
        // Marcar características seleccionadas
        if (currentState.caracteristicas && Array.isArray(currentState.caracteristicas)) {
          currentState.caracteristicas.forEach(caracSlug => {
            const checkbox = caracteristicasGrid?.querySelector(`input[value="${caracSlug}"]`);
            if (checkbox) checkbox.checked = true;
          });
        }
        
        // Ocultar loading y mostrar contenido
        loadingState?.classList.add('hidden');
        searchBarContent?.classList.remove('hidden');
        
        isInitializing = false;
        console.log('✅ Componente inicializado correctamente');
        
      } catch (error) {
        console.error('❌ Error inicializando componente:', error);
        loadingState.innerHTML = '<div class="text-red-600">Error cargando filtros. Por favor, recarga la página.</div>';
      }
    }

    // 🎯 Event Listeners
    
    // Acciones
    actionBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const action = btn.dataset.action;
        if (action !== currentState.accion) {
          currentState.accion = action;
          updateActionToggle(action);
          executeSearch();
        }
      });
    });

    // Moneda
    currencyBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const currency = btn.id === 'currency-usd' ? 'USD' : 'DOP';
        if (currency !== currentState.moneda) {
          currentState.moneda = currency;
          updateCurrencyToggle(currency);
          // Actualizar rangos de precio aquí si es necesario
        }
      });
    });

    // Selectores principales
    tipoSelect?.addEventListener('change', function() {
      if (this.value !== currentState.tipo && !isUpdatingFromCode) {
        currentState.tipo = this.value;
        executeSearch();
      }
    });

    ubicacionSelect?.addEventListener('change', function() {
      if (this.value !== currentState.ubicacion && !isUpdatingFromCode) {
        currentState.ubicacion = this.value;
        currentState.sector = '';
        updateSectorOptions();
        executeSearch();
      }
    });

    sectorSelect?.addEventListener('change', function() {
      if (this.value !== currentState.sector && !isUpdatingFromCode) {
        currentState.sector = this.value;
        executeSearch();
      }
    });

    precioSelect?.addEventListener('change', function() {
      if (this.value !== currentState.precio && !isUpdatingFromCode) {
        currentState.precio = this.value;
        executeSearch();
      }
    });

    // Modal
    moreFiltersToggle?.addEventListener('click', (e) => {
      e.preventDefault();
      advancedPanel?.classList.toggle('hidden');
    });

    document.getElementById('close-advanced')?.addEventListener('click', () => {
      advancedPanel?.classList.add('hidden');
    });

    document.getElementById('apply-secondary-filters')?.addEventListener('click', () => {
      currentState.habitaciones = modalHabitaciones?.value || '';
      currentState.banos = modalBanos?.value || '';
      currentState.parqueos = modalParqueos?.value || '';
      
      currentState.caracteristicas = [];
      document.querySelectorAll('.modal-checkbox:checked').forEach(checkbox => {
        currentState.caracteristicas.push(checkbox.value);
      });
      
      advancedPanel?.classList.add('hidden');
      executeSearch();
    });

    document.getElementById('clear-secondary-filters')?.addEventListener('click', () => {
      currentState.habitaciones = '';
      currentState.banos = '';
      currentState.parqueos = '';
      currentState.caracteristicas = [];
      
      if (modalHabitaciones) modalHabitaciones.value = '';
      if (modalBanos) modalBanos.value = '';
      if (modalParqueos) modalParqueos.value = '';
      
      document.querySelectorAll('.modal-checkbox').forEach(checkbox => {
        checkbox.checked = false;
      });
    });

    searchBtn?.addEventListener('click', executeSearch);

    // 🚀 Inicializar
    await initializeComponent();
  });
</script>

<style>
  .mini-select-with-icon {
    @apply appearance-none bg-white border border-gray-200 rounded-lg py-2 text-sm focus:ring-2 focus:ring-[#f04e00] focus:border-transparent transition-all;
  }
  
  .mini-select-with-icon:focus {
    outline: none;
  }
  
  .modal-checkbox:checked {
    background-color: #f04e00;
    border-color: #f04e00;
  }
  
  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
  
  @media (max-width: 1024px) {
    .flex-1 {
      min-width: 120px;
    }
  }
  
  @media (max-width: 640px) {
    .flex-1 {
      min-width: 100px;
    }
  }
</style>