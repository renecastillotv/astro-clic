---
// MiniSearchBar.astro - COMPLETE REWRITE with direct data integration
import { Search, BedDouble, Bath, Car, Home, MapPin, Filter, ChevronDown, X } from "lucide-astro";

export interface Props {
  // Datos del search tags handler
  searchTags?: any;
  locationHierarchy?: any;
  preselectedFilters?: any;
  language?: string;
  country?: any;
  trackingString?: string;
  // Props legacy (mantenidas para compatibilidad)
  currentFilters?: {
    accion?: string;
    tipo?: string;
    ubicacion?: string;
    sector?: string;
    precioMin?: string;
    precioMax?: string;
    moneda?: string;
    habitaciones?: string;
    banos?: string;
    parqueos?: string;
    estado?: string;
    caracteristicas?: string[];
  };
  isSticky?: boolean;
}

const { 
  searchTags,
  locationHierarchy,
  preselectedFilters,
  language = 'es',
  country,
  trackingString = '',
  currentFilters = {},
  isSticky = false 
} = Astro.props;

// Detectar monedas disponibles desde searchTags o usar default
let availableCurrencies = ['USD', 'DOP'];
let defaultCurrency = 'USD';

if (searchTags?.currencies) {
  availableCurrencies = searchTags.currencies.available || ['USD', 'DOP'];
  defaultCurrency = searchTags.currencies.default || availableCurrencies[0];
} else if (country?.currencies) {
  availableCurrencies = country.currencies.available || ['USD', 'DOP'];
  defaultCurrency = country.currencies.default || availableCurrencies[0];
}

// Usar solo las primeras 2 monedas máximo
availableCurrencies = availableCurrencies.slice(0, 2);

// Fusionar filtros: preselectedFilters tiene prioridad sobre currentFilters
const mergedFilters = {
  accion: 'comprar',
  moneda: defaultCurrency,
  ubicacion: '',
  sector: '',
  tipo: '',
  habitaciones: '',
  banos: '',
  parqueos: '',
  area: '',
  precio: '',
  caracteristicas: [],
  ...currentFilters,
  ...(preselectedFilters || {})
};

// Manejar mapeo de campos específicos de preselectedFilters
if (preselectedFilters) {
  // Usar ciudad en lugar de ubicacion si ciudad tiene valor
  if (preselectedFilters.ciudad && !mergedFilters.ubicacion) {
    mergedFilters.ubicacion = preselectedFilters.ciudad;
  }
  
  // Sincronizar campos adicionales
  mergedFilters.ciudad = preselectedFilters.ciudad || '';
  mergedFilters.provincia = preselectedFilters.provincia || '';
}

// Si no hay moneda preseleccionada válida, usar default
if (!mergedFilters.moneda || !availableCurrencies.includes(mergedFilters.moneda)) {
  mergedFilters.moneda = defaultCurrency;
}

console.log('MiniSearchBar - Inicializando:', {
  hasSearchTags: !!searchTags,
  hasLocationHierarchy: !!locationHierarchy,
  hasPreselectedFilters: !!preselectedFilters,
  mergedFilters,
  availableCurrencies,
  defaultCurrency,
  language,
  trackingString
});
---

<!-- Contenedor principal -->
<div class="w-full" id="mini-search-container">
  <!-- MAIN SEARCH BAR -->
  <div id="search-bar-content">
    <!-- FILTROS PRINCIPALES -->
    <div class="flex flex-col lg:flex-row gap-3 lg:gap-2 lg:items-center mb-4">
      
      <!-- Primera fila: Acción + Tipo + Ubicación -->
      <div class="flex flex-wrap gap-2 lg:flex-nowrap lg:flex-1">
        
        <!-- 1. ACCIÓN: Comprar/Alquilar -->
        <div class="flex bg-gray-100 rounded-lg p-1 flex-shrink-0">
          <button 
            id="action-comprar" 
            class="mini-action-btn px-3 py-2 text-xs font-semibold rounded-md transition-all"
            data-action="comprar"
          >
            {language === 'en' ? 'BUY' : language === 'fr' ? 'ACHETER' : 'COMPRAR'}
          </button>
          <button 
            id="action-alquilar" 
            class="mini-action-btn px-3 py-2 text-xs font-semibold rounded-md transition-all"
            data-action="alquilar"
          >
            {language === 'en' ? 'RENT' : language === 'fr' ? 'LOUER' : 'ALQUILAR'}
          </button>
        </div>

        <!-- 2. TIPO DE INMUEBLE -->
        <div class="relative flex-1 min-w-0">
          <select id="mini-tipo" class="mini-select-with-icon w-full pl-9 pr-7 text-sm appearance-none">
            <option value="">
              {language === 'en' ? 'Property Type' : language === 'fr' ? 'Type de Propriété' : 'Tipo de Inmueble'}
            </option>
          </select>
          <Home class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none z-10" />
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>

        <!-- 3. UBICACIÓN -->
        <div class="relative flex-1 min-w-0">
          <select id="mini-ubicacion" class="mini-select-with-icon w-full pl-9 pr-7 text-sm appearance-none">
            <option value="">
              {language === 'en' ? 'Location' : language === 'fr' ? 'Localisation' : 'Ubicación'}
            </option>
          </select>
          <MapPin class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none z-10" />
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>
      </div>

      <!-- Segunda fila: Sector + Precio + Filtros + Buscar -->
      <div class="flex flex-wrap gap-2 lg:flex-nowrap lg:flex-shrink-0">
        
        <!-- 4. SECTOR -->
        <div class="relative min-w-0 flex-1 lg:w-32">
          <select id="mini-sector" class="mini-select-with-icon w-full pl-3 pr-7 text-sm appearance-none" disabled>
            <option value="">
              {language === 'en' ? 'Sector' : language === 'fr' ? 'Secteur' : 'Sector'}
            </option>
          </select>
          <ChevronDown class="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none z-10" />
        </div>

        <!-- 5. PRECIO con toggle moneda dinámico -->
        <div id="price-container" class="relative flex items-center bg-gray-50 rounded-lg border border-gray-200 min-w-0 flex-1 lg:w-48">
          <!-- Toggle de moneda (creado dinámicamente) -->
          <div id="currency-toggle" class="flex bg-gray-100 rounded-l-lg" style="display: none;">
            <!-- Botones de moneda se crearán dinámicamente -->
          </div>
          <select id="mini-precio" class="appearance-none bg-transparent border-none outline-none py-2 text-sm flex-1 min-w-0 px-3">
            <option value="">
              {language === 'en' ? 'Price' : language === 'fr' ? 'Prix' : 'Precio'}
            </option>
          </select>
          <ChevronDown class="absolute right-2 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-400 pointer-events-none" />
        </div>

        <!-- BOTÓN: Más filtros -->
        <button id="more-filters-toggle" class="flex items-center gap-1 px-3 py-2 bg-white border border-gray-200 hover:border-[#f04e00] text-gray-600 hover:text-[#f04e00] rounded-lg transition-all group text-sm font-medium whitespace-nowrap">
          <span class="text-xs">
            {language === 'en' ? 'More filters' : language === 'fr' ? 'Plus de filtres' : 'Más filtros'}
          </span>
          <svg class="w-3 h-3 group-hover:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <!-- BOTÓN: Buscar -->
        <button id="mini-search-btn" class="flex items-center gap-2 px-4 py-2 bg-gray-300 cursor-not-allowed text-white rounded-lg transition-all font-semibold text-sm whitespace-nowrap" disabled>
          <Search class="w-4 h-4" />
          <span class="hidden sm:inline">
            {language === 'en' ? 'Select filters' : language === 'fr' ? 'Sélectionner filtres' : 'Selecciona filtros'}
          </span>
        </button>
      </div>
    </div>

    <!-- MODAL: Filtros Secundarios -->
    <div id="advanced-filters-panel" class="hidden mt-4 p-6 bg-gray-50 rounded-lg border">
      <h3 class="text-lg font-semibold text-gray-900 mb-6">
        {language === 'en' ? 'Additional filters' : language === 'fr' ? 'Filtres supplémentaires' : 'Filtros adicionales'}
      </h3>
      
      <!-- Habitaciones, Baños, Parqueos, Área -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">
            {language === 'en' ? 'Bedrooms' : language === 'fr' ? 'Chambres' : 'Habitaciones'}
          </label>
          <select id="modal-habitaciones" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">
              {language === 'en' ? 'Any' : language === 'fr' ? 'Toutes' : 'Cualquiera'}
            </option>
          </select>
        </div>
        
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">
            {language === 'en' ? 'Bathrooms' : language === 'fr' ? 'Salles de bain' : 'Baños'}
          </label>
          <select id="modal-banos" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">
              {language === 'en' ? 'Any' : language === 'fr' ? 'Toutes' : 'Cualquiera'}
            </option>
          </select>
        </div>
        
        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">
            {language === 'en' ? 'Parking' : language === 'fr' ? 'Parking' : 'Parqueos'}
          </label>
          <select id="modal-parqueos" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">
              {language === 'en' ? 'Any' : language === 'fr' ? 'Tous' : 'Cualquiera'}
            </option>
          </select>
        </div>

        <div class="space-y-2">
          <label class="text-sm font-semibold text-gray-700">
            {language === 'en' ? 'Area' : language === 'fr' ? 'Surface' : 'Área'}
          </label>
          <select id="modal-area" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#f04e00] focus:border-transparent">
            <option value="">
              {language === 'en' ? 'Any' : language === 'fr' ? 'Toutes' : 'Cualquiera'}
            </option>
          </select>
        </div>
      </div>
      
      <!-- Características -->
      <div class="mb-6">
        <h4 class="text-sm font-semibold text-gray-700 mb-3">
          {language === 'en' ? 'Features' : language === 'fr' ? 'Caractéristiques' : 'Características'}
        </h4>
        <div id="caracteristicas-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
          <!-- Se llenarán dinámicamente -->
        </div>
      </div>
      
      <!-- Botones del modal -->
      <div class="flex justify-between items-center pt-4 border-t border-gray-200">
        <button id="clear-secondary-filters" class="text-sm text-gray-600 hover:text-gray-800 font-medium">
          {language === 'en' ? 'Clear secondary filters' : language === 'fr' ? 'Effacer filtres secondaires' : 'Limpiar filtros secundarios'}
        </button>
        <div class="flex gap-3">
          <button id="close-advanced" class="px-4 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            {language === 'en' ? 'Close' : language === 'fr' ? 'Fermer' : 'Cerrar'}
          </button>
          <button id="apply-secondary-filters" class="px-4 py-2 text-sm bg-[#f04e00] text-white rounded-lg hover:bg-[#d94400] transition-colors">
            {language === 'en' ? 'Apply filters' : language === 'fr' ? 'Appliquer filtres' : 'Aplicar filtros'}
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ mergedFilters, searchTags, locationHierarchy, language, trackingString, availableCurrencies, defaultCurrency }}>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('MiniSearchBar - Iniciando con datos directos del handler');
    
    // Estado global
    let currentState = {
      accion: 'comprar',
      tipo: '',
      ubicacion: '',
      sector: '',
      precio: '',
      moneda: defaultCurrency,
      habitaciones: '',
      banos: '',
      parqueos: '',
      area: '',
      caracteristicas: [],
      ...mergedFilters
    };

    // Asegurar que caracteristicas sea un array
    if (currentState.caracteristicas && !Array.isArray(currentState.caracteristicas)) {
      currentState.caracteristicas = [];
    }

    let isUpdatingFromCode = false;
    let searchTimeout = null;
    let currencyBtns = [];

    // Referencias DOM
    const actionBtns = document.querySelectorAll('.mini-action-btn');
    const currencyToggle = document.getElementById('currency-toggle');
    const tipoSelect = document.getElementById('mini-tipo');
    const ubicacionSelect = document.getElementById('mini-ubicacion');
    const sectorSelect = document.getElementById('mini-sector');
    const precioSelect = document.getElementById('mini-precio');
    const modalHabitaciones = document.getElementById('modal-habitaciones');
    const modalBanos = document.getElementById('modal-banos');
    const modalParqueos = document.getElementById('modal-parqueos');
    const modalArea = document.getElementById('modal-area');
    const caracteristicasGrid = document.getElementById('caracteristicas-grid');
    const moreFiltersToggle = document.getElementById('more-filters-toggle');
    const advancedPanel = document.getElementById('advanced-filters-panel');
    const searchBtn = document.getElementById('mini-search-btn');

    console.log('Estado inicial:', currentState);

    // Inicializar UI
    initializeUI();

    function initializeUI() {
      console.log('Inicializando UI...');
      setupCurrencyToggle();
      updateActionToggle(currentState.accion);
      updateCurrencyToggle(currentState.moneda);
      populateSelectsWithData();
      setupEventListeners();
      updateSearchButtonState();
      console.log('UI inicializada correctamente');
    }
    
    // Configurar toggle de moneda dinámicamente
    function setupCurrencyToggle() {
      if (!currencyToggle) {
        console.warn('Currency toggle element not found');
        return;
      }
      
      console.log('Configurando toggle de moneda:', availableCurrencies);
      
      if (availableCurrencies.length <= 1) {
        // Solo una moneda, ocultar toggle
        currencyToggle.style.display = 'none';
        const precioInput = document.getElementById('mini-precio');
        if (precioInput) {
          precioInput.style.paddingLeft = '12px';
        }
        console.log('Toggle de moneda oculto - solo una moneda disponible');
        return;
      }
      
      // Múltiples monedas, mostrar toggle
      currencyToggle.style.display = 'flex';
      currencyToggle.innerHTML = '';
      
      availableCurrencies.forEach((currency, index) => {
        const button = document.createElement('button');
        button.id = `currency-${currency.toLowerCase()}`;
        button.className = 'mini-currency-btn px-2 py-2 text-xs font-medium transition-all';
        button.textContent = currency;
        button.dataset.currency = currency;
        
        if (index < availableCurrencies.length - 1) {
          button.classList.add('border-r', 'border-gray-200');
        }
        
        if (index === 0) {
          button.classList.add('rounded-l-lg');
        }
        
        currencyToggle.appendChild(button);
      });
      
      // Actualizar referencias a botones de moneda
      currencyBtns = currencyToggle.querySelectorAll('.mini-currency-btn');
      console.log('Toggle de moneda configurado con', currencyBtns.length, 'botones');
      
      // Ajustar padding del select de precio
      const precioInput = document.getElementById('mini-precio');
      if (precioInput) {
        precioInput.style.paddingLeft = '8px';
      }
    }

    // Helper para obtener etiquetas vacías según idioma
    function getEmptyLabel(type) {
      const labels = {
        es: {
          tipo: 'Tipo de Inmueble',
          ubicacion: 'Ubicación',
          habitaciones: 'Cualquiera',
          banos: 'Cualquiera',
          parqueos: 'Cualquiera',
          area: 'Cualquiera',
          precio: 'Precio'
        },
        en: {
          tipo: 'Property Type',
          ubicacion: 'Location',
          habitaciones: 'Any',
          banos: 'Any',
          parqueos: 'Any',
          area: 'Any',
          precio: 'Price'
        },
        fr: {
          tipo: 'Type de Propriété',
          ubicacion: 'Localisation',
          habitaciones: 'Toutes',
          banos: 'Toutes',
          parqueos: 'Tous',
          area: 'Toutes',
          precio: 'Prix'
        }
      };
      return labels[language]?.[type] || labels.es[type];
    }
    
    // Poblar selects con datos reales del handler
    function populateSelectsWithData() {
      console.log('Poblando selects con estado:', currentState);
      
      // 1. TIPOS DE INMUEBLE
      if (tipoSelect && searchTags?.tipo) {
        updateSelectWithData(tipoSelect, searchTags.tipo, getEmptyLabel('tipo'));
        if (currentState.tipo) {
          tipoSelect.value = currentState.tipo;
          console.log('Tipo preseleccionado:', currentState.tipo);
        }
      }
      
      // 2. UBICACIONES
      if (ubicacionSelect && searchTags) {
        const ubicaciones = [
          ...(searchTags.provincia || []),
          ...(searchTags.ciudad || [])
        ].sort((a, b) => a.display_name.localeCompare(b.display_name));
        
        updateSelectWithData(ubicacionSelect, ubicaciones, getEmptyLabel('ubicacion'));
        
        const ubicacionValue = currentState.ubicacion;
        if (ubicacionValue) {
          ubicacionSelect.value = ubicacionValue;
          console.log('Ubicación preseleccionada:', ubicacionValue);
        }
      }
      
      // 3. PRECIOS
      if (precioSelect && searchTags?.precio) {
        updatePrecioOptions();
        if (currentState.precio) {
          setTimeout(() => {
            const precioOption = [...precioSelect.options].find(option => option.value === currentState.precio);
            if (precioOption) {
              precioSelect.value = currentState.precio;
              console.log('Precio preseleccionado:', currentState.precio);
            } else {
              console.log('Precio preseleccionado no encontrado:', currentState.precio);
            }
          }, 100);
        }
      }
      
      // 4-6. MODAL FIELDS
      populateModalFields();
      
      // 7. CARACTERÍSTICAS
      if (caracteristicasGrid && searchTags) {
        updateCaracteristicasWithData();
      }
      
      // 8. SECTORES
      updateSectorOptions();
    }

    function populateModalFields() {
      // Habitaciones
      if (modalHabitaciones && searchTags?.habitaciones) {
        updateSelectWithData(modalHabitaciones, searchTags.habitaciones, getEmptyLabel('habitaciones'));
        if (currentState.habitaciones && currentState.habitaciones !== '') {
          // Buscar por slug exacto primero
          let matchingOption = [...modalHabitaciones.options].find(option => option.value === currentState.habitaciones);
          
          if (matchingOption) {
            modalHabitaciones.value = currentState.habitaciones;
            console.log('Habitaciones preseleccionadas por slug exacto:', currentState.habitaciones);
          } else {
            console.log('No se encontró slug exacto para habitaciones:', currentState.habitaciones);
            console.log('Opciones disponibles:', [...modalHabitaciones.options].map(o => ({ value: o.value, text: o.textContent })));
          }
        }
      }
      
      // Baños
      if (modalBanos && searchTags?.banos) {
        updateSelectWithData(modalBanos, searchTags.banos, getEmptyLabel('banos'));
        if (currentState.banos && currentState.banos !== '') {
          // Buscar por slug exacto primero
          let matchingOption = [...modalBanos.options].find(option => option.value === currentState.banos);
          
          if (matchingOption) {
            modalBanos.value = currentState.banos;
            console.log('Baños preseleccionados por slug exacto:', currentState.banos);
          } else {
            console.log('No se encontró slug exacto para baños:', currentState.banos);
            console.log('Opciones disponibles:', [...modalBanos.options].map(o => ({ value: o.value, text: o.textContent })));
          }
        }
      }
      
      // Parqueos
      if (modalParqueos && searchTags?.parqueos) {
        updateSelectWithData(modalParqueos, searchTags.parqueos, getEmptyLabel('parqueos'));
        if (currentState.parqueos && currentState.parqueos !== '') {
          // Buscar por slug exacto primero
          let matchingOption = [...modalParqueos.options].find(option => option.value === currentState.parqueos);
          
          if (matchingOption) {
            modalParqueos.value = currentState.parqueos;
            console.log('Parqueos preseleccionados por slug exacto:', currentState.parqueos);
          } else {
            console.log('No se encontró slug exacto para parqueos:', currentState.parqueos);
            console.log('Opciones disponibles:', [...modalParqueos.options].map(o => ({ value: o.value, text: o.textContent })));
          }
        }
      }

      // Área
      if (modalArea && searchTags?.area) {
        updateSelectWithData(modalArea, searchTags.area, getEmptyLabel('area'));
        if (currentState.area && currentState.area !== '') {
          // Para área, buscar por slug exacto
          const matchingOption = [...modalArea.options].find(option => option.value === currentState.area);
          if (matchingOption) {
            modalArea.value = currentState.area;
            console.log('Área preseleccionada:', currentState.area);
          } else {
            console.log('No se encontró opción para área:', currentState.area);
            console.log('Opciones de área disponibles:', [...modalArea.options].map(o => ({ value: o.value, text: o.textContent })));
          }
        }
      }
    }
    
    // Actualizar select con datos
    function updateSelectWithData(selectElement, tags, emptyLabel) {
      if (!selectElement || !tags) return;
      
      const currentValue = selectElement.value;
      
      isUpdatingFromCode = true;
      selectElement.innerHTML = `<option value="">${emptyLabel}</option>`;
      
      tags.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag.slug;
        option.textContent = tag.display_name;
        option.dataset.tagId = tag.id;
        selectElement.appendChild(option);
      });
      
      if (currentValue && [...selectElement.options].some(opt => opt.value === currentValue)) {
        selectElement.value = currentValue;
      }
      
      setTimeout(() => { isUpdatingFromCode = false; }, 0);
    }

    // Actualizar opciones de precio con filtrado y mejor logging  
    function updatePrecioOptions() {
      if (!precioSelect || !searchTags?.precio) {
        console.log('No se puede actualizar precios - falta precioSelect o searchTags.precio');
        return;
      }
      
      console.log('Actualizando precios para:', {
        accion: currentState.accion,
        moneda: currentState.moneda,
        totalPrecioTags: searchTags.precio.length
      });
      
      const preciosDisponibles = searchTags.precio.filter(tag => {
        // Si no tiene meta_info, incluir por defecto
        if (!tag.meta_info) {
          console.log(`Precio ${tag.slug}: Sin meta_info, incluido por defecto`);
          return true;
        }
        
        let metaInfo = tag.meta_info;
        if (typeof metaInfo === 'string') {
          try {
            metaInfo = JSON.parse(metaInfo);
          } catch (e) {
            console.log(`Precio ${tag.slug}: Error parsing meta_info, incluido por defecto`);
            return true;
          }
        }
        
        // Verificar tipo de operación
        const requiredRangeType = currentState.accion === 'comprar' ? 'sale' : 'rent';
        if (metaInfo.range_type && metaInfo.range_type !== requiredRangeType) {
          console.log(`Precio ${tag.slug}: Tipo incorrecto (${metaInfo.range_type} vs ${requiredRangeType})`);
          return false;
        }
        
        // Verificar moneda
        if (metaInfo.currency_ranges && !metaInfo.currency_ranges[currentState.moneda]) {
          console.log(`Precio ${tag.slug}: No tiene rango para ${currentState.moneda}`);
          return false;
        }
        
        console.log(`Precio ${tag.slug}: Incluido para ${currentState.accion}/${currentState.moneda}`);
        return true;
      });
      
      console.log(`Precios filtrados: ${preciosDisponibles.length} de ${searchTags.precio.length} disponibles`);
      
      updateSelectWithPrices(preciosDisponibles);
    }
    
    function updateSelectWithPrices(preciosDisponibles) {
      if (!precioSelect) return;
      
      const currentValue = precioSelect.value;
      
      isUpdatingFromCode = true;
      precioSelect.innerHTML = `<option value="">${getEmptyLabel('precio')}</option>`;
      
      preciosDisponibles.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag.slug;
        option.dataset.tagId = tag.id;
        
        // Determinar el texto a mostrar
        let displayText = tag.display_name;
        
        if (tag.meta_info) {
          let metaInfo = tag.meta_info;
          if (typeof metaInfo === 'string') {
            try {
              metaInfo = JSON.parse(metaInfo);
            } catch (e) {
              metaInfo = null;
            }
          }
          
          // Usar label específico de moneda si existe
          if (metaInfo?.currency_ranges?.[currentState.moneda]?.label) {
            displayText = metaInfo.currency_ranges[currentState.moneda].label;
          }
        }
        
        option.textContent = displayText;
        precioSelect.appendChild(option);
        
        console.log(`Precio agregado: ${tag.slug} = "${displayText}"`);
      });
      
      // Restaurar valor seleccionado si existe
      if (currentValue && [...precioSelect.options].some(opt => opt.value === currentValue)) {
        precioSelect.value = currentValue;
        console.log('Precio restaurado:', currentValue);
      } else if (currentValue) {
        console.log('Precio anterior no encontrado en nuevas opciones:', currentValue);
        currentState.precio = '';
      }
      
      setTimeout(() => { isUpdatingFromCode = false; }, 0);
    }
    
    // Actualizar características
    function updateCaracteristicasWithData() {
      if (!caracteristicasGrid || !searchTags) return;
      
      caracteristicasGrid.innerHTML = '';
      
      const allCaracteristicas = [
        ...(searchTags.amenity || []),
        ...(searchTags.feature || []),
        ...(searchTags.custom_list || [])
      ];
      
      allCaracteristicas.sort((a, b) => {
        if (a.is_featured !== b.is_featured) {
          return b.is_featured - a.is_featured;
        }
        return (a.priority || 999) - (b.priority || 999);
      });
      
      allCaracteristicas.forEach(carac => {
        const label = document.createElement('label');
        label.className = 'flex items-center space-x-2 cursor-pointer';
        
        // Verificar si está en las características preseleccionadas
        const isChecked = currentState.caracteristicas && 
                          Array.isArray(currentState.caracteristicas) && 
                          currentState.caracteristicas.includes(carac.slug);
        
        label.innerHTML = `
          <input 
            type="checkbox" 
            value="${carac.slug}"
            data-tag-id="${carac.id}"
            class="modal-checkbox rounded border-gray-300 text-[#f04e00] focus:ring-[#f04e00]"
            ${isChecked ? 'checked' : ''}
          />
          <span class="text-sm text-gray-700 ${carac.is_featured ? 'font-medium' : ''}">${carac.display_name}</span>
          ${carac.is_featured ? '<span class="text-xs text-blue-600">★</span>' : ''}
        `;
        caracteristicasGrid.appendChild(label);
      });
      
      console.log('Características actualizadas. Preseleccionadas:', currentState.caracteristicas);
    }

    // Actualizar sectores
    function updateSectorOptions() {
      if (!searchTags || !locationHierarchy) {
        if (sectorSelect) sectorSelect.disabled = !currentState.ubicacion;
        return;
      }
      
      const ubicacionSlug = currentState.ubicacion;
      
      if (!ubicacionSlug) {
        isUpdatingFromCode = true;
        sectorSelect.disabled = true;
        const selectorText = language === 'en' ? 'Select location first' : 
                            language === 'fr' ? 'Sélectionner lieu d\'abord' : 
                            'Selecciona ubicación primero';
        sectorSelect.innerHTML = `<option value="">${selectorText}</option>`;
        currentState.sector = '';
        setTimeout(() => { isUpdatingFromCode = false; }, 0);
        return;
      }
      
      const ubicacionSeleccionada = [
        ...(searchTags.provincia || []),
        ...(searchTags.ciudad || [])
      ].find(tag => tag.slug === ubicacionSlug);
      
      if (!ubicacionSeleccionada) {
        sectorSelect.disabled = true;
        return;
      }
      
      const sectoresDisponibles = (searchTags.sector || []).filter(sector => {
        return sector.parent_ids && sector.parent_ids.includes(ubicacionSeleccionada.id);
      });
      
      isUpdatingFromCode = true;
      
      if (sectoresDisponibles.length > 0) {
        sectorSelect.disabled = false;
        const allSectorsText = language === 'en' ? 'All sectors' : 
                              language === 'fr' ? 'Tous les secteurs' : 
                              'Todos los sectores';
        updateSelectWithData(sectorSelect, sectoresDisponibles, allSectorsText);
        
        if (currentState.sector) {
          const sectorExists = sectoresDisponibles.some(s => s.slug === currentState.sector);
          if (sectorExists) {
            sectorSelect.value = currentState.sector;
            console.log('Sector preseleccionado:', currentState.sector);
          } else {
            currentState.sector = '';
            sectorSelect.value = '';
          }
        }
      } else {
        sectorSelect.disabled = true;
        const noSectorsText = language === 'en' ? 'No sectors available' : 
                             language === 'fr' ? 'Aucun secteur disponible' : 
                             'No hay sectores disponibles';
        sectorSelect.innerHTML = `<option value="">${noSectorsText}</option>`;
        currentState.sector = '';
      }
      
      setTimeout(() => { isUpdatingFromCode = false; }, 0);
    }

    // Event Listeners
    function setupEventListeners() {
      // Acciones
      actionBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const action = btn.dataset.action;
          if (action !== currentState.accion) {
            console.log('Acción cambiada a:', action);
            currentState.accion = action;
            updateActionToggle(action);
            updatePrecioOptions();
            updateSearchButtonState();
          }
        });
      });

      // Configurar listeners de moneda después de crear los botones
      setupCurrencyListeners();

      // Selectores principales
      tipoSelect?.addEventListener('change', function() {
        if (this.value !== currentState.tipo && !isUpdatingFromCode) {
          console.log('Tipo cambiado a:', this.value);
          currentState.tipo = this.value;
          updateSearchButtonState();
        }
      });

      ubicacionSelect?.addEventListener('change', function() {
        if (this.value !== currentState.ubicacion && !isUpdatingFromCode) {
          console.log('Ubicación cambiada a:', this.value);
          currentState.ubicacion = this.value;
          currentState.sector = '';
          updateSectorOptions();
          updateSearchButtonState();
        }
      });

      sectorSelect?.addEventListener('change', function() {
        if (this.value !== currentState.sector && !isUpdatingFromCode) {
          console.log('Sector cambiado a:', this.value);
          currentState.sector = this.value;
          updateSearchButtonState();
        }
      });

      precioSelect?.addEventListener('change', function() {
        if (this.value !== currentState.precio && !isUpdatingFromCode) {
          console.log('Precio cambiado a:', this.value);
          currentState.precio = this.value;
          updateSearchButtonState();
        }
      });

      // Modal
      moreFiltersToggle?.addEventListener('click', (e) => {
        e.preventDefault();
        advancedPanel?.classList.toggle('hidden');
      });

      document.getElementById('close-advanced')?.addEventListener('click', () => {
        advancedPanel?.classList.add('hidden');
      });

      document.getElementById('apply-secondary-filters')?.addEventListener('click', () => {
        currentState.habitaciones = modalHabitaciones?.value || '';
        currentState.banos = modalBanos?.value || '';
        currentState.parqueos = modalParqueos?.value || '';
        currentState.area = modalArea?.value || '';
        
        currentState.caracteristicas = [];
        document.querySelectorAll('.modal-checkbox:checked').forEach(checkbox => {
          currentState.caracteristicas.push(checkbox.value);
        });
        
        console.log('Filtros secundarios aplicados:', currentState);
        
        advancedPanel?.classList.add('hidden');
        updateSearchButtonState();
      });

      document.getElementById('clear-secondary-filters')?.addEventListener('click', () => {
        currentState.habitaciones = '';
        currentState.banos = '';
        currentState.parqueos = '';
        currentState.area = '';
        currentState.caracteristicas = [];
        
        if (modalHabitaciones) modalHabitaciones.value = '';
        if (modalBanos) modalBanos.value = '';
        if (modalParqueos) modalParqueos.value = '';
        if (modalArea) modalArea.value = '';
        
        document.querySelectorAll('.modal-checkbox').forEach(checkbox => {
          checkbox.checked = false;
        });
        
        updateSearchButtonState();
      });

      searchBtn?.addEventListener('click', executeSearch);
    }

    function setupCurrencyListeners() {
      currencyBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const currency = btn.dataset.currency;
          if (currency !== currentState.moneda) {
            console.log('Moneda cambiada a:', currency);
            currentState.moneda = currency;
            updateCurrencyToggle(currency);
            updatePrecioOptions();
            updateSearchButtonState();
          }
        });
      });
    }

    // Funciones de UI
    function updateActionToggle(action) {
      actionBtns.forEach(btn => {
        if (btn.dataset.action === action) {
          btn.classList.add('bg-[#f04e00]', 'text-white', 'shadow-sm');
          btn.classList.remove('text-gray-600');
        } else {
          btn.classList.remove('bg-[#f04e00]', 'text-white', 'shadow-sm');
          btn.classList.add('text-gray-600');
        }
      });
    }

    function updateCurrencyToggle(currency) {
      currencyBtns.forEach(btn => {
        if (btn.dataset.currency === currency) {
          btn.classList.add('bg-white', 'text-[#f04e00]', 'shadow-sm');
          btn.classList.remove('text-gray-600');
        } else {
          btn.classList.remove('bg-white', 'text-[#f04e00]', 'shadow-sm');
          btn.classList.add('text-gray-600');
        }
      });
    }

    function updateSearchButtonState() {
      if (!searchBtn) return;
      
      const filterCount = getFilterCount();
      const hasFilters = filterCount > 1;
      
      if (hasFilters) {
        searchBtn.classList.remove('bg-gray-300', 'cursor-not-allowed');
        searchBtn.classList.add('bg-[#f04e00]', 'hover:bg-[#d94400]', 'cursor-pointer');
        searchBtn.disabled = false;
        
        const text = searchBtn.querySelector('span');
        if (text) {
          const searchText = language === 'en' ? 'Search' : language === 'fr' ? 'Rechercher' : 'Buscar';
          text.textContent = `${searchText} (${filterCount})`;
        }
      } else {
        searchBtn.classList.remove('bg-[#f04e00]', 'hover:bg-[#d94400]', 'cursor-pointer');
        searchBtn.classList.add('bg-gray-300', 'cursor-not-allowed');
        searchBtn.disabled = true;
        
        const text = searchBtn.querySelector('span');
        if (text) {
          text.textContent = getEmptyLabel('ubicacion').includes('Select') ? 'Select filters' : 
                            getEmptyLabel('ubicacion').includes('Sélectionner') ? 'Sélectionner filtres' : 
                            'Selecciona filtros';
        }
      }
    }
    
    function getFilterCount() {
      let count = 0;
      if (currentState.accion) count++;
      if (currentState.tipo) count++;
      if (currentState.ubicacion) count++;
      if (currentState.sector) count++;
      if (currentState.precio) count++;
      if (currentState.habitaciones && currentState.habitaciones !== '') count++;
      if (currentState.banos && currentState.banos !== '') count++;
      if (currentState.parqueos && currentState.parqueos !== '') count++;
      if (currentState.area && currentState.area !== '') count++;
      if (currentState.caracteristicas && Array.isArray(currentState.caracteristicas) && currentState.caracteristicas.length > 0) {
        count += currentState.caracteristicas.length;
      }
      return count;
    }

    function buildSearchURL() {
      console.log('Construyendo URL desde estado:', currentState);
      
      const urlParts = [];
      
      if (language !== 'es') {
        urlParts.push(language);
      }
      
      urlParts.push(currentState.accion || 'comprar');
      
      if (currentState.tipo) {
        urlParts.push(currentState.tipo);
      }
      
      if (currentState.ubicacion) {
        urlParts.push(currentState.ubicacion);
        if (currentState.sector) {
          urlParts.push(currentState.sector);
        }
      }
      
      if (currentState.precio) {
        urlParts.push(currentState.precio);
      }
      
      // Para habitaciones, baños, parqueos - usar el slug directamente (ya son slugs)
      if (currentState.habitaciones && currentState.habitaciones !== '') {
        urlParts.push(currentState.habitaciones);
        console.log('Habitaciones: incluido en URL:', currentState.habitaciones);
      }
      
      if (currentState.banos && currentState.banos !== '') {
        urlParts.push(currentState.banos);
        console.log('Baños: incluido en URL:', currentState.banos);
      }
      
      if (currentState.parqueos && currentState.parqueos !== '') {
        urlParts.push(currentState.parqueos);
        console.log('Parqueos: incluido en URL:', currentState.parqueos);
      }
      
      // Para área - usar slug tal como está
      if (currentState.area && currentState.area !== '') {
        urlParts.push(currentState.area);
        console.log('Área: incluido en URL:', currentState.area);
      }
      
      // Para características - usar slugs tal como están
      if (currentState.caracteristicas && currentState.caracteristicas.length > 0) {
        const sortedCaracteristicas = [...currentState.caracteristicas].sort();
        sortedCaracteristicas.forEach(caracteristica => {
          if (caracteristica && caracteristica !== '') {
            urlParts.push(caracteristica);
          }
        });
        console.log('Características incluidas en URL:', sortedCaracteristicas);
      }
      
      const finalUrl = '/' + urlParts.join('/') + (trackingString || '');
      console.log('URL final:', finalUrl);
      console.log('Partes incluidas:', urlParts);
      
      return finalUrl;
    }

    function executeSearch() {
      if (searchTimeout) clearTimeout(searchTimeout);
      
      searchTimeout = setTimeout(() => {
        const url = buildSearchURL();
        console.log('Navegando a:', url);
        
        if (searchBtn) {
          const text = searchBtn.querySelector('span');
          if (text) {
            const searchingText = language === 'en' ? 'Searching...' : language === 'fr' ? 'Recherche...' : 'Buscando...';
            text.textContent = searchingText;
          }
          searchBtn.disabled = true;
        }
        
        window.location.href = url;
      }, 300);
    }

    console.log('MiniSearchBar inicializado correctamente');
  });
</script>

<style>
  .mini-select-with-icon {
    @apply appearance-none bg-white border border-gray-200 rounded-lg py-2 text-sm focus:ring-2 focus:ring-[#f04e00] focus:border-transparent transition-all;
  }
  
  .mini-select-with-icon:focus {
    outline: none;
  }
  
  .modal-checkbox:checked {
    background-color: #f04e00;
    border-color: #f04e00;
  }
  
  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
  
  @media (max-width: 1024px) {
    .flex-1 {
      min-width: 120px;
    }
  }
  
  @media (max-width: 640px) {
    .flex-1 {
      min-width: 100px;
    }
  }
</style>