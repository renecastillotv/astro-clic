---
// src/components/property/sidebar/ArticlesWidget.astro
export interface Props {
  data: any;
  language?: string;
}

const { data, language = 'es' } = Astro.props;

// Multilingual translations
const translations = {
  es: {
    title: 'Artículos Relacionados',
    articles: 'Artículos',
    noArticles: 'No hay artículos disponibles en este momento',
    exploreAll: 'Explorar todos los artículos',
    viewAll: 'Ver todos',
    articlesAvailable: 'artículos disponibles',
    articleAvailable: 'artículo disponible',
    defaultExcerpt: 'Descubre más información útil sobre bienes raíces',
    readingTime: 'min'
  },
  en: {
    title: 'Related Articles',
    articles: 'Articles',
    noArticles: 'No articles available at this time',
    exploreAll: 'Explore all articles',
    viewAll: 'View all',
    articlesAvailable: 'articles available',
    articleAvailable: 'article available',
    defaultExcerpt: 'Discover useful real estate information',
    readingTime: 'min'
  },
  fr: {
    title: 'Articles Connexes',
    articles: 'Articles',
    noArticles: 'Aucun article disponible pour le moment',
    exploreAll: 'Explorer tous les articles',
    viewAll: 'Voir tout',
    articlesAvailable: 'articles disponibles',
    articleAvailable: 'article disponible',
    defaultExcerpt: 'Découvrez des informations utiles sur l\'immobilier',
    readingTime: 'min'
  }
};

const t = translations[language] || translations.es;

// Function to clean article text
function cleanArticleText(text) {
  if (!text) return '';
  
  return text
    .replace(/\*\*(.*?)\*\*/g, '$1')  // Remove **text**
    .replace(/<b>(.*?)<\/b>/gi, '$1') // Remove <b>text</b>
    .replace(/<strong>(.*?)<\/strong>/gi, '$1') // Remove <strong>text</strong>
    .replace(/<i>(.*?)<\/i>/gi, '$1') // Remove <i>text</i>
    .replace(/<em>(.*?)<\/em>/gi, '$1') // Remove <em>text</em>
    .replace(/<br\s*\/?>/gi, ' ') // Remove <br>
    .replace(/<p>(.*?)<\/p>/gi, '$1 ') // Remove <p>text</p>
    .replace(/<[^>]*>/g, '') // Remove any other HTML tags
    .replace(/&nbsp;/g, ' ') // Remove &nbsp;
    .replace(/&amp;/g, '&') // Decode &amp;
    .replace(/&lt;/g, '<') // Decode &lt;
    .replace(/&gt;/g, '>') // Decode &gt;
    .replace(/&quot;/g, '"') // Decode &quot;
    .replace(/&#39;/g, "'") // Decode &#39;
    .replace(/\s+/g, ' ') // Multiple spaces to one
    .trim();
}

// Function to format date based on language
function formatDate(dateString, lang) {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    const locales = {
      es: 'es-ES',
      en: 'en-US',
      fr: 'fr-FR'
    };
    
    return new Intl.DateTimeFormat(locales[lang] || 'es-ES', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    }).format(date);
  } catch {
    return '';
  }
}

// Function to format reading time
function formatReadingTime(minutes, lang) {
  if (!minutes || minutes <= 0) return `5 ${t.readingTime}`;
  
  if (minutes < 60) {
    return `${Math.round(minutes)} ${t.readingTime}`;
  } else {
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;
  }
}

// Function to get proper article URL based on language and data structure
function getArticleUrl(article, currentLanguage) {
  // Priority: use processed URL from API if available
  if (article.url) {
    return article.url;
  }
  
  // Fallback: construct URL based on available slug data
  const baseUrl = currentLanguage === 'es' ? '' : `/${currentLanguage}`;
  
  if (article.slug_url) {
    return `${baseUrl}/${article.slug_url}`;
  }
  
  // Language-specific slugs
  const slugMap = {
    es: article.slug,
    en: article.slug_en,
    fr: article.slug_fr
  };
  
  const slug = slugMap[currentLanguage] || article.slug;
  
  if (slug) {
    return `${baseUrl}/${slug}`;
  }
  
  // Final fallback
  return `${baseUrl}/articulos/${article.id}`;
}

// Function to get "view all" URL based on language
function getViewAllUrl(currentLanguage) {
  const urlMap = {
    es: '/articulos',
    en: '/en/articles',
    fr: '/fr/articles'
  };
  
  return urlMap[currentLanguage] || '/articulos';
}

// CORRECCIÓN: Usar solo UNA fuente de datos
const rawArticles = data.related_content?.articles || [];

// Remove duplicates by ID (por si acaso existan duplicados en la fuente)
const uniqueArticles = rawArticles.filter((article, index, self) => 
  index === self.findIndex(a => a.id === article.id)
);

// Clean and process articles
const articles = uniqueArticles.map(article => {
  // Get language-specific content
  const getLocalizedContent = (field, fallbackField = null) => {
    if (language === 'en' && article.content_en?.[field]) {
      return article.content_en[field];
    }
    if (language === 'fr' && article.content_fr?.[field]) {
      return article.content_fr[field];
    }
    return article[fallbackField || field] || article[field] || '';
  };

  const title = cleanArticleText(getLocalizedContent('title') || 'Artículo sin título');
  const excerpt = cleanArticleText(getLocalizedContent('excerpt', 'excerpt') || 
                                   getLocalizedContent('description', 'meta_description') || '');
  
  return {
    ...article,
    title,
    excerpt,
    formatted_date: formatDate(article.published_at || article.created_at, language),
    reading_time_display: formatReadingTime(article.read_time || article.reading_time, language),
    article_url: getArticleUrl(article, language)
  };
}).filter(article => article.title && article.title !== 'Artículo sin título');

const viewAllUrl = getViewAllUrl(language);

// Debug info (remover en producción)
console.log('ArticlesWidget Debug:', {
  language: language,
  rawArticlesCount: rawArticles.length,
  uniqueArticlesCount: uniqueArticles.length,
  finalArticlesCount: articles.length,
  hasDuplicates: rawArticles.length !== uniqueArticles.length,
  articleTitles: articles.map(a => a.title).slice(0, 3)
});
---

<!-- Articles Widget -->
{articles.length > 0 && (
  <div class="bg-white rounded-lg shadow-md p-6 border border-gray-200">
    <div class="flex items-center gap-2 mb-6">
      <svg class="w-5 h-5 text-[#f04e00]" fill="currentColor" viewBox="0 0 24 24">
        <path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z"/>
      </svg>
      <h3 class="text-lg font-semibold text-gray-900">{t.title}</h3>
    </div>

    <div class="space-y-3">
      {articles.slice(0, 6).map((article) => {
        // Determine excerpt text
        const excerptText = article.excerpt || 
                           (article.content ? cleanArticleText(article.content).substring(0, 80) + '...' : '') ||
                           t.defaultExcerpt;
        
        // Truncate if too long
        const displayExcerpt = excerptText.length > 80 ? 
                              `${excerptText.substring(0, 80)}...` : 
                              excerptText;

        // Determine image
        const displayImage = article.featured_image || '/images/default-article.jpg';
        
        return (
          <article class="group">
            <a 
              href={article.article_url}
              class="block hover:bg-gray-50 rounded-lg p-3 -m-3 transition-all duration-200 border border-transparent hover:border-gray-200"
            >
              <div class="flex gap-3">
                <!-- Article image -->
                <div class="flex-shrink-0">
                  <div class="relative w-14 h-14 rounded-lg overflow-hidden bg-gray-100">
                    <img 
                      src={displayImage} 
                      alt={article.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                    />
                    <!-- Fallback icon -->
                    <div 
                      class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-[#f04e00] to-[#e03400] text-white"
                      style={displayImage !== '/images/default-article.jpg' ? 'display: none;' : 'display: flex;'}
                    >
                      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                    </div>
                  </div>
                </div>

                <!-- Article content -->
                <div class="flex-1 min-w-0">
                  <h4 class="font-semibold text-gray-900 text-sm leading-tight mb-1 group-hover:text-[#f04e00] transition-colors line-clamp-2">
                    {article.title}
                  </h4>
                  
                  <p class="text-xs text-gray-600 leading-relaxed mb-2 line-clamp-2">
                    {displayExcerpt}
                  </p>

                  <!-- Simplified metadata -->
                  <div class="flex items-center justify-between text-xs text-gray-500">
                    <div class="flex items-center gap-2">
                      {article.formatted_date && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                          </svg>
                          {article.formatted_date}
                        </span>
                      )}
                      
                      {article.formatted_date && article.reading_time_display && (
                        <span>•</span>
                      )}
                      
                      {article.reading_time_display && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>
                            <path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>
                          </svg>
                          {article.reading_time_display}
                        </span>
                      )}
                    </div>

                    <!-- Click indicator -->
                    <svg class="w-3 h-3 text-gray-400 group-hover:text-[#f04e00] transition-colors flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
                    </svg>
                  </div>
                </div>
              </div>
            </a>
          </article>
        );
      })}
    </div>

    <!-- Footer -->
    <div class="mt-6 pt-4 border-t border-gray-200">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-2 text-sm text-gray-600">
          <svg class="w-4 h-4 text-[#f04e00]" fill="currentColor" viewBox="0 0 24 24">
            <path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"/>
          </svg>
          <span>
            {articles.length === 1 ? `1 ${t.articleAvailable}` : `${articles.length} ${t.articlesAvailable}`}
          </span>
        </div>
        
        <a 
          href={viewAllUrl}
          class="text-sm text-[#f04e00] hover:text-[#d94400] font-medium transition-colors flex items-center gap-1"
        >
          <span>{t.viewAll}</span>
          <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
)}

<!-- Fallback: message when no articles -->
{articles.length === 0 && (
  <div class="bg-white rounded-lg shadow-md p-6 border border-gray-200">
    <div class="flex items-center gap-2 mb-4">
      <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
        <path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z"/>
      </svg>
      <h3 class="text-lg font-semibold text-gray-900">{t.articles}</h3>
    </div>
    
    <div class="text-center py-4">
      <svg class="w-12 h-12 text-gray-300 mx-auto mb-3" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h16c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"/>
      </svg>
      <p class="text-gray-600 text-sm mb-3">{t.noArticles}</p>
      <a 
        href={viewAllUrl}
        class="inline-flex items-center gap-2 text-[#f04e00] hover:text-[#d94400] font-medium text-sm transition-colors"
      >
        <span>{t.exploreAll}</span>
        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
        </svg>
      </a>
    </div>
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>