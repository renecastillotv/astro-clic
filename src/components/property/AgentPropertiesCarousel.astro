---
// src/components/property/AgentPropertiesCarousel.astro - UPDATED FOR NEW DATA STRUCTURE
// Actualizado para usar data.agent.main, data.agent.properties, data.agent.should_show_properties

export interface Props {
  data: any;
  language?: string;
}

const { data, language } = Astro.props;

// Try to get language from multiple sources
const currentLanguage = language || 
                       data.language || 
                       data.meta?.language || 
                       'es';

// Multilingual translations
const translations = {
  es: {
    morePropertiesOf: 'M√°s Propiedades de',
    thisAdvisor: 'Este Asesor',
    propertyAvailable: 'propiedad disponible',
    propertiesAvailable: 'propiedades disponibles',
    propertiesShown: 'propiedades mostradas',
    viewAllProperties: 'Ver todas las',
    propertiesOf: 'propiedades de',
    thisAdvisorLower: 'este asesor'
  },
  en: {
    morePropertiesOf: 'More Properties by',
    thisAdvisor: 'This Advisor',
    propertyAvailable: 'property available',
    propertiesAvailable: 'properties available', 
    propertiesShown: 'properties shown',
    viewAllProperties: 'View all',
    propertiesOf: 'properties by',
    thisAdvisorLower: 'this advisor'
  },
  fr: {
    morePropertiesOf: 'Plus de Propri√©t√©s de',
    thisAdvisor: 'Ce Conseiller',
    propertyAvailable: 'propri√©t√© disponible',
    propertiesAvailable: 'propri√©t√©s disponibles',
    propertiesShown: 'propri√©t√©s affich√©es', 
    viewAllProperties: 'Voir toutes les',
    propertiesOf: 'propri√©t√©s de',
    thisAdvisorLower: 'ce conseiller'
  }
};

const t = translations[currentLanguage] || translations.es;

// ===== USAR NUEVA ESTRUCTURA DE DATOS =====
// Los datos ya vienen procesados con title_display, price_display, URL, etc.

const agent = data.agent?.main || {};
const agentProperties = data.agent?.properties || [];
const shouldShowCarousel = data.agent?.should_show_properties || false;

// Solo mostrar si debe mostrar carrusel Y hay propiedades
const showCarousel = shouldShowCarousel && agentProperties.length > 0;

// Helper function para limpiar imagen URL
function getCleanImageUrl(imageUrl) {
  if (!imageUrl) return '/images/placeholder-property.jpg';
  
  // Si la imagen contiene _small., intentar upgrade a _large.
  if (imageUrl.includes('_small.')) {
    return imageUrl.replace('_small.', '_large.');
  }
  
  return imageUrl;
}

// Helper function para generar URL del asesor con idioma correcto
function getAdvisorUrl(slug, language, trackingString = '') {
  if (!slug) return '#';
  
  const translations = {
    'es': 'asesores',
    'en': 'en/advisors', 
    'fr': 'fr/conseillers'
  };
  
  const localizedPath = translations[language] || 'asesores';
  const baseUrl = `/${localizedPath}/${slug}`;
  
  // Agregar referencia si existe trackingString
  if (trackingString) {
    const separator = trackingString.startsWith('?') ? '' : '?';
    return `${baseUrl}${separator}${trackingString}`;
  }
  
  return baseUrl;
}

// Procesar propiedades usando datos display-ready de la edge function
const processedProperties = agentProperties.map(property => ({
  // Usar datos ya procesados por la edge function
  id: property.id,
  title_display: property.title_display || property.name || 'Propiedad',
  price_display: property.price_display || 'Consultar',
  operation_display: property.operation_display || 'Venta',
  category_display: property.category_display || property.property_categories?.name || 'Propiedad',
  location_display: property.location_display || property.sectors?.name || property.cities?.name || '',
  url: property.url || '#',
  
  // Procesar imagen con upgrade a large
  main_image_url: getCleanImageUrl(property.main_image_url),
  
  // Caracter√≠sticas b√°sicas
  bedrooms: property.bedrooms || 0,
  bathrooms: property.bathrooms || 0,
  built_area: property.built_area || 0,
  parking_spots: property.parking_spots || 0,
  nivel: property.nivel || null,
  
  // Datos adicionales de pricing si existen
  pricing_data: property.pricing_data || null,
  category_data: property.category_data || null
}));

// Calculate correct counts
const totalProperties = data.agent?.properties_count || agentProperties.length;
const shownProperties = agentProperties.length;

console.log('üè† AgentPropertiesCarousel ACTUALIZADO (Nueva estructura):', {
  language: currentLanguage,
  hasAgentProperties: showCarousel,
  shouldShowCarousel: shouldShowCarousel,
  totalProperties: totalProperties,
  shownProperties: shownProperties,
  agentId: agent?.id,
  agentName: agent?.first_name && agent?.last_name ? `${agent.first_name} ${agent.last_name}` : 'Asesor',
  agentSource: data.agent?.source,
  trackingString: data.trackingString,
  firstPropertyData: processedProperties[0] ? {
    title: processedProperties[0].title_display,
    price: processedProperties[0].price_display,
    operation: processedProperties[0].operation_display,
    url: processedProperties[0].url,
    image: processedProperties[0].main_image_url
  } : null,
  dataSource: 'enhanced_handler_v2',
  newStructureUsed: {
    agentMain: !!data.agent?.main,
    agentProperties: !!data.agent?.properties,
    shouldShowProperties: data.agent?.should_show_properties,
    cocaptorsCount: data.agent?.cocaptors_count || 0
  }
});
---

<!-- Agent Properties Carousel -->
{showCarousel && (
  <div class="space-y-6">
    <!-- Header con informaci√≥n del asesor -->
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-2xl font-bold text-gray-900 border-b-2 border-[#f04e00] pb-2 inline-block">
          <a 
            href={getAdvisorUrl(agent?.slug, currentLanguage, data.trackingString)}
            class="hover:text-[#f04e00] transition-colors duration-300"
          >
            {t.morePropertiesOf}&nbsp;{(agent?.first_name && agent?.last_name) ? `${agent.first_name} ${agent.last_name}` : agent?.name || t.thisAdvisor}
          </a>
        </h2>
        <p class="text-sm text-gray-600 mt-2">
          <span>{shownProperties}</span>{' '}
          <span>{shownProperties === 1 ? t.propertyAvailable : t.propertiesShown}</span>
          {data.agent?.source && (
            <span class="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
              {data.agent.source === 'referral' ? 'Agente Referido' : 
               data.agent.source === 'default' ? 'Agente por Defecto' : 
               data.agent.source === 'original' ? 'Agente Original' : 'Agente'}
            </span>
          )}
        </p>
      </div>
      
      <!-- Controles del carrusel -->
      <div class="flex items-center gap-2">
        <button 
          id="carousel-prev"
          class="w-10 h-10 bg-white border border-gray-300 rounded-full flex items-center justify-center hover:bg-gray-50 hover:border-[#f04e00] transition-all duration-200 disabled:opacity-40 disabled:cursor-not-allowed"
          onclick="slideCarousel('prev')"
        >
          <i class="fas fa-chevron-left text-gray-600"></i>
        </button>
        <button 
          id="carousel-next"
          class="w-10 h-10 bg-white border border-gray-300 rounded-full flex items-center justify-center hover:bg-gray-50 hover:border-[#f04e00] transition-all duration-200 disabled:opacity-40 disabled:cursor-not-allowed"
          onclick="slideCarousel('next')"
        >
          <i class="fas fa-chevron-right text-gray-600"></i>
        </button>
      </div>
    </div>

    <!-- Carrusel -->
    <div class="relative overflow-hidden" id="carousel-wrapper">
      <div 
        id="carousel-container" 
        class="flex transition-transform duration-300 ease-out gap-4"
        style="transform: translateX(0px)"
      >
        {processedProperties.map((property, index) => (
          <div class="flex-shrink-0 w-72 carousel-item">
            <a 
              href={property.url.startsWith('/') ? property.url : `/${property.url}`}
              class="group block bg-white rounded-2xl shadow-sm hover:shadow-lg transition-all duration-500 overflow-hidden border border-gray-100 hover:border-gray-200 relative"
            >
              <!-- Imagen m√°s compacta -->
              <div class="relative h-40 overflow-hidden">
                <img 
                  src={property.main_image_url}
                  alt={property.title_display}
                  class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                  loading="lazy"
                  onerror="this.src='/images/placeholder-property.jpg'"
                />
                
                <!-- Overlay sutil -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>
              
              <!-- Badge ribbon de operaci√≥n (derecha) - usando datos display -->
              <div class="ribbon">
                {property.operation_display}
              </div>
              
              <!-- Badge ribbon del tipo de propiedad (izquierda) - usando datos display -->
              <div class="ribbon-left">
                {property.category_display}
              </div>
              
              <!-- Contenido m√°s compacto -->
              <div class="p-4">
                <!-- Ubicaci√≥n con precio a la derecha - usando datos display -->
                <div class="flex items-center justify-between mb-2">
                  <div class="flex items-center gap-1">
                    <i class="fas fa-map-marker-alt text-gray-400 text-xs"></i>
                    <p class="text-xs text-gray-500 font-medium">
                      {property.location_display || 'Santo Domingo'}
                    </p>
                  </div>
                  <span class="text-sm font-bold text-[#f04e00] group-hover:text-[#e03400] transition-colors">
                    {property.price_display}
                  </span>
                </div>
                
                <!-- T√≠tulo m√°s peque√±o - usando datos display -->
                <h3 class="text-sm font-semibold text-gray-900 mb-3 group-hover:text-[#f04e00] transition-colors line-clamp-2 leading-tight">
                  {property.title_display}
                </h3>
                
                <!-- Caracter√≠sticas con iconos consistentes y flecha alineada -->
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-3 text-xs text-gray-600">
                    {(property.bedrooms && property.bedrooms > 0) && (
                      <div class="flex items-center gap-1">
                        <i class="fas fa-bed text-gray-500"></i>
                        <span class="font-medium text-gray-700">{property.bedrooms}</span>
                      </div>
                    )}
                    
                    {(property.bathrooms && property.bathrooms > 0) && (
                      <div class="flex items-center gap-1">
                        <i class="fas fa-bath text-gray-500"></i>
                        <span class="font-medium text-gray-700">{property.bathrooms}</span>
                      </div>
                    )}
                    
                    {(property.built_area && property.built_area > 0) && (
                      <div class="flex items-center gap-1">
                        <i class="fas fa-th-large text-gray-500"></i>
                        <span class="font-medium text-gray-700">{property.built_area}m¬≤</span>
                      </div>
                    )}
                    
                    {(property.parking_spots && property.parking_spots > 0) && (
                      <div class="flex items-center gap-1">
                        <i class="fas fa-car text-gray-500"></i>
                        <span class="font-medium text-gray-700">{property.parking_spots}</span>
                      </div>
                    )}
                  </div>
                  
                  <!-- Flecha alineada con los iconos -->
                  <i class="fas fa-arrow-right text-gray-400 group-hover:text-[#f04e00] transition-colors text-xs"></i>
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>
    </div>

    <!-- Indicadores de posici√≥n -->
    <div class="flex items-center justify-center gap-2 mt-4">
      <div class="flex gap-1" id="carousel-dots">
        <!-- Los dots se generar√°n din√°micamente con JavaScript -->
      </div>
    </div>

    <!-- Ver todas las propiedades del asesor -->
    {totalProperties > shownProperties && (
      <div class="text-center pt-4 border-t border-gray-200">
        <a 
          href={getAdvisorUrl(agent?.slug, currentLanguage, data.trackingString)}
          class="inline-flex items-center gap-2 text-[#f04e00] hover:text-[#d94400] font-medium text-sm transition-colors"
        >
          <span>{t.viewAllProperties} {totalProperties} {t.propertiesOf} {(agent?.first_name && agent?.last_name) ? `${agent.first_name} ${agent.last_name}` : agent?.name || t.thisAdvisorLower}</span>
          <i class="fas fa-arrow-right text-xs"></i>
        </a>
      </div>
    )}
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .ribbon {
    position: absolute;
    top: 0;
    right: 0;
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    color: white;
    padding: 4px 12px 4px 8px;
    font-size: 0.75rem;
    font-weight: 500;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-bottom-left-radius: 2px;
    z-index: 10;
  }

  .ribbon-left {
    position: absolute;
    top: 0;
    left: 0;
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    color: white;
    padding: 4px 8px 4px 12px;
    font-size: 0.75rem;
    font-weight: 500;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-bottom-right-radius: 2px;
    z-index: 10;
  }

  /* Estilos del carrusel */
  #carousel-container {
    scroll-behavior: smooth;
  }

  .carousel-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #d1d5db;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-dot.active {
    background: #f04e00;
    transform: scale(1.2);
  }

  .carousel-dot:hover {
    background: #f04e00;
  }

  /* Estilos para carrusel expandido por el layout */
  .carousel-full-width #carousel-container {
    gap: 1.5rem;
  }

  .carousel-full-width .carousel-item {
    width: 20rem;
  }

  /* Responsive adjustments para carrusel expandido */
  @media (min-width: 1536px) {
    .carousel-full-width .carousel-item {
      width: 22rem;
    }
  }
</style>

<script>
  // Estado del carrusel
  let currentSlide = 0;
  let maxSlides = 0;
  let itemWidth = 300; // Base width
  let visibleItems = 1;
  let isLayoutControlled = false;

  // Funci√≥n para detectar si el layout est√° controlando la expansi√≥n
  function checkLayoutControl() {
    const carouselSection = document.getElementById('agent-properties-carousel-section');
    isLayoutControlled = carouselSection && carouselSection.hasAttribute('data-layout-controlled');
    
    if (isLayoutControlled) {
      console.log('üé† Carrusel bajo control del layout - sistema de componente desactivado');
      
      // Ajustar el ancho de items si est√° expandido por el layout
      const isExpanded = carouselSection.classList.contains('carousel-full-width');
      if (isExpanded) {
        itemWidth = 320; // Ajustar para items m√°s anchos
        console.log('üé† Carrusel expandido por layout - ajustando itemWidth a', itemWidth);
      } else {
        itemWidth = 288; // w-72 = 288px
      }
      
      return true;
    }
    
    return false;
  }

  // Funci√≥n para calcular cu√°ntos elementos son visibles
  function calculateVisibleItems() {
    const container = document.getElementById('carousel-container');
    if (!container) return 1;
    
    const containerWidth = container.parentElement.offsetWidth;
    
    // Usar el itemWidth actualizado basado en el estado del layout
    const effectiveItemWidth = itemWidth + 16; // Incluir gap
    visibleItems = Math.floor(containerWidth / effectiveItemWidth);
    
    console.log('üé† Calculando elementos visibles (NUEVA ESTRUCTURA):', {
      containerWidth,
      itemWidth,
      effectiveItemWidth,
      visibleItems: Math.max(1, visibleItems),
      isLayoutControlled,
      dataStructure: 'enhanced_handler_v2'
    });
    
    return Math.max(1, visibleItems);
  }

  // Funci√≥n para actualizar el estado de los botones
  function updateButtons() {
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    
    if (prevBtn) prevBtn.disabled = currentSlide === 0;
    if (nextBtn) nextBtn.disabled = currentSlide >= maxSlides - 1;
  }

  // Funci√≥n para crear los dots
  function createDots() {
    const dotsContainer = document.getElementById('carousel-dots');
    if (!dotsContainer) return;
    
    dotsContainer.innerHTML = '';
    
    for (let i = 0; i < maxSlides; i++) {
      const dot = document.createElement('div');
      dot.className = `carousel-dot ${i === currentSlide ? 'active' : ''}`;
      dot.onclick = () => goToSlide(i);
      dotsContainer.appendChild(dot);
    }
  }

  // Funci√≥n para actualizar los dots
  function updateDots() {
    const dots = document.querySelectorAll('.carousel-dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentSlide);
    });
  }

  // Funci√≥n para ir a una diapositiva espec√≠fica
  function goToSlide(slideIndex) {
    currentSlide = Math.max(0, Math.min(slideIndex, maxSlides - 1));
    
    const container = document.getElementById('carousel-container');
    if (container) {
      const gap = 16; // gap-4 = 16px
      const translateX = -(currentSlide * (itemWidth + gap));
      container.style.transform = `translateX(${translateX}px)`;
    }
    
    updateButtons();
    updateDots();
  }

  // Funci√≥n principal del carrusel
  window.slideCarousel = function(direction) {
    if (direction === 'next' && currentSlide < maxSlides - 1) {
      goToSlide(currentSlide + 1);
    } else if (direction === 'prev' && currentSlide > 0) {
      goToSlide(currentSlide - 1);
    }
  };

  // Funci√≥n para inicializar el carrusel
  function initCarousel() {
    const container = document.getElementById('carousel-container');
    if (!container) return;
    
    const items = container.children.length;
    if (items === 0) return;
    
    // Verificar control del layout ANTES de calcular
    checkLayoutControl();
    
    calculateVisibleItems();
    maxSlides = Math.max(1, items - visibleItems + 1);
    
    // Solo mostrar controles si hay m√°s elementos que los visibles
    const showControls = items > visibleItems;
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    const dotsContainer = document.getElementById('carousel-dots');
    
    if (prevBtn) prevBtn.style.display = showControls ? 'flex' : 'none';
    if (nextBtn) nextBtn.style.display = showControls ? 'flex' : 'none';
    if (dotsContainer) dotsContainer.style.display = showControls ? 'flex' : 'none';
    
    if (showControls) {
      createDots();
      updateButtons();
    }
    
    console.log('üé† Carrusel inicializado (NUEVA ESTRUCTURA):', {
      totalItems: items,
      visibleItems: visibleItems,
      maxSlides: maxSlides,
      showControls: showControls,
      isLayoutControlled: isLayoutControlled,
      itemWidth: itemWidth,
      dataSource: 'enhanced_handler_v2',
      shouldShowCarousel: true
    });
  }

  // Funci√≥n para manejar el resize
  function handleResize() {
    const oldVisibleItems = visibleItems;
    const oldLayoutControlled = isLayoutControlled;
    
    checkLayoutControl();
    calculateVisibleItems();
    
    if (oldVisibleItems !== visibleItems || oldLayoutControlled !== isLayoutControlled) {
      initCarousel();
      goToSlide(0); // Resetear a la primera diapositiva
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', function() {
    // Esperar un poco para que el layout se estabilice
    setTimeout(() => {
      initCarousel();
    }, 250);
  });

  // Manejar resize de ventana
  window.addEventListener('resize', handleResize);

  // Observer para detectar cambios en el atributo data-layout-controlled
  if (window.MutationObserver) {
    const carouselSection = document.getElementById('agent-properties-carousel-section');
    if (carouselSection) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && 
              (mutation.attributeName === 'data-layout-controlled' || 
               mutation.attributeName === 'class')) {
            console.log('üé† Detectado cambio en control del layout - reinicializando');
            setTimeout(() => {
              initCarousel();
            }, 100);
          }
        });
      });
      
      observer.observe(carouselSection, {
        attributes: true,
        attributeFilter: ['data-layout-controlled', 'class']
      });

      // ESCUCHAR evento personalizado de cambio de layout
      carouselSection.addEventListener('carousel-layout-changed', (event) => {
        console.log('üé† Evento de cambio de layout recibido:', event.detail);
        
        // Reinicializar completamente el carrusel
        setTimeout(() => {
          // Resetear estado
          currentSlide = 0;
          
          // Forzar rec√°lculo de todo
          checkLayoutControl();
          initCarousel();
          
          // Ir a la primera slide para asegurar posici√≥n correcta
          goToSlide(0);
          
          console.log('üé† Carrusel reinicializado despu√©s del cambio de layout');
        }, 200);
      });
    }
  }

  // Soporte para navegaci√≥n con teclado
  document.addEventListener('keydown', function(e) {
    if (e.target.closest('#carousel-container')) {
      if (e.key === 'ArrowLeft') {
        e.preventDefault();
        slideCarousel('prev');
      } else if (e.key === 'ArrowRight') {
        e.preventDefault();
        slideCarousel('next');
      }
    }
  });
</script>