---
// src/components/property/PropertyLocation.astro - GOOGLE MAPS VERSION (Reemplaza Mapbox)
export interface Props {
  data: any;
  language?: 'es' | 'en' | 'fr';
}

const { data, language = 'es' } = Astro.props;

const property = data.property || {};
const locationData = data.location || {};
const locationContext = data.location_context || null;

// Traducciones para el componente de ubicaci√≥n - COMPLETAS
const translations = {
  es: {
    propertyLocation: 'Ubicaci√≥n de la Propiedad',
    exact: '* Exacta',
    approximate: '* Aproximada',
    fromSector: '* Del Sector',
    nearbyPlaces: 'Lugares destacados cerca de tu',
    nearbyPlacesGeneric: 'Lugares cercanos',
    servicesNearby: 'Resumen de Servicios',
    theArea: 'la Zona',
    showMore: 'Ver todos',
    showLess: 'Ver menos',
    locationPreposition: 'en',
    placesLabel: 'lugares',
    propertyType: {
      apartamento: 'apartamento',
      villa: 'villa',
      casa: 'casa',
      penthouse: 'penthouse',
      estudio: 'estudio',
      duplex: 'd√∫plex',
      default: 'propiedad'
    },
    generalLocation: 'Ubicaci√≥n General',
    addressNotSpecified: 'Direcci√≥n no especificada',
    exactLocation: 'Ubicaci√≥n exacta',
    approximateLocation: 'Ubicaci√≥n aproximada',
    generalArea: 'Zona general',
    errorLoadingMap: 'Error cargando mapa',
    viewOnGoogleMaps: 'Ver en Google Maps',
    mapLoadingError: 'Error al cargar el mapa',
    walkingDistance: 'A pie',
    totalServices: 'servicios disponibles',
    mapLoading: 'Cargando mapa...',
    
    // Categor√≠as de lugares (singular y plural) - AMPLIADAS
    banco: 'Banco',
    bancos: 'Bancos',
    centro_comercial: 'Centro Comercial',
    centros_comerciales: 'Centros Comerciales',
    cine: 'Cine',
    cines: 'Cines',
    colegio: 'Escuela',
    colegios: 'Escuelas',
    farmacia: 'Farmacia',
    farmacias: 'Farmacias',
    gasolinera: 'Gasolinera',
    gasolineras: 'Gasolineras',
    gimnasio: 'Gimnasio',
    gimnasios: 'Gimnasios',
    hospital: 'Hospital',
    hospitales: 'Hospitales',
    restaurante: 'Restaurante',
    restaurantes: 'Restaurantes',
    supermercado: 'Supermercado',
    supermercados: 'Supermercados',
    bar: 'Bar',
    bares: 'Bares',
    hotel: 'Hotel',
    hoteles: 'Hoteles',
    policia: 'Estaci√≥n de Polic√≠a',
    policias: 'Estaciones de Polic√≠a',
    veterinaria: 'Veterinaria',
    veterinarias: 'Veterinarias',
    instituto: 'Instituto',
    institutos: 'Institutos',
    bomberos: 'Estaci√≥n de Bomberos',
    estacion_bomberos: 'Estaci√≥n de Bomberos',
    parque: 'Parque',
    parques: 'Parques',
    iglesia: 'Iglesia',
    iglesias: 'Iglesias',
    biblioteca: 'Biblioteca',
    bibliotecas: 'Bibliotecas'
  },
  en: {
    propertyLocation: 'Property Location',
    exact: '* Exact',
    approximate: '* Approximate',
    fromSector: '* From Sector',
    nearbyPlaces: 'Featured places near your',
    nearbyPlacesGeneric: 'Nearby places',
    servicesNearby: 'Services Summary',
    theArea: 'the Area',
    showMore: 'View all',
    showLess: 'View less',
    locationPreposition: 'in',
    placesLabel: 'places',
    propertyType: {
      apartamento: 'apartment',
      villa: 'villa',
      casa: 'house',
      penthouse: 'penthouse',
      estudio: 'studio',
      duplex: 'duplex',
      default: 'property'
    },
    generalLocation: 'General Location',
    addressNotSpecified: 'Address not specified',
    exactLocation: 'Exact location',
    approximateLocation: 'Approximate location',
    generalArea: 'General area',
    errorLoadingMap: 'Error loading map',
    viewOnGoogleMaps: 'View on Google Maps',
    mapLoadingError: 'Map loading error',
    walkingDistance: 'Walking',
    totalServices: 'services available',
    mapLoading: 'Loading map...',
    
    // Categor√≠as de lugares (singular y plural) - AMPLIADAS
    banco: 'Bank',
    bancos: 'Banks',
    centro_comercial: 'Shopping Center',
    centros_comerciales: 'Shopping Centers',
    cine: 'Cinema',
    cines: 'Cinemas',
    colegio: 'School',
    colegios: 'Schools',
    farmacia: 'Pharmacy',
    farmacias: 'Pharmacies',
    gasolinera: 'Gas Station',
    gasolineras: 'Gas Stations',
    gimnasio: 'Gym',
    gimnasios: 'Gyms',
    hospital: 'Hospital',
    hospitales: 'Hospitals',
    restaurante: 'Restaurant',
    restaurantes: 'Restaurants',
    supermercado: 'Supermarket',
    supermercados: 'Supermarkets',
    bar: 'Bar',
    bares: 'Bars',
    hotel: 'Hotel',
    hoteles: 'Hotels',
    policia: 'Police Station',
    policias: 'Police Stations',
    veterinaria: 'Veterinary',
    veterinarias: 'Veterinaries',
    instituto: 'Institute',
    institutos: 'Institutes',
    bomberos: 'Fire Station',
    estacion_bomberos: 'Fire Station',
    parque: 'Park',
    parques: 'Parks',
    iglesia: 'Church',
    iglesias: 'Churches',
    biblioteca: 'Library',
    bibliotecas: 'Libraries'
  },
  fr: {
    propertyLocation: 'Emplacement de la Propri√©t√©',
    exact: '* Exact',
    approximate: '* Approximatif',
    fromSector: '* Du Secteur',
    nearbyPlaces: 'Lieux vedettes pr√®s de votre',
    nearbyPlacesGeneric: 'Lieux √† proximit√©',
    servicesNearby: 'R√©sum√© des Services',
    theArea: 'la Zone',
    showMore: 'Voir tout',
    showLess: 'Voir moins',
    locationPreposition: '√†',
    placesLabel: 'lieux',
    propertyType: {
      apartamento: 'appartement',
      villa: 'villa',
      casa: 'maison',
      penthouse: 'penthouse',
      estudio: 'studio',
      duplex: 'duplex',
      default: 'propri√©t√©'
    },
    generalLocation: 'Emplacement G√©n√©ral',
    addressNotSpecified: 'Adresse non sp√©cifi√©e',
    exactLocation: 'Emplacement exact',
    approximateLocation: 'Emplacement approximatif',
    generalArea: 'Zone g√©n√©rale',
    errorLoadingMap: 'Erreur de chargement de la carte',
    viewOnGoogleMaps: 'Voir sur Google Maps',
    mapLoadingError: 'Erreur de chargement de la carte',
    walkingDistance: '√Ä pied',
    totalServices: 'services disponibles',
    mapLoading: 'Chargement de la carte...',
    
    // Categor√≠as de lugares (singular y plural) - AMPLIADAS
    banco: 'Banque',
    bancos: 'Banques',
    centro_comercial: 'Centre Commercial',
    centros_comerciales: 'Centres Commerciaux',
    cine: 'Cin√©ma',
    cines: 'Cin√©mas',
    colegio: '√âcole',
    colegios: '√âcoles',
    farmacia: 'Pharmacie',
    farmacias: 'Pharmacies',
    gasolinera: 'Station-service',
    gasolineras: 'Stations-service',
    gimnasio: 'Gym',
    gimnasios: 'Gyms',
    hospital: 'H√¥pital',
    hospitales: 'H√¥pitaux',
    restaurante: 'Restaurant',
    restaurantes: 'Restaurants',
    supermercado: 'Supermarch√©',
    supermercados: 'Supermarch√©s',
    bar: 'Bar',
    bares: 'Bars',
    hotel: 'H√¥tel',
    hoteles: 'H√¥tels',
    policia: 'Poste de Police',
    policias: 'Postes de Police',
    veterinaria: 'V√©t√©rinaire',
    veterinarias: 'V√©t√©rinaires',
    instituto: 'Institut',
    institutos: 'Instituts',
    bomberos: 'Caserne de Pompiers',
    estacion_bomberos: 'Caserne de Pompiers',
    parque: 'Parc',
    parques: 'Parcs',
    iglesia: '√âglise',
    iglesias: '√âglises',
    biblioteca: 'Biblioth√®que',
    bibliotecas: 'Biblioth√®ques'
  }
};

const t = translations[language];

// Funci√≥n para obtener el nombre correcto de la categor√≠a
function getCategoryDisplayName(categoria, count) {
  const baseKey = categoria.toLowerCase();
  
  if (count === 1) {
    return t[baseKey] || categoria;
  } else {
    // Buscar la forma plural
    const pluralKey = baseKey + 's';
    if (t[pluralKey]) {
      return t[pluralKey];
    }
    
    // Plurales especiales
    const specialPlurals = {
      'centro_comercial': t['centros_comerciales'] || 'Centros Comerciales',
      'policia': t['policias'] || 'Estaciones de Polic√≠a',
      'veterinaria': t['veterinarias'] || 'Veterinarias',
      'instituto': t['institutos'] || 'Institutos',
      'bomberos': t['bomberos'] || 'Estaciones de Bomberos',
      'estacion_bomberos': t['bomberos'] || 'Estaciones de Bomberos'
    };
    
    return specialPlurals[baseKey] || (t[baseKey] || categoria) + 's';
  }
}

// L√ìGICA INTELIGENTE DE COORDENADAS (mantenida igual)
function getDisplayCoordinates() {
  console.log('üó∫Ô∏è === DETERMINANDO COORDENADAS PARA MOSTRAR ===');
  console.log('üìç Location data recibido:', locationData);
  
  if (locationData && locationData.coordinates) {
    console.log('‚úÖ Usando coordenadas del provider:', locationData.coordinates);
    return {
      coordinates: locationData.coordinates,
      source: locationData.coordinatesSource || 'provider',
      showExactLocation: locationData.showExactLocation || false,
      hasExactCoordinates: locationData.hasExactCoordinates || false,
      zoom: locationData.mapConfig?.zoom || 15,
      showMarker: locationData.mapConfig?.showMarker !== false
    };
  }
  
  console.log('‚ö†Ô∏è Buscando coordenadas en ubicaciones alternativas...');
  
  if (data.location?.coordinates) {
    console.log('‚úÖ Encontradas en data.location:', data.location.coordinates);
    return {
      coordinates: data.location.coordinates,
      source: data.location.coordinatesSource || 'direct',
      showExactLocation: data.location.showExactLocation || false,
      hasExactCoordinates: data.location.hasExactCoordinates || false,
      zoom: data.location.mapConfig?.zoom || 15,
      showMarker: true
    };
  }
  
  console.log('‚ö†Ô∏è Sin coordenadas reales v√°lidas');
  return {
    coordinates: null,
    source: 'none',
    showExactLocation: false,
    hasExactCoordinates: false,
    zoom: 6,
    showMarker: false
  };
}

function getPrivacyAdjustedCoordinates(coords, showExact, hasExact) {
  if (!coords) {
    console.log('‚ö†Ô∏è No hay coordenadas para ajustar');
    return null;
  }
  
  if (typeof coords.lat !== 'number' || typeof coords.lng !== 'number') {
    console.warn('‚ö†Ô∏è Coordenadas inv√°lidas, no hay fallback hardcodeado:', coords);
    return null;
  }
  
  if (!hasExact || showExact) {
    console.log('üéØ Usando coordenadas sin modificar');
    return coords;
  }
  
  const randomAngle = Math.random() * 2 * Math.PI;
  const randomDistance = 0.002;
  
  const adjustedCoords = {
    lat: coords.lat + (Math.cos(randomAngle) * randomDistance),
    lng: coords.lng + (Math.sin(randomAngle) * randomDistance)
  };
  
  console.log('üîí Aplicando desplazamiento de privacidad:', {
    original: coords,
    adjusted: adjustedCoords,
    displacement: '~200m'
  });
  
  return adjustedCoords;
}

// Funci√≥n para obtener el icono seg√∫n la categor√≠a
function getCategoryIcon(categoria) {
  switch (categoria) {
    case 'supermercado':
      return 'fas fa-shopping-cart';
    case 'hospital':
      return 'fas fa-hospital';
    case 'banco':
      return 'fas fa-university';
    case 'colegio':
    case 'school':
      return 'fas fa-graduation-cap';
    case 'centro_comercial':
    case 'shopping':
      return 'fas fa-shopping-bag';
    case 'farmacia':
      return 'fas fa-pills';
    case 'gasolinera':
      return 'fas fa-gas-pump';
    case 'gimnasio':
      return 'fas fa-dumbbell';
    case 'cine':
      return 'fas fa-film';
    case 'restaurante':
      return 'fas fa-utensils';
    case 'bar':
      return 'fas fa-wine-glass';
    case 'hotel':
      return 'fas fa-bed';
    case 'policia':
      return 'fas fa-shield-alt';
    case 'veterinaria':
      return 'fas fa-paw';
    case 'instituto':
      return 'fas fa-school';
    case 'bomberos':
    case 'estacion_bomberos':
      return 'fas fa-fire-extinguisher';
    case 'parque':
      return 'fas fa-tree';
    case 'iglesia':
      return 'fas fa-church';
    case 'biblioteca':
      return 'fas fa-book';
    default:
      return 'fas fa-map-marker-alt';
  }
}

// Funci√≥n para obtener el color seg√∫n la categor√≠a
function getCategoryColor(categoria) {
  switch (categoria) {
    case 'supermercado':
      return '#f59e0b';
    case 'hospital':
      return '#dc2626';
    case 'banco':
      return '#3b82f6';
    case 'colegio':
    case 'school':
      return '#10b981';
    case 'centro_comercial':
    case 'shopping':
      return '#f04e00';
    case 'farmacia':
      return '#059669';
    case 'gasolinera':
      return '#f97316';
    case 'gimnasio':
      return '#8b5cf6';
    case 'cine':
      return '#ec4899';
    case 'restaurante':
      return '#ef4444';
    case 'bar':
      return '#a855f7';
    case 'hotel':
      return '#06b6d4';
    case 'policia':
      return '#1e40af';
    case 'veterinaria':
      return '#16a34a';
    case 'instituto':
      return '#0ea5e9';
    case 'bomberos':
    case 'estacion_bomberos':
      return '#dc2626';
    case 'parque':
      return '#22c55e';
    case 'iglesia':
      return '#7c3aed';
    case 'biblioteca':
      return '#0891b2';
    default:
      return '#6b7280';
  }
}

// Funci√≥n para obtener el tipo de propiedad legible
function getPropertyType() {
  const propertyType = property?.tipo_propiedad || property?.type || property?.property_type;
  if (!propertyType) return t.propertyType.default;
  
  const normalizedType = propertyType.toLowerCase();
  return t.propertyType[normalizedType] || t.propertyType.default;
}

// Funci√≥n para determinar si hay distancias reales calculadas
function hasRealDistances(lugares) {
  return lugares && lugares.some(lugar => 
    lugar.distancia_display && 
    lugar.distancia_display !== 'N/A' && 
    lugar.distancia_display.trim() !== ''
  );
}

const mapConfig = getDisplayCoordinates();
const displayCoordinates = getPrivacyAdjustedCoordinates(
  mapConfig.coordinates,
  mapConfig.showExactLocation,
  mapConfig.hasExactCoordinates
);

// Determinar si usar t√≠tulo espec√≠fico o gen√©rico
const lugares = locationContext?.nearby_places?.lugares_destacados || [];
const showSpecificTitle = hasRealDistances(lugares);

console.log('üó∫Ô∏è PropertyLocation loaded (GOOGLE MAPS):', {
  language: language,
  coordinates: displayCoordinates,
  zoom: mapConfig.zoom,
  source: mapConfig.source,
  showMarker: mapConfig.showMarker,
  privacyApplied: mapConfig.hasExactCoordinates && !mapConfig.showExactLocation,
  hasLocationContext: !!locationContext,
  nearbyPlacesCount: lugares.length,
  hasRealDistances: showSpecificTitle
});

if (!displayCoordinates || typeof displayCoordinates.lat !== 'number' || typeof displayCoordinates.lng !== 'number') {
  console.error('‚ùå Error: Coordenadas finales inv√°lidas!', displayCoordinates);
}
---

<!-- Mapa y Lugares Cercanos -->
<div class="space-y-8">
  <h2 class="text-2xl font-bold text-gray-900 border-b-2 border-[#f04e00] pb-2 inline-block flex items-center gap-2">
    {t.propertyLocation}
    {mapConfig.hasExactCoordinates ? (
      mapConfig.showExactLocation ? (
        <span class="text-sm text-[#f04e00] bg-[#f04e00]/10 px-2 py-1 rounded font-normal">
          {t.exact}
        </span>
      ) : (
        <span class="text-sm text-[#f04e00] bg-[#f04e00]/10 px-2 py-1 rounded font-normal">
          {t.approximate}
        </span>
      )
    ) : (
      <span class="text-sm text-[#f04e00] bg-[#f04e00]/10 px-2 py-1 rounded font-normal">
        {t.fromSector}
      </span>
    )}
  </h2>
  
  <!-- Google Maps Container - ESTE ES EL ELEMENTO QUE BUSCA EL SCRIPT DEL LAYOUT -->
  <div class="bg-gray-50 rounded-xl overflow-hidden border border-gray-200 shadow-sm">
    <div 
      id="google-map" 
      class="w-full h-64"
    >
      <!-- Fallback mientras carga Google Maps -->
      <div class="w-full h-full flex items-center justify-center bg-gray-100">
        <div class="text-center">
          <i class="fas fa-map-marker-alt text-[#f04e00] text-4xl mb-2"></i>
          <p class="text-gray-600">{t.mapLoading}</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- NUEVO ORDEN: Primero lugares destacados, luego resumen de servicios -->
  {locationContext && locationContext.nearby_places && (
    <div class="space-y-8">
      
      <!-- 1. LUGARES DESTACADOS -->
      {locationContext.nearby_places.lugares_destacados && locationContext.nearby_places.lugares_destacados.length > 0 && (
        <div class="space-y-6">
          <div class="flex items-center justify-between">
            <h3 class="text-xl font-semibold text-gray-900 flex items-center gap-2">
              <i class="fas fa-star text-[#f04e00] text-lg"></i>
              {showSpecificTitle ? (
                `${t.nearbyPlaces} ${getPropertyType()} ${t.locationPreposition} ${locationContext.nearby_places.ubicacion || locationData.sector || locationData.city || t.theArea}`
              ) : (
                t.nearbyPlacesGeneric
              )}
            </h3>
            <span class="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
              {locationContext.nearby_places.lugares_destacados.length} {t.placesLabel}
            </span>
          </div>
          
          <!-- Grid - MOSTRAR TODOS los lugares destacados, sin l√≠mite -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="places-grid">
            {locationContext.nearby_places.lugares_destacados.map((place, index) => (
              <div class="place-card group bg-white border border-gray-200 rounded-lg p-4 hover:border-[#f04e00]/30 hover:shadow-sm transition-all duration-200">
                <div class="flex items-start gap-3">
                  <!-- Icono -->
                  <div class="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0" 
                       style={`background: linear-gradient(135deg, ${getCategoryColor(place.categoria)}15, ${getCategoryColor(place.categoria)}25)`}>
                    <i class={`${getCategoryIcon(place.categoria)} text-base`} style={`color: ${getCategoryColor(place.categoria)}`}></i>
                  </div>
                  
                  <div class="flex-1 min-w-0">
                    <!-- L√≠nea 1: Nombre, categor√≠a y badge destacado -->
                    <div class="flex items-center justify-between gap-2 mb-2">
                      <div class="flex items-center gap-2 min-w-0 flex-1">
                        <h4 class="font-semibold text-gray-900 text-sm leading-tight group-hover:text-[#f04e00] transition-colors truncate">
                          {place.nombre}
                        </h4>
                        {place.es_destacado && (
                          <div class="w-2 h-2 bg-[#f04e00] rounded-full flex-shrink-0"></div>
                        )}
                      </div>
                    </div>
                    
                    <!-- L√≠nea 2: Direcci√≥n y distancia -->
                    <div class="flex items-center justify-between gap-2">
                      <p class="text-sm text-gray-600 truncate flex-1">{place.direccion}</p>
                      {(place.distancia_display && place.distancia_display !== 'N/A') || place.distancia_metros !== undefined ? (
                        <span class="text-xs text-[#f04e00] font-medium flex items-center gap-1 flex-shrink-0">
                          <i class="fas fa-walking text-xs"></i>
                          {place.distancia_display && place.distancia_display !== 'N/A' 
                            ? place.distancia_display 
                            : place.distancia_metros 
                              ? (place.distancia_metros < 1000 ? `${place.distancia_metros}m` : `${(place.distancia_metros/1000).toFixed(1)}km`)
                              : (language === 'en' ? '0.3 mi' : language === 'fr' ? '0,5 km' : '500m')
                          }
                        </span>
                      ) : (
                        <span class="text-xs text-[#f04e00] font-medium flex items-center gap-1 flex-shrink-0">
                          <i class="fas fa-walking text-xs"></i>
                          {language === 'en' ? '0.3 mi' : language === 'fr' ? '0,5 km' : '500m'}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- 2. RESUMEN DE SERVICIOS -->
      {locationContext.nearby_places.conteos_por_categoria && Object.keys(locationContext.nearby_places.conteos_por_categoria).length > 0 && (
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-800 flex items-center gap-2">
              <i class="fas fa-chart-pie text-gray-600"></i>
              {t.servicesNearby}
            </h3>
            <span class="text-sm text-gray-500">
              {Object.values(locationContext.nearby_places.conteos_por_categoria).reduce((sum, count) => sum + count, 0)} {t.totalServices}
            </span>
          </div>
          
          <!-- Grid inicial - m√°ximo 10 servicios para mostrar m√°s variedad -->
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3" id="services-grid">
            {Object.entries(locationContext.nearby_places.conteos_por_categoria)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 10)
              .map(([categoria, count]) => (
              <div class="service-card flex items-center gap-3 p-3 bg-gray-50 rounded-lg border border-gray-100 hover:bg-gray-100 hover:border-gray-200 transition-colors">
                <div class="w-7 h-7 rounded-md flex items-center justify-center flex-shrink-0 bg-gray-200">
                  <i class={`${getCategoryIcon(categoria)} text-xs text-gray-600`}></i>
                </div>
                
                <div class="flex-1 min-w-0 flex items-center gap-2">
                  <span class="font-semibold text-gray-800 text-sm flex-shrink-0">{count}</span>
                  <span class="text-xs text-gray-600 truncate">
                    {getCategoryDisplayName(categoria, count)}
                  </span>
                </div>
              </div>
            ))}
          </div>
          
          <!-- Servicios adicionales (ocultos inicialmente) -->
          {Object.keys(locationContext.nearby_places.conteos_por_categoria).length > 15 && (
            <div class="hidden grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3" id="services-grid-extra">
              {Object.entries(locationContext.nearby_places.conteos_por_categoria)
                .sort(([,a], [,b]) => b - a)
                .slice(10)
                .map(([categoria, count]) => (
                <div class="service-card flex items-center gap-3 p-3 bg-gray-50 rounded-lg border border-gray-100 hover:bg-gray-100 hover:border-gray-200 transition-colors">
                  <div class="w-7 h-7 rounded-md flex items-center justify-center flex-shrink-0 bg-gray-200">
                    <i class={`${getCategoryIcon(categoria)} text-xs text-gray-600`}></i>
                  </div>
                  
                  <div class="flex-1 min-w-0 flex items-center gap-2">
                    <span class="font-semibold text-gray-800 text-sm flex-shrink-0">{count}</span>
                    <span class="text-xs text-gray-600 truncate">
                      {getCategoryDisplayName(categoria, count)}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          <!-- Bot√≥n Ver m√°s/menos para servicios - SOLO si hay m√°s de 10 elementos -->
          {Object.keys(locationContext.nearby_places.conteos_por_categoria).length > 10 && (
            <div class="text-center">
              <button 
                id="toggle-services-btn" 
                class="text-[#f04e00] hover:text-[#d63e00] font-medium text-sm flex items-center gap-2 mx-auto transition-colors"
                onclick="toggleServices()"
              >
                <span id="toggle-services-text">{t.showMore}</span>
                <i id="toggle-services-icon" class="fas fa-chevron-down text-xs"></i>
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  )}

  <!-- Fallback: Lugares cercanos desde estructura anterior -->
  {!locationContext?.nearby_places && data.seo?.structuredData?.nearbyPoints && data.seo.structuredData.nearbyPoints.length > 0 && (
    <div class="space-y-4">
      <h3 class="text-lg font-medium text-gray-900">
        {t.nearbyPlacesGeneric} {locationData.sector || locationData.city || t.theArea}
      </h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
        {data.seo.structuredData.nearbyPoints.slice(0, 6).map((place, index) => (
          <div class="flex items-center gap-3 p-3 bg-white rounded-lg border border-gray-100 hover:border-gray-200 transition-colors">
            <div class="w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0" 
                 style={`background-color: ${getCategoryColor(place.description)}15`}>
              <i class={`${getCategoryIcon(place.description)} text-sm`} style={`color: ${getCategoryColor(place.description)}`}></i>
            </div>
            
            <div class="flex-1 min-w-0">
              <h4 class="font-medium text-gray-900 text-sm truncate">{place.name}</h4>
              <p class="text-xs text-gray-500 truncate">{place.address}</p>
            </div>
            
            <div class="text-right flex-shrink-0">
              <span class="text-xs text-gray-600 font-medium">
                {index < 2 ? '0.5 km' : index < 4 ? '1.2 km' : '2+ km'}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  )}
</div>

<!-- Script para pasar datos a Google Maps del layout -->
<script define:vars={{ 
  coordinates: displayCoordinates, 
  propertyTitle: property.title_display || property.title || property.name || 'Propiedad',
  mapConfig: mapConfig,
  locationData: locationData,
  language: language,
  translations: translations,
  nearbyPlaces: lugares
}}>
  // Hacer las traducciones globales para los botones
  window.translations = translations;
  window.language = language;

  // Funci√≥n para toggle de servicios
  window.toggleServices = function() {
    const extraGrid = document.getElementById('services-grid-extra');
    const toggleBtn = document.getElementById('toggle-services-btn');
    const toggleText = document.getElementById('toggle-services-text');
    const toggleIcon = document.getElementById('toggle-services-icon');
    const t = translations[language] || translations['es'];
    
    if (extraGrid && toggleBtn && toggleText && toggleIcon) {
      if (extraGrid.classList.contains('hidden')) {
        extraGrid.classList.remove('hidden');
        extraGrid.classList.add('grid');
        toggleText.textContent = t.showLess;
        toggleIcon.classList.remove('fa-chevron-down');
        toggleIcon.classList.add('fa-chevron-up');
      } else {
        extraGrid.classList.add('hidden');
        extraGrid.classList.remove('grid');
        toggleText.textContent = t.showMore;
        toggleIcon.classList.remove('fa-chevron-up');
        toggleIcon.classList.add('fa-chevron-down');
      }
    }
  };

  // DATOS PARA GOOGLE MAPS DEL LAYOUT
  if (typeof window !== 'undefined') {
    window.propertyData = {
      coordinates: coordinates,
      title: propertyTitle,
      showMarker: mapConfig.showMarker,
      zoom: mapConfig.zoom,
      // Convertir lugares cercanos para Google Maps
      nearbyPoints: nearbyPlaces.slice(0, 5).map(place => ({
        name: place.nombre,
        description: place.categoria,
        address: `${place.direccion} - ${place.distancia_display || '500m'}`
      }))
    };
    
    console.log('üó∫Ô∏è Datos pasados a Google Maps del layout:', window.propertyData);
  }
</script>

<style>
  /* Estilos para Google Maps */
  #google-map {
    border-radius: 12px;
  }
  
  /* Clamp para truncar texto */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Estilos para info windows de Google Maps */
  .gm-style-iw-content {
    padding: 8px !important;
  }
  
  .gm-style-iw-content h4 {
    margin: 0 0 4px 0;
    font-weight: 600;
  }
  
  .gm-style-iw-content p {
    margin: 0;
    font-size: 12px;
    color: #666;
  }
  
  @media (max-width: 640px) {
    .gm-style-iw {
      max-width: 250px !important;
    }
  }
</style>