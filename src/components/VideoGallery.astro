---
export interface Props {
  videos?: Array<{
    id: string;
    title: string;
    description?: string;
    thumbnail?: string | null;
    duration: string;
    views?: string | number;
    category: string;
    videoId: string;
    videoSlug: string;
    url: string;
    featured?: boolean;
    total_weight?: number;
    content_priority?: string;
    sort_order?: number;
  }>;
  title?: string;
  subtitle?: string;
  layout?: 'grid' | 'carousel' | 'featured';
  propertyRelated?: boolean;
  language?: 'es' | 'en' | 'fr';
}

const { 
  videos: rawVideos = [], 
  title,
  subtitle,
  layout = 'grid',
  propertyRelated = false,
  language = 'es'
} = Astro.props;

// Traducciones para textos est√°ticos
const translations = {
  es: {
    defaultTitle: "Contenido Exclusivo CLIC",
    defaultSubtitle: "Descubre m√°s contenido exclusivo sobre bienes ra√≠ces",
    propertyRelatedTitle: "Videos Exclusivos de la Zona",
    propertyRelatedSubtitle: "Conoce m√°s sobre el √°rea y el mercado inmobiliario",
    subscribers: "Suscriptores",
    topChannel: "Canal inmobiliario #1 de RD",
    celebrityHouse: "Casa de Famosos",
    viewAllVideos: "Ver todos los videos",
    featured: "Destacado",
    viewFullVideo: "Ver video completo",
    comingSoon: "Pr√≥ximamente",
    exploreAllCategories: "Explorar todas las categor√≠as de videos",
    views: "vistas",
    // Formateo de vistas
    viewsK: "K vistas",
    viewsM: "M vistas",
    viewsSingular: "vista"
  },
  en: {
    defaultTitle: "CLIC Exclusive Content",
    defaultSubtitle: "Discover more exclusive real estate content",
    propertyRelatedTitle: "Exclusive Area Videos",
    propertyRelatedSubtitle: "Learn more about the area and real estate market",
    subscribers: "Subscribers",
    topChannel: "#1 Real Estate Channel in DR",
    celebrityHouse: "Celebrity House",
    viewAllVideos: "View all videos",
    featured: "Featured",
    viewFullVideo: "Watch full video",
    comingSoon: "Coming soon",
    exploreAllCategories: "Explore all video categories",
    views: "views",
    viewsK: "K views",
    viewsM: "M views",
    viewsSingular: "view"
  },
  fr: {
    defaultTitle: "Contenu Exclusif CLIC",
    defaultSubtitle: "D√©couvrez plus de contenu exclusif sur l'immobilier",
    propertyRelatedTitle: "Vid√©os Exclusives de la Zone",
    propertyRelatedSubtitle: "En savoir plus sur la r√©gion et le march√© immobilier",
    subscribers: "Abonn√©s",
    topChannel: "Cha√Æne immobili√®re #1 en RD",
    celebrityHouse: "Maison de C√©l√©brit√©s",
    viewAllVideos: "Voir toutes les vid√©os",
    featured: "En vedette",
    viewFullVideo: "Voir la vid√©o compl√®te",
    comingSoon: "Prochainement",
    exploreAllCategories: "Explorer toutes les cat√©gories de vid√©os",
    views: "vues",
    viewsK: "K vues",
    viewsM: "M vues",
    viewsSingular: "vue"
  }
};

// Obtener las traducciones para el idioma actual
const t = translations[language] || translations.es;

// Determinar t√≠tulo y subt√≠tulo
const finalTitle = title || (propertyRelated ? t.propertyRelatedTitle : t.defaultTitle);
const finalSubtitle = subtitle || (propertyRelated ? t.propertyRelatedSubtitle : t.defaultSubtitle);

if (!rawVideos || rawVideos.length === 0) return null;

// Ordenar videos por relevancia y limitar a 8
const sortedVideos = rawVideos
  .sort((a, b) => {
    if (a.featured && !b.featured) return -1;
    if (!a.featured && b.featured) return 1;
    
    const priorityOrder = { 'tag_related': 4, 'high': 3, 'medium': 2, 'default': 1 };
    const priorityA = priorityOrder[a.content_priority] || 1;
    const priorityB = priorityOrder[b.content_priority] || 1;
    
    if (priorityA !== priorityB) {
      return priorityB - priorityA;
    }
    
    const weightA = a.total_weight || 0;
    const weightB = b.total_weight || 0;
    
    if (weightA !== weightB) {
      return weightB - weightA;
    }
    
    const sortA = a.sort_order || 0;
    const sortB = b.sort_order || 0;
    
    return sortA - sortB;
  })
  .slice(0, 8);

console.log(`üì∫ [VideoGallery] Mostrando ${sortedVideos.length} videos ordenados:`, 
  sortedVideos.map((v, i) => `${i+1}. "${v.title.substring(0, 40)}..." (peso: ${v.total_weight || 0}, featured: ${v.featured || false}, prioridad: ${v.content_priority || 'default'})`));

// Sistema din√°mico de colores para categor√≠as
const availableColors = [
  'bg-purple-500',
  'bg-red-500', 
  'bg-blue-500',
  'bg-green-500',
  'bg-yellow-500',
  'bg-pink-500',
  'bg-indigo-500',
  'bg-orange-500',
  'bg-teal-500',
  'bg-cyan-500',
  'bg-emerald-500',
  'bg-rose-500'
];

function getCategoryColorMap(videos: any[]) {
  const uniqueCategories = [...new Set(videos.map(v => v.category))];
  const colorMap = new Map();
  
  uniqueCategories.forEach((category, index) => {
    const colorIndex = index % availableColors.length;
    colorMap.set(category, availableColors[colorIndex]);
  });
  
  return colorMap;
}

const categoryColorMap = getCategoryColorMap(sortedVideos);

function getCategoryInfo(category: string) {
  const color = categoryColorMap.get(category) || 'bg-gray-500';
  return {
    label: category,
    color: color
  };
}

function getVideoUrl(video: any) {
  if (!video.url || video.url.trim() === '') {
    console.warn(`‚ö†Ô∏è Video sin URL v√°lida: "${video.title}" - ID: ${video.id}`);
    return null;
  }
  
  return video.url;
}

// Funci√≥n mejorada para formatear views seg√∫n el idioma
function formatViews(views: string | number) {
  if (!views) return null;
  
  const num = typeof views === 'string' ? parseInt(views.replace(/[^\d]/g, '')) : views;
  
  if (isNaN(num)) return views;
  
  if (num >= 1000000) {
    return `${(num / 1000000).toFixed(1)}${t.viewsM}`;
  } else if (num >= 1000) {
    return `${(num / 1000).toFixed(1)}${t.viewsK}`;
  } else if (num === 1) {
    return `1 ${t.viewsSingular}`;
  } else {
    return `${num} ${t.views}`;
  }
}

// URL del bot√≥n seg√∫n el idioma
const videosUrl = language === 'en' ? '/en/videos' : 
                  language === 'fr' ? '/fr/videos' : 
                  '/videos';

const featuredVideo = sortedVideos.find(v => v.featured === true);
const featuredCount = sortedVideos.filter(v => v.featured === true).length;

const videosForSmallGrid = featuredVideo && layout === 'featured' ? 
  sortedVideos.slice(1) :
  sortedVideos;

console.log(`üåü [VideoGallery] Videos destacados: ${featuredCount}`, 
  featuredCount > 1 ? '(m√∫ltiples destacados - todos se muestran)' : '');
console.log('üé® [VideoGallery] Categor√≠as y colores asignados:', 
  Array.from(categoryColorMap.entries()).map(([cat, color]) => `${cat}: ${color}`));
---

<section class="py-16 bg-gradient-to-b from-white to-gray-50">
  <div class="container mx-auto px-4">
    {/* Header mejorado con traducciones */}
    <div class="flex items-center justify-between mb-10">
      <div>
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
          {finalTitle}
        </h2>
        {finalSubtitle && (
          <p class="text-lg text-gray-600">
            {finalSubtitle}
          </p>
        )}
        
        {/* Stats destacados con traducciones */}
        <div class="flex items-center gap-2 mt-3">
          <div class="flex items-center gap-1">
            <svg class="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
            </svg>
            <span class="text-sm font-medium text-gray-700">200K+ {t.subscribers}</span>
          </div>
          <span class="text-gray-400">‚Ä¢</span>
          <span class="text-sm text-gray-600">üè† {t.topChannel}</span>
          <span class="text-gray-400">‚Ä¢</span>
          <span class="text-sm font-medium text-red-600">üåü {t.celebrityHouse}</span>
        </div>
      </div>
      <a 
        href={videosUrl}
        class="hidden md:flex items-center gap-2 px-4 py-2 bg-[#f04e00] text-white rounded-lg hover:bg-[#d94400] transition-colors"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
        </svg>
        {t.viewAllVideos}
      </a>
    </div>

    {/* Layout Featured: PRIMER VIDEO GRANDE + RESTO EN GRID PEQUE√ëO */}
    {featuredVideo && layout === 'featured' ? (
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        {/* Video destacado grande */}
        <div class="lg:col-span-1">
          {getVideoUrl(featuredVideo) ? (
            <a 
              href={getVideoUrl(featuredVideo)}
              class="group block relative"
            >
              <div class="relative aspect-video overflow-hidden rounded-xl shadow-lg">
                {featuredVideo.thumbnail ? (
                  <img
                    src={featuredVideo.thumbnail}
                    alt={featuredVideo.title}
                    width="1280"
                    height="720"
                    loading="lazy"
                    decoding="async"
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                  />
                ) : (
                  <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                )}
                
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent"></div>
                
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="w-20 h-20 bg-red-600 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform shadow-2xl">
                    <svg class="w-10 h-10 text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
                
                <div class="absolute top-2 left-2 md:top-4 md:left-4 flex flex-col md:flex-row gap-2">
                  <span class="bg-[#f04e00] text-white px-2 py-1 md:px-3 md:py-1 rounded-full text-[10px] md:text-xs font-medium shadow-lg">
                    {t.featured}
                  </span>
                  <span class={`px-2 py-1 md:px-3 md:py-1 ${getCategoryInfo(featuredVideo.category).color} text-white text-[10px] md:text-xs font-medium rounded-full shadow-lg`}>
                    {getCategoryInfo(featuredVideo.category).label}
                  </span>
                </div>

                <div class="absolute bottom-2 left-2 right-2 md:bottom-4 md:left-4 md:right-4 flex items-center justify-between flex-wrap gap-2">
                  <div class="flex items-center gap-2">
                    {formatViews(featuredVideo.views) && (
                      <div class="flex items-center gap-1 bg-black/70 text-white text-xs md:text-sm px-2 py-1 md:px-3 md:py-1 rounded-full">
                        <svg class="w-3 h-3 md:w-4 md:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        <span class="hidden sm:inline">{formatViews(featuredVideo.views)}</span>
                      </div>
                    )}
                  </div>

                  <div class="flex items-center gap-1 bg-black/70 text-white text-xs md:text-sm px-2 py-1 md:px-3 md:py-1 rounded-full">
                    <svg class="w-3 h-3 md:w-4 md:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>{featuredVideo.duration}</span>
                  </div>
                </div>
              </div>
              
              <div class="mt-4 space-y-3">
                <h3 class="text-xl font-bold text-gray-900 group-hover:text-[#f04e00] transition-colors leading-tight">
                  {featuredVideo.title}
                </h3>
                {featuredVideo.description && (
                  <p class="text-gray-600 leading-relaxed line-clamp-2">{featuredVideo.description}</p>
                )}
                
                <div class="flex items-center gap-2 text-[#f04e00] font-medium pt-2">
                  <span>{t.viewFullVideo}</span>
                  <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </div>
            </a>
          ) : (
            <div class="group relative opacity-75">
              <div class="relative aspect-video overflow-hidden rounded-xl shadow-lg">
                {featuredVideo.thumbnail ? (
                  <img
                    src={featuredVideo.thumbnail}
                    alt={featuredVideo.title}
                    width="1280"
                    height="720"
                    loading="lazy"
                    decoding="async"
                    class="w-full h-full object-cover"
                  />
                ) : (
                  <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                )}
                
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent"></div>
                
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="w-20 h-20 bg-gray-600 rounded-full flex items-center justify-center">
                    <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                </div>
                
                <span class="absolute top-4 left-4 bg-gray-600 text-white px-3 py-1 rounded-full text-xs font-medium">
                  {t.comingSoon}
                </span>
              </div>
              
              <div class="mt-4 space-y-3">
                <h3 class="text-xl font-bold text-gray-600 leading-tight">
                  {featuredVideo.title}
                </h3>
                {featuredVideo.description && (
                  <p class="text-gray-500 leading-relaxed line-clamp-2">{featuredVideo.description}</p>
                )}
              </div>
            </div>
          )}
        </div>
        
        {/* Grid peque√±o */}
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {videosForSmallGrid.slice(0, 4).map((video) => {
            const videoUrl = getVideoUrl(video);
            return videoUrl ? (
              <a 
                href={videoUrl}
                class="group block"
              >
                <div class="relative aspect-video overflow-hidden rounded-lg shadow-md">
                  {video.thumbnail ? (
                    <img 
                      src={video.thumbnail} 
                      alt={video.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                  ) : (
                    <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                      <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                      </svg>
                    </div>
                  )}
                  
                  <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-90"></div>
                  
                  <div class="absolute inset-0 flex items-center justify-center">
                    <div class="w-12 h-12 bg-white/90 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                      <svg class="w-6 h-6 text-red-600 ml-1" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                    </div>
                  </div>
                  
                  <div class="absolute top-2 left-2 flex gap-1">
                    {video.featured === true && (
                      <span class="bg-[#f04e00] text-white px-2 py-1 rounded text-xs font-medium shadow-lg">
                        {t.featured}
                      </span>
                    )}
                    <span class={`px-2 py-1 ${getCategoryInfo(video.category).color} text-white text-xs font-medium rounded shadow-lg`}>
                      {getCategoryInfo(video.category).label}
                    </span>
                  </div>
                  
                  <div class="absolute bottom-2 left-2 right-2 flex items-center justify-between">
                    {formatViews(video.views) && (
                      <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        <span>{formatViews(video.views)}</span>
                      </div>
                    )}
                    
                    <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <span>{video.duration}</span>
                    </div>
                  </div>
                </div>
                
                <div class="mt-3">
                  <h4 class="text-sm font-medium text-gray-900 group-hover:text-[#f04e00] transition-colors line-clamp-2 leading-tight">
                    {video.title}
                  </h4>
                </div>
              </a>
            ) : (
              <div class="group block opacity-75">
                <div class="relative aspect-video overflow-hidden rounded-lg shadow-md">
                  {video.thumbnail ? (
                    <img 
                      src={video.thumbnail} 
                      alt={video.title}
                      class="w-full h-full object-cover"
                    />
                  ) : (
                    <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                      <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                      </svg>
                    </div>
                  )}
                  
                  <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-90"></div>
                  
                  <span class="absolute top-2 left-2 bg-gray-600 text-white px-2 py-1 text-xs font-medium rounded">
                    {t.comingSoon}
                  </span>
                  
                  <div class="absolute bottom-2 right-2">
                    <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <span>{video.duration}</span>
                    </div>
                  </div>
                </div>
                
                <div class="mt-3">
                  <h4 class="text-sm font-medium text-gray-600 line-clamp-2 leading-tight">
                    {video.title}
                  </h4>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ) : (
      /* Grid normal */
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {sortedVideos.map((video) => {
          const videoUrl = getVideoUrl(video);
          return videoUrl ? (
            <a 
              href={videoUrl}
              class="group block"
            >
              <div class="relative aspect-video overflow-hidden rounded-lg shadow-md group-hover:shadow-xl transition-shadow">
                {video.thumbnail ? (
                  <img 
                    src={video.thumbnail} 
                    alt={video.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  />
                ) : (
                  <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                )}
                
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="w-14 h-14 bg-white/90 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all transform scale-75 group-hover:scale-100">
                    <svg class="w-7 h-7 text-red-600 ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
                
                <div class="absolute top-3 left-3 flex gap-1">
                  {video.featured === true && (
                    <span class="bg-[#f04e00] text-white px-2 py-1 rounded text-xs font-medium">
                      {t.featured}
                    </span>
                  )}
                  <span class={`px-2 py-1 ${getCategoryInfo(video.category).color} text-white text-xs font-medium rounded`}>
                    {getCategoryInfo(video.category).label}
                  </span>
                </div>
                
                <div class="absolute bottom-3 left-3 right-3 flex items-center justify-between">
                  {formatViews(video.views) && (
                    <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                      <span>{formatViews(video.views)}</span>
                    </div>
                  )}
                  
                  <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>{video.duration}</span>
                  </div>
                </div>
              </div>
              
              <div class="mt-3 space-y-1">
                <h3 class="font-semibold text-gray-900 group-hover:text-[#f04e00] transition-colors line-clamp-2 leading-tight">
                  {video.title}
                </h3>
                {video.description && (
                  <p class="text-sm text-gray-600 line-clamp-2 leading-relaxed">{video.description}</p>
                )}
              </div>
            </a>
          ) : (
            <div class="group block opacity-75">
              <div class="relative aspect-video overflow-hidden rounded-lg shadow-md">
                {video.thumbnail ? (
                  <img 
                    src={video.thumbnail} 
                    alt={video.title}
                    class="w-full h-full object-cover"
                  />
                ) : (
                  <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                )}
                
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
                
                <span class="absolute top-3 left-3 bg-gray-600 text-white px-2 py-1 text-xs font-medium rounded">
                  {t.comingSoon}
                </span>
                
                <div class="absolute bottom-3 right-3">
                  <div class="flex items-center gap-1 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>{video.duration}</span>
                  </div>
                </div>
              </div>
              
              <div class="mt-3 space-y-1">
                <h3 class="font-semibold text-gray-600 line-clamp-2 leading-tight">
                  {video.title}
                </h3>
                {video.description && (
                  <p class="text-sm text-gray-500 line-clamp-2 leading-relaxed">{video.description}</p>
                )}
              </div>
            </div>
          );
        })}
      </div>
    )}

    {/* Call to action mejorado */}
    <div class="text-center mt-10">
      <a 
        href={videosUrl}
        class="inline-flex items-center gap-2 text-[#f04e00] hover:text-[#d94400] font-medium transition-colors"
      >
        {t.exploreAllCategories}
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>