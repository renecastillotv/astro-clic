---
// src/layouts/VideosSingleLayout.astro - Layout para video individual con validación defensiva
import Layout from './Layout.astro';

// ===================================================================
// FUNCIONES HELPER PARA VALIDACIÓN DEFENSIVA
// ===================================================================

function safeGet(obj, path, defaultValue = null) {
  try {
    return path.split('.').reduce((current, key) => current && current[key], obj) || defaultValue;
  } catch (error) {
    console.warn('safeGet error:', error, 'path:', path);
    return defaultValue;
  }
}

function safeArray(arr, defaultValue = []) {
  return Array.isArray(arr) ? arr : defaultValue;
}

function safeString(str, defaultValue = '') {
  return typeof str === 'string' ? str : defaultValue;
}

function safeObject(obj, defaultValue = {}) {
  return obj && typeof obj === 'object' && !Array.isArray(obj) ? obj : defaultValue;
}

function safeNumber(num, defaultValue = 0) {
  return typeof num === 'number' && !isNaN(num) ? num : defaultValue;
}

// ===================================================================
// EXTRACCIÓN DE DATOS DEL PROP CON VALIDACIÓN DEFENSIVA
// ===================================================================

const { data } = Astro.props;
const language = safeString(data?.language, 'es');

// ===================================================================
// PROCESAMIENTO DEFENSIVO DE DATOS
// ===================================================================

let videoData = safeObject(data);

// Procesar video principal de forma defensiva
const rawVideo = safeObject(videoData.video);
const safeVideoData = {
  language: language,
  id: safeString(rawVideo.id, 'video-default'),
  title: safeString(rawVideo.title, 'Video sin título'),
  description: safeString(rawVideo.description, 'Descripción no disponible'),
  thumbnail: safeString(rawVideo.thumbnail, 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop'),
  videoSlug: safeString(rawVideo.videoSlug || rawVideo.slug, 'video-default'),
  duration: safeString(rawVideo.duration, '0:00'),
  publishedAt: safeString(rawVideo.publishedAt, new Date().toISOString()),
  views: safeNumber(rawVideo.views, 0),
  featured: Boolean(rawVideo.featured),
  url: safeString(rawVideo.url, '#'),
  slug: safeString(rawVideo.slug, 'video-default'),
  author: safeObject(rawVideo.author, {
    name: 'Equipo CLIC',
    avatar: '/images/team/clic-experts.jpg',
    slug: 'equipo-clic',
    position: 'Especialista Inmobiliario',
    bio: ''
  })
};

// Procesar categoría de forma defensiva
const rawCategory = safeObject(videoData.category);
const safeCategoryData = {
  id: safeString(rawCategory.id, 'category-default'),
  name: safeString(rawCategory.name, 'Videos'),
  slug: safeString(rawCategory.slug, 'videos')
};

// Procesar videos relacionados de forma defensiva
const rawRelatedVideos = safeArray(videoData.relatedVideos);
const safeRelatedVideos = rawRelatedVideos.map((video, index) => ({
  id: safeString(video.id, `related-${index}`),
  title: safeString(video.title, 'Video sin título'),
  thumbnail: safeString(video.thumbnail, 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop'),
  duration: safeString(video.duration, '0:00'),
  views: safeNumber(video.views, 0),
  url: safeString(video.url, '#'),
  slug: safeString(video.slug, `video-${index}`)
}));

// SEO seguro - Priorizar datos del backend
const safeSeo = {
  title: safeString(safeGet(videoData, 'seo.title'), `${safeVideoData.title} - Videos CLIC`),
  description: safeString(safeGet(videoData, 'seo.description'), safeVideoData.description),
  h1: safeString(safeGet(videoData, 'seo.h1'), safeVideoData.title),
  h2: safeString(safeGet(videoData, 'seo.h2'), safeCategoryData.name),
  canonical_url: safeString(safeGet(videoData, 'seo.canonical_url'), safeVideoData.url),
  ogImage: safeString(safeGet(videoData, 'seo.ogImage') || safeGet(videoData, 'seo.open_graph.image'), safeVideoData.thumbnail),
  keywords: safeString(safeGet(videoData, 'seo.keywords'), `${safeVideoData.title}, videos inmobiliarios, República Dominicana`),
  hreflang: safeObject(safeGet(videoData, 'seo.hreflang'), {}),
  breadcrumbs: safeArray(safeGet(videoData, 'seo.breadcrumbs'), [
    {
      name: language === 'en' ? 'Home' : language === 'fr' ? 'Accueil' : 'Inicio',
      url: language === 'es' ? '/' : `/${language}/`
    },
    {
      name: language === 'en' ? 'Videos' : language === 'fr' ? 'Vidéos' : 'Videos',
      url: language === 'es' ? '/videos' : `/${language}/videos`
    },
    {
      name: safeCategoryData.name,
      url: language === 'es' ? `/videos/${safeCategoryData.slug}` : `/${language}/videos/${safeCategoryData.slug}`
    },
    {
      name: safeVideoData.title,
      url: safeVideoData.url
    }
  ]),
  structured_data: safeObject(safeGet(videoData, 'seo.structured_data'), {}),
  open_graph: safeObject(safeGet(videoData, 'seo.open_graph'), {}),
  twitter_card: safeObject(safeGet(videoData, 'seo.twitter_card'), {})
};

// ===================================================================
// PREPARAR PROPS PARA LAYOUT CON DATOS SEO COMPLETOS
// ===================================================================

const layoutProps = {
  title: safeSeo.title,
  description: safeSeo.description,
  ogImage: safeSeo.ogImage,
  canonical: safeSeo.canonical_url,
  keywords: safeSeo.keywords,
  hreflangData: safeSeo.hreflang,
  globalConfig: data?.globalConfig || videoData?.globalConfig || {},
  language: language,
  trackingString: videoData?.trackingString || '',
  hotItems: videoData?.hotItems || {},
  country: videoData?.country || {},
  breadcrumbs: safeSeo.breadcrumbs,
  structuredData: safeSeo.structured_data,
  openGraph: safeSeo.open_graph,
  twitterCard: safeSeo.twitter_card
};

// ===================================================================
// TEXTOS POR IDIOMA
// ===================================================================

const TEXTS = {
  es: {
    breadcrumbVideos: 'Videos',
    description: 'Descripción',
    watchVideo: 'Ver video',
    relatedVideosTitle: 'Videos relacionados',
    relatedVideosSubtitle: 'Continúa explorando contenido similar',
    ctaTitle: '¿Te gustó este video?',
    ctaSubtitle: 'Suscríbete a nuestro canal para no perderte más contenido exclusivo',
    ctaButton1: 'Suscribirse al canal',
    ctaButton2: 'Ver más videos',
    views: 'visualizaciones',
    duration: 'Duración',
    published: 'Publicado el',
    author: 'Por'
  },
  en: {
    breadcrumbVideos: 'Videos',
    description: 'Description',
    watchVideo: 'Watch video',
    relatedVideosTitle: 'Related videos',
    relatedVideosSubtitle: 'Continue exploring similar content',
    ctaTitle: 'Did you like this video?',
    ctaSubtitle: 'Subscribe to our channel to not miss more exclusive content',
    ctaButton1: 'Subscribe to channel',
    ctaButton2: 'Watch more videos',
    views: 'views',
    duration: 'Duration',
    published: 'Published on',
    author: 'By'
  },
  fr: {
    breadcrumbVideos: 'Vidéos',
    description: 'Description',
    watchVideo: 'Regarder la vidéo',
    relatedVideosTitle: 'Vidéos similaires',
    relatedVideosSubtitle: 'Continuez à explorer du contenu similaire',
    ctaTitle: 'Cette vidéo vous a plu?',
    ctaSubtitle: 'Abonnez-vous à notre chaîne pour ne pas manquer plus de contenu exclusif',
    ctaButton1: 'S\'abonner à la chaîne',
    ctaButton2: 'Voir plus de vidéos',
    views: 'vues',
    duration: 'Durée',
    published: 'Publié le',
    author: 'Par'
  }
};

const text = TEXTS[language] || TEXTS.es;

// URLs según idioma
const routes = {
  es: {
    contact: '/contacto',
    videosBase: '/videos'
  },
  en: {
    contact: '/en/contact',
    videosBase: '/en/videos'
  },
  fr: {
    contact: '/fr/contact',
    videosBase: '/fr/videos'
  }
};

const currentRoutes = routes[language] || routes.es;

// Función para formatear fecha
function formatDate(dateString) {
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return language === 'en' ? 'Recent' : language === 'fr' ? 'Récent' : 'Reciente';
    }
    
    const months = {
      es: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'],
      en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      fr: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
    };
    
    const monthNames = months[language] || months.es;
    return `${date.getDate()} de ${monthNames[date.getMonth()]} de ${date.getFullYear()}`;
  } catch (error) {
    return language === 'en' ? 'Recent' : language === 'fr' ? 'Récent' : 'Reciente';
  }
}

// Función para extraer videoId de YouTube URL o thumbnail
function extractVideoId(thumbnail) {
  if (!thumbnail) return 'dQw4w9WgXcQ';
  
  // Extraer de URL de thumbnail de YouTube
  const match = thumbnail.match(/\/vi\/([^\/]+)\//);
  if (match && match[1]) {
    return match[1];
  }
  
  // Fallback
  return 'dQw4w9WgXcQ';
}

const videoId = extractVideoId(safeVideoData.thumbnail);

// Función para limpiar descripción HTML
function cleanDescription(htmlContent) {
  if (!htmlContent) return '';
  
  // Remover tags HTML pero mantener saltos de línea
  return htmlContent
    .replace(/<br\s*\/?>/gi, '\n')
    .replace(/<\/p>/gi, '\n\n')
    .replace(/<[^>]*>/g, '')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .trim();
}

console.log('✅ VideosSingleLayout preparado:', {
  language,
  videoTitle: safeVideoData.title,
  categoryName: safeCategoryData.name,
  relatedVideosCount: safeRelatedVideos.length,
  videoId: videoId,
  views: safeVideoData.views
});
---

<Layout {...layoutProps}>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

  <!-- Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "VideoObject",
    "name": safeVideoData.title,
    "description": cleanDescription(safeVideoData.description),
    "thumbnailUrl": safeVideoData.thumbnail,
    "uploadDate": safeVideoData.publishedAt,
    "duration": safeVideoData.duration,
    "embedUrl": `https://www.youtube.com/embed/${videoId}`,
    "author": {
      "@type": "Person",
      "name": safeVideoData.author.name
    },
    "publisher": {
      "@type": "Organization",
      "name": "CLIC Inmobiliaria",
      "logo": {
        "@type": "ImageObject",
        "url": "https://pacewqgypevfgjmdsorz.supabase.co/storage/v1/object/public/public-assets/clic%20logo%20on.png"
      }
    },
    "interactionStatistic": {
      "@type": "InteractionCounter",
      "interactionType": { "@type": "WatchAction" },
      "userInteractionCount": safeVideoData.views
    }
  })} />

  <div class="min-h-screen bg-gray-50">
    
    <!-- Breadcrumbs Bar -->
    <nav class="bg-white shadow-sm">
      <div class="container mx-auto px-4 py-3">
        {safeSeo.breadcrumbs && safeSeo.breadcrumbs.length > 0 && (
          <div aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
              {safeSeo.breadcrumbs.map((breadcrumb, index) => (
                <li class="flex items-center">
                  {index > 0 && (
                    <i class="fas fa-chevron-right mx-2 text-gray-400 text-xs"></i>
                  )}
                  {index === safeSeo.breadcrumbs.length - 1 ? (
                    <span class="text-[#f04e00] font-medium">{breadcrumb.name}</span>
                  ) : (
                    <a href={breadcrumb.url} class="hover:text-[#f04e00] transition-colors">
                      {breadcrumb.name}
                    </a>
                  )}
                </li>
              ))}
            </ol>
          </div>
        )}
      </div>
    </nav>

    <!-- Video Section -->
    <section class="py-8 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          
          <!-- Title and metadata -->
          <header class="mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4 leading-tight">
              {safeSeo.h1 || safeVideoData.title}
            </h1>
            
            <!-- Author and metadata -->
            <div class="flex items-center gap-4 mb-6">
              <img 
                src={safeVideoData.author.avatar} 
                alt={safeVideoData.author.name}
                class="w-12 h-12 rounded-full"
              />
              <div>
                <div class="text-sm text-gray-600">
                  <span class="font-medium text-gray-900">{text.author} {safeVideoData.author.name}</span>
                  <span class="mx-2">•</span>
                  <span>{formatDate(safeVideoData.publishedAt)}</span>
                  <span class="mx-2">•</span>
                  <span>
                    <i class="far fa-eye mr-1"></i>
                    {safeVideoData.views.toLocaleString()} {text.views}
                  </span>
                  <span class="mx-2">•</span>
                  <span>
                    <i class="far fa-clock mr-1"></i>
                    {safeVideoData.duration}
                  </span>
                </div>
                <div class="text-sm text-gray-500 mt-1">
                  {safeVideoData.author.position}
                </div>
              </div>
            </div>
          </header>

          <!-- Video Embed -->
          <div class="aspect-video bg-black rounded-xl overflow-hidden shadow-2xl mb-8">
            <iframe 
              src={`https://www.youtube.com/embed/${videoId}`}
              title={safeVideoData.title}
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
              class="w-full h-full"
            ></iframe>
          </div>

          <!-- Description -->
          {safeVideoData.description && (
            <div class="prose prose-lg max-w-none mb-12">
              <h2 class="text-2xl font-bold mb-4">{text.description}</h2>
              <div class="text-gray-700 leading-relaxed whitespace-pre-line" set:html={safeVideoData.description}></div>
            </div>
          )}

          <!-- Author Bio -->
          {safeVideoData.author.bio && (
            <div class="bg-gray-50 rounded-xl p-6 mb-12">
              <div class="flex items-start gap-4">
                <img 
                  src={safeVideoData.author.avatar} 
                  alt={safeVideoData.author.name}
                  class="w-16 h-16 rounded-full flex-shrink-0"
                />
                <div>
                  <h3 class="text-lg font-semibold text-gray-900 mb-2">
                    {safeVideoData.author.name}
                  </h3>
                  <p class="text-sm text-gray-600 mb-3">{safeVideoData.author.position}</p>
                  <div class="text-sm text-gray-700 prose prose-sm max-w-none" set:html={safeVideoData.author.bio}></div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>

    <!-- Related Videos -->
    {safeRelatedVideos.length > 0 && (
      <section class="py-12 bg-gray-50">
        <div class="container mx-auto px-4">
          <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
            {text.relatedVideosTitle}
          </h2>
          <p class="text-gray-600 mb-8">{text.relatedVideosSubtitle}</p>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {safeRelatedVideos.map((video, index) => (
              <article class="bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden group" key={video.id}>
                <a href={video.url} class="block">
                  <!-- Video Thumbnail -->
                  <div class="aspect-video relative overflow-hidden">
                    <img 
                      src={video.thumbnail} 
                      alt={video.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                    <!-- Play button overlay -->
                    <div class="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <div class="w-12 h-12 bg-white/90 rounded-full flex items-center justify-center">
                        <i class="fas fa-play text-lg text-[#f04e00] ml-0.5"></i>
                      </div>
                    </div>
                    <!-- Duration badge -->
                    <div class="absolute bottom-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
                      {video.duration}
                    </div>
                  </div>
                  
                  <!-- Content -->
                  <div class="p-4">
                    <h3 class="text-sm font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-[#f04e00] transition-colors leading-tight">
                      {video.title}
                    </h3>
                    
                    <!-- Meta -->
                    <div class="flex items-center justify-between text-xs text-gray-500 mb-3">
                      <span class="flex items-center gap-1">
                        <i class="far fa-eye"></i>
                        {video.views.toLocaleString()}
                      </span>
                    </div>
                    
                    <!-- Watch link -->
                    <div class="inline-flex items-center gap-1 text-[#f04e00] font-medium text-xs group-hover:gap-2 transition-all">
                      <span>{text.watchVideo}</span>
                      <i class="fas fa-play"></i>
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- CTA Section -->
    <section class="py-16 bg-gradient-to-r from-[#f04e00] to-[#ff7a3d]">
      <div class="container mx-auto px-4 text-center">
        <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
          {text.ctaTitle}
        </h2>
        <p class="text-xl text-white/90 mb-8 max-w-2xl mx-auto">
          {text.ctaSubtitle}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="https://youtube.com/@clicinmobiliaria" 
            target="_blank"
            class="inline-flex items-center gap-2 px-6 py-3 bg-white text-[#f04e00] rounded-lg hover:bg-gray-100 transition-colors font-medium"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
            </svg>
            {text.ctaButton1}
          </a>
          <a 
            href={currentRoutes.videosBase}
            class="inline-flex items-center gap-2 px-6 py-3 bg-white/20 text-white border border-white rounded-lg hover:bg-white/30 transition-colors font-medium"
          >
            {text.ctaButton2}
          </a>
        </div>
      </div>
    </section>

  </div>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .aspect-video {
    aspect-ratio: 16 / 9;
  }

  /* Smooth transitions */
  .group:hover .group-hover\:scale-105 {
    transform: scale(1.05);
  }
  
  .group:hover .group-hover\:text-[#f04e00] {
    color: #f04e00;
  }
  
  .group:hover .group-hover\:gap-2 {
    gap: 0.5rem;
  }
</style>