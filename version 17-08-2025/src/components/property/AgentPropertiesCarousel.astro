---
// src/components/property/AgentPropertiesCarousel.astro
export interface Props {
  data: any;
}

const { data } = Astro.props;

const agent = data.agent || {};
const agentProperties = data.agentProperties || [];
const agentPropertiesInfo = data.agentPropertiesInfo || {};

// Solo mostrar si hay propiedades del asesor
const showCarousel = agentPropertiesInfo.has_agent_properties && agentProperties.length > 0;

console.log('🏠 AgentPropertiesCarousel loaded:', {
  hasAgentProperties: showCarousel,
  propertiesCount: agentProperties.length,
  totalFound: agentPropertiesInfo.total_found,
  agentId: agentPropertiesInfo.agent_id
});
---

<!-- Agent Properties Carousel -->
{showCarousel && (
  <div class="space-y-6">
    <!-- Header con información del asesor -->
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-2xl font-bold text-gray-900 border-b-2 border-[#f04e00] pb-2 inline-block">
          Más Propiedades de {agent.name || 'Este Asesor'}
        </h2>
        <p class="text-sm text-gray-600 mt-2">
          <span>{agentPropertiesInfo.total_found}</span>{' '}
          <span>{agentPropertiesInfo.total_found === 1 ? 'propiedad disponible' : 'propiedades disponibles'}</span>
        </p>
      </div>
      
      <!-- Controles del carrusel -->
      <div class="flex items-center gap-2">
        <button 
          id="carousel-prev"
          class="w-10 h-10 bg-white border border-gray-300 rounded-full flex items-center justify-center hover:bg-gray-50 hover:border-[#f04e00] transition-all duration-200 disabled:opacity-40 disabled:cursor-not-allowed"
          onclick="slideCarousel('prev')"
        >
          <i class="fas fa-chevron-left text-gray-600"></i>
        </button>
        <button 
          id="carousel-next"
          class="w-10 h-10 bg-white border border-gray-300 rounded-full flex items-center justify-center hover:bg-gray-50 hover:border-[#f04e00] transition-all duration-200 disabled:opacity-40 disabled:cursor-not-allowed"
          onclick="slideCarousel('next')"
        >
          <i class="fas fa-chevron-right text-gray-600"></i>
        </button>
      </div>
    </div>

    <!-- Carrusel -->
    <div class="relative overflow-hidden" id="carousel-wrapper">
      <div 
        id="carousel-container" 
        class="flex transition-transform duration-300 ease-out gap-4"
        style="transform: translateX(0px)"
      >
        {agentProperties.map((property, index) => (
          <div class="flex-shrink-0 w-72 carousel-item">
            <a 
              href={property.url?.startsWith('/') ? property.url : `/${property.url}`}
              class="group block bg-white rounded-2xl shadow-sm hover:shadow-lg transition-all duration-500 overflow-hidden border border-gray-100 hover:border-gray-200"
            >
              <!-- Imagen más compacta -->
              <div class="relative h-40 overflow-hidden">
                <img 
                  src={property.imagen || '/images/placeholder-property.jpg'}
                  alt={property.titulo}
                  class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                  loading="lazy"
                  onerror="this.src='/images/placeholder-property.jpg'"
                />
                
                <!-- Badges minimalistas -->
                <div class="absolute top-3 left-3 flex gap-2">
                  <span class="bg-white/95 backdrop-blur-sm text-gray-700 px-3 py-1 rounded-full text-xs font-medium border border-white/50">
                    {property.operacion || 'Venta'}
                  </span>
                  
                  <span class="bg-black/70 backdrop-blur-sm text-white px-3 py-1 rounded-full text-xs font-medium">
                    {property.tipo || 'Propiedad'}
                  </span>
                </div>
                
                <!-- Overlay sutil -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>
              
              <!-- Contenido más compacto pero con iconos -->
              <div class="p-4">
                <!-- Ubicación compacta con pin -->
                <div class="flex items-center gap-1 mb-2">
                  <i class="fas fa-map-marker-alt text-gray-400 text-xs"></i>
                  <p class="text-xs text-gray-500 font-medium">
                    {property.sector || 'Santo Domingo'}
                  </p>
                </div>
                
                <!-- Título más pequeño -->
                <h3 class="text-sm font-semibold text-gray-900 mb-3 group-hover:text-[#f04e00] transition-colors line-clamp-2 leading-tight">
                  {property.titulo}
                </h3>
                
                <!-- Características con iconos pero compactas -->
                <div class="flex items-center gap-3 mb-3 text-xs text-gray-600">
                  <div class="flex items-center gap-1">
                    <i class="fas fa-bed text-[#f04e00]"></i>
                    <span class="font-medium">{property.habitaciones}</span>
                  </div>
                  
                  <div class="flex items-center gap-1">
                    <i class="fas fa-shower text-[#f04e00]"></i>
                    <span class="font-medium">{property.banos}</span>
                  </div>
                  
                  <div class="flex items-center gap-1">
                    <i class="fas fa-ruler-combined text-[#f04e00]"></i>
                    <span class="font-medium">{property.metros}m²</span>
                  </div>
                  
                  {(property.parking_spots || property.parqueos) && (
                    <div class="flex items-center gap-1">
                      <i class="fas fa-car text-[#f04e00]"></i>
                      <span class="font-medium">{property.parking_spots || property.parqueos}</span>
                    </div>
                  )}
                </div>
                
                <!-- Precio con flecha útil -->
                <div class="flex items-center justify-between">
                  <span class="text-lg font-bold text-[#f04e00] group-hover:text-[#e03400] transition-colors">
                    {property.precio}
                  </span>
                  
                  <!-- Flecha que hace sentido -->
                  <i class="fas fa-arrow-right text-gray-400 group-hover:text-[#f04e00] transition-colors text-sm"></i>
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>
    </div>

    <!-- Indicadores de posición -->
    <div class="flex items-center justify-center gap-2 mt-4">
      <div class="flex gap-1" id="carousel-dots">
        <!-- Los dots se generarán dinámicamente con JavaScript -->
      </div>
    </div>

    <!-- Ver todas las propiedades del asesor -->
    {agentPropertiesInfo.total_found > agentProperties.length && (
      <div class="text-center pt-4 border-t border-gray-200">
        <a 
          href={`/asesor/${agent.id || agent.uuid}/propiedades`}
          class="inline-flex items-center gap-2 text-[#f04e00] hover:text-[#d94400] font-medium text-sm transition-colors"
        >
          <span>Ver todas las {agentPropertiesInfo.total_found} propiedades de {agent.name || 'este asesor'}</span>
          <i class="fas fa-arrow-right text-xs"></i>
        </a>
      </div>
    )}
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Estilos del carrusel */
  #carousel-container {
    scroll-behavior: smooth;
  }

  .carousel-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #d1d5db;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-dot.active {
    background: #f04e00;
    transform: scale(1.2);
  }

  .carousel-dot:hover {
    background: #f04e00;
  }

  /* 🆕 Estilos para carrusel expandido por el layout */
  .carousel-full-width #carousel-container {
    gap: 1.5rem; /* Aumentar gap cuando está expandido */
  }

  .carousel-full-width .carousel-item {
    width: 20rem; /* w-80 en lugar de w-72 cuando está expandido */
  }

  /* Responsive adjustments para carrusel expandido */
  @media (min-width: 1536px) {
    .carousel-full-width .carousel-item {
      width: 22rem; /* Aún más ancho en pantallas muy grandes */
    }
  }
</style>

<script>
  // Estado del carrusel
  let currentSlide = 0;
  let maxSlides = 0;
  let itemWidth = 300; // Base width
  let visibleItems = 1;
  let isLayoutControlled = false;

  // 🎯 Función para detectar si el layout está controlando la expansión
  function checkLayoutControl() {
    const carouselSection = document.getElementById('agent-properties-carousel-section');
    isLayoutControlled = carouselSection && carouselSection.hasAttribute('data-layout-controlled');
    
    if (isLayoutControlled) {
      console.log('🎠 Carrusel bajo control del layout - sistema de componente desactivado');
      
      // Ajustar el ancho de items si está expandido por el layout
      const isExpanded = carouselSection.classList.contains('carousel-full-width');
      if (isExpanded) {
        itemWidth = 320; // Ajustar para items más anchos
        console.log('🎠 Carrusel expandido por layout - ajustando itemWidth a', itemWidth);
      } else {
        itemWidth = 288; // w-72 = 288px
      }
      
      return true;
    }
    
    return false;
  }

  // 🚫 Función deshabilitada - ya no se usa expansión manual del componente
  function shouldExpandCarousel() {
    // 🚫 Si el layout ya está controlando la expansión, no hacer nada
    if (checkLayoutControl()) {
      return false;
    }
    
    // Si no está bajo control del layout, usar lógica básica conservadora
    const viewportWidth = window.innerWidth;
    if (viewportWidth < 1024) return false;
    
    // Solo expandir si hay evidencia clara de espacio libre
    const carouselSection = document.getElementById('agent-properties-carousel-section');
    if (!carouselSection) return false;
    
    // Lógica muy conservadora - solo expandir si realmente es obvio
    const sidebar = document.querySelector('aside');
    if (!sidebar) {
      console.log('🎠 No se encontró sidebar - expansión del componente deshabilitada');
      return false; // Cambiado de true a false para ser más conservador
    }
    
    return false; // Por defecto no expandir - dejar que el layout maneje esto
  }

  // 🚫 Función deshabilitada - ya no se modifica el DOM manualmente
  function expandCarouselIfNeeded() {
    // Solo verificar el control del layout, no hacer expansión manual
    checkLayoutControl();
  }

  // Función para calcular cuántos elementos son visibles
  function calculateVisibleItems() {
    const container = document.getElementById('carousel-container');
    if (!container) return 1;
    
    const containerWidth = container.parentElement.offsetWidth;
    
    // Usar el itemWidth actualizado basado en el estado del layout
    const effectiveItemWidth = itemWidth + 16; // Incluir gap
    visibleItems = Math.floor(containerWidth / effectiveItemWidth);
    
    console.log('🎠 Calculando elementos visibles:', {
      containerWidth,
      itemWidth,
      effectiveItemWidth,
      visibleItems: Math.max(1, visibleItems),
      isLayoutControlled
    });
    
    return Math.max(1, visibleItems);
  }

  // Función para actualizar el estado de los botones
  function updateButtons() {
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    
    if (prevBtn) prevBtn.disabled = currentSlide === 0;
    if (nextBtn) nextBtn.disabled = currentSlide >= maxSlides - 1;
  }

  // Función para crear los dots
  function createDots() {
    const dotsContainer = document.getElementById('carousel-dots');
    if (!dotsContainer) return;
    
    dotsContainer.innerHTML = '';
    
    for (let i = 0; i < maxSlides; i++) {
      const dot = document.createElement('div');
      dot.className = `carousel-dot ${i === currentSlide ? 'active' : ''}`;
      dot.onclick = () => goToSlide(i);
      dotsContainer.appendChild(dot);
    }
  }

  // Función para actualizar los dots
  function updateDots() {
    const dots = document.querySelectorAll('.carousel-dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentSlide);
    });
  }

  // Función para ir a una diapositiva específica
  function goToSlide(slideIndex) {
    currentSlide = Math.max(0, Math.min(slideIndex, maxSlides - 1));
    
    const container = document.getElementById('carousel-container');
    if (container) {
      const gap = 16; // gap-4 = 16px
      const translateX = -(currentSlide * (itemWidth + gap));
      container.style.transform = `translateX(${translateX}px)`;
    }
    
    updateButtons();
    updateDots();
  }

  // Función principal del carrusel
  window.slideCarousel = function(direction) {
    if (direction === 'next' && currentSlide < maxSlides - 1) {
      goToSlide(currentSlide + 1);
    } else if (direction === 'prev' && currentSlide > 0) {
      goToSlide(currentSlide - 1);
    }
  };

  // Función para inicializar el carrusel
  function initCarousel() {
    const container = document.getElementById('carousel-container');
    if (!container) return;
    
    const items = container.children.length;
    if (items === 0) return;
    
    // 🎯 Verificar control del layout ANTES de calcular
    checkLayoutControl();
    
    calculateVisibleItems();
    maxSlides = Math.max(1, items - visibleItems + 1);
    
    // Solo mostrar controles si hay más elementos que los visibles
    const showControls = items > visibleItems;
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    const dotsContainer = document.getElementById('carousel-dots');
    
    if (prevBtn) prevBtn.style.display = showControls ? 'flex' : 'none';
    if (nextBtn) nextBtn.style.display = showControls ? 'flex' : 'none';
    if (dotsContainer) dotsContainer.style.display = showControls ? 'flex' : 'none';
    
    if (showControls) {
      createDots();
      updateButtons();
    }
    
    console.log('🎠 Carrusel inicializado:', {
      totalItems: items,
      visibleItems: visibleItems,
      maxSlides: maxSlides,
      showControls: showControls,
      isLayoutControlled: isLayoutControlled,
      itemWidth: itemWidth
    });
  }

  // Función para manejar el resize
  function handleResize() {
    const oldVisibleItems = visibleItems;
    const oldLayoutControlled = isLayoutControlled;
    
    checkLayoutControl();
    calculateVisibleItems();
    
    if (oldVisibleItems !== visibleItems || oldLayoutControlled !== isLayoutControlled) {
      initCarousel();
      goToSlide(0); // Resetear a la primera diapositiva
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    // Esperar un poco para que el layout se estabilice
    setTimeout(() => {
      initCarousel();
    }, 250);
  });

  // Manejar resize de ventana
  window.addEventListener('resize', handleResize);

  // 🎯 Observer para detectar cambios en el atributo data-layout-controlled
  if (window.MutationObserver) {
    const carouselSection = document.getElementById('agent-properties-carousel-section');
    if (carouselSection) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && 
              (mutation.attributeName === 'data-layout-controlled' || 
               mutation.attributeName === 'class')) {
            console.log('🎠 Detectado cambio en control del layout - reinicializando');
            setTimeout(() => {
              initCarousel();
            }, 100);
          }
        });
      });
      
      observer.observe(carouselSection, {
        attributes: true,
        attributeFilter: ['data-layout-controlled', 'class']
      });

      // 🔄 ESCUCHAR evento personalizado de cambio de layout
      carouselSection.addEventListener('carousel-layout-changed', (event) => {
        console.log('🎠 Evento de cambio de layout recibido:', event.detail);
        
        // Reinicializar completamente el carrusel
        setTimeout(() => {
          // Resetear estado
          currentSlide = 0;
          
          // Forzar recálculo de todo
          checkLayoutControl();
          initCarousel();
          
          // Ir a la primera slide para asegurar posición correcta
          goToSlide(0);
          
          console.log('🎠 Carrusel reinicializado después del cambio de layout');
        }, 200);
      });
    }
  }

  // Soporte para navegación con teclado
  document.addEventListener('keydown', function(e) {
    if (e.target.closest('#carousel-container')) {
      if (e.key === 'ArrowLeft') {
        e.preventDefault();
        slideCarousel('prev');
      } else if (e.key === 'ArrowRight') {
        e.preventDefault();
        slideCarousel('next');
      }
    }
  });
</script>