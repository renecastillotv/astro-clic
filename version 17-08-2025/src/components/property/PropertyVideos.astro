---
// src/components/property/PropertyVideos.astro
export interface Props {
  data: any;
}

const { data } = Astro.props;

const property = data.property || {};

// ‚úÖ USAR DIRECTAMENTE LOS VIDEOS PROCESADOS DEL PROVIDER
const displayContent = data.displayContent?.videos;
const mainVideo = displayContent?.mainVideo;
const additionalVideos = displayContent?.additionalVideos || [];

// ‚úÖ Logs del servidor (para ver si se ejecutan)
console.log('üé¨ === PropertyVideos SERVER LOGS ===');
console.log('üì¶ DisplayContent en servidor:', !!displayContent);
console.log('üéØ MainVideo en servidor:', !!mainVideo);
console.log('üé¨ AdditionalVideos en servidor:', additionalVideos.length);

// ‚úÖ Fallback solo si no hay videos procesados del provider
const fallbackVideo = {
  id: 'psoIb7wi5_4',
  title: `Recorrido Virtual - ${property.title || 'Propiedad'}`,
  url: 'https://www.youtube.com/watch?v=psoIb7wi5_4',
  embedUrl: 'https://www.youtube.com/embed/psoIb7wi5_4?rel=0&modestbranding=1&showinfo=0&color=white&iv_load_policy=3',
  description: 'Descubre cada detalle de esta incre√≠ble propiedad en un recorrido virtual completo.',
  duration: '5:23',
  thumbnail: 'https://img.youtube.com/vi/psoIb7wi5_4/maxresdefault.jpg',
  source: 'fallback'
};

// ‚úÖ Usar videos del provider o fallback
const videoToShow = mainVideo || fallbackVideo;
const hasProcessedVideos = !!(displayContent?.totalCount > 0);
---

<!-- Tour Virtual y Videos -->
{(hasProcessedVideos || !mainVideo) && (
  <div class="space-y-6">
    <h2 class="text-2xl font-bold text-gray-900 border-b-2 border-[#f04e00] pb-2 inline-block">
      Videos de la Propiedad
    </h2>
    
    <!-- Script para logs del lado del cliente y exposici√≥n de datos -->
    <script is:inline define:vars={{ 
      displayContent, 
      mainVideo, 
      additionalVideos, 
      hasProcessedVideos,
      propertyTitle: property.title,
      fullData: data
    }}>
      // üîç EXPONER DATOS GLOBALMENTE PARA DEBUGGING (mejorado)
      if (typeof window !== 'undefined') {
        window.propertyData = fullData;
        window.propertyVideoData = {
          displayContent,
          mainVideo,
          additionalVideos,
          hasProcessedVideos
        };
        
        // Tambi√©n asegurar que los datos persistan
        console.log('üåê Datos expuestos globalmente:', {
          propertyData: !!window.propertyData,
          videoData: !!window.propertyVideoData
        });
      }
      
      // üîç LOGS EN EL CLIENTE PARA VER QU√â RECIBE EL COMPONENTE
      console.log('üé¨ === COMPONENTE PropertyVideos (CLIENTE) ===');
      console.log('üì¶ DisplayContent recibido:', displayContent);
      console.log('üéØ MainVideo recibido:', mainVideo);
      console.log('üé¨ AdditionalVideos recibidos:', additionalVideos);
      console.log('üìä Estad√≠sticas del componente:', {
        hasDisplayContent: !!displayContent,
        totalCount: displayContent?.totalCount || 0,
        sources: displayContent?.sources || [],
        mainVideoExists: !!mainVideo,
        additionalCount: additionalVideos?.length || 0,
        finalRenderCount: (mainVideo ? 1 : 0) + (additionalVideos?.length || 0)
      });
      
      if (additionalVideos && additionalVideos.length > 0) {
        console.log('üé¨ Videos adicionales detallados:');
        additionalVideos.forEach((video, index) => {
          console.log(`  [${index}] ${video?.title || 'Sin t√≠tulo'}`, {
            id: video?.id,
            source: video?.source,
            hasEmbedUrl: !!video?.embedUrl,
            hasThumbnail: !!video?.thumbnail
          });
        });
      }
      
      // ‚úÖ LOGS DIRECTOS DE LOS DATOS RECIBIDOS
      console.log('üìÑ === DATOS RAW COMPLETOS (DEBUGGING) ===');
      console.log('üîç FullData completo:', fullData);
      console.log('üé• content.videos:', fullData?.content?.videos || 'undefined');
      console.log('üé• relatedContent.videos:', fullData?.relatedContent?.videos || 'undefined');
      console.log('üé• relatedContent completo:', fullData?.relatedContent || 'undefined');
      console.log('üé• content completo:', fullData?.content || 'undefined');
      console.log('üé• seo_content videos:', fullData?.content?.seo_content?.filter?.(item => item.content_type === 'video') || 'undefined');
      console.log('üîç DisplayContent desde fullData:', fullData?.displayContent || 'undefined');
      
      // ‚úÖ VERIFICAR SI HAY DATOS EN OTRAS UBICACIONES
      console.log('üîç === B√öSQUEDA EXHAUSTIVA DE VIDEOS ===');
      const searchForVideos = (obj, path = '') => {
        if (!obj || typeof obj !== 'object') return;
        
        Object.keys(obj).forEach(key => {
          const currentPath = path ? `${path}.${key}` : key;
          const value = obj[key];
          
          if (key.toLowerCase().includes('video') && Array.isArray(value) && value.length > 0) {
            console.log(`üìπ Encontrados videos en ${currentPath}:`, value);
          }
          
          if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
            searchForVideos(value, currentPath);
          }
        });
      };
      
      searchForVideos(fullData);
    </script>
    
    <div class="space-y-6">
      {/* Video Principal - Usa datos del provider */}
      <div class="space-y-4">
        {/* Container responsivo mejorado */}
        <div class="relative w-full aspect-video rounded-2xl overflow-hidden shadow-xl bg-gray-900 border border-gray-200">
          <iframe
            src={videoToShow.embedUrl}
            title={videoToShow.title}
            class="absolute inset-0 w-full h-full"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowfullscreen
            loading="lazy">
          </iframe>
        </div>
        
        {/* Informaci√≥n mejorada del video principal */}
        <div class="bg-gray-50 rounded-xl p-4 border border-gray-100">
          <div class="flex items-start justify-between gap-4">
            <div class="flex-1">
              <h3 class="text-lg font-bold text-gray-900 mb-2">
                {videoToShow.title}
              </h3>
              {videoToShow.description && (
                <p class="text-gray-600 text-sm leading-relaxed mb-3">
                  {videoToShow.description.length > 150 ? 
                    `${videoToShow.description.substring(0, 150)}...` : 
                    videoToShow.description
                  }
                </p>
              )}
            </div>
            
            <div class="flex flex-col items-end gap-2 flex-shrink-0">
              {videoToShow.duration && (
                <div class="flex items-center gap-2 text-sm text-gray-500 bg-white px-3 py-1 rounded-full">
                  <i class="fas fa-clock text-xs"></i>
                  <span>{videoToShow.duration}</span>
                </div>
              )}
              
              <div class="flex items-center gap-2 text-sm text-red-600 bg-white px-3 py-1 rounded-full">
                <i class="fab fa-youtube text-sm"></i>
                <span>YouTube</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Videos Adicionales - Solo si hay videos del provider */}
      {additionalVideos.length > 0 && (
        <div class="space-y-4">
          <h4 class="text-lg font-semibold text-gray-900 flex items-center gap-2">
            <i class="fas fa-video text-[#f04e00]"></i>
            Videos Relacionados
            <span class="text-sm text-gray-500 font-normal">({additionalVideos.length})</span>
          </h4>
          
          <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
            {additionalVideos.map((video, index) => (
              <div class="group cursor-pointer bg-white rounded-xl overflow-hidden border border-gray-100 hover:border-gray-200 hover:shadow-lg transition-all duration-300" 
                   onclick={`openVideoModal('${video.id}', '${video.title.replace(/'/g, "\\\'")}')`}>
                
                <div class="relative aspect-video bg-gray-900">
                  {/* Thumbnail */}
                  <img 
                    src={video.thumbnail}
                    alt={video.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                    loading="lazy"
                    onerror={`this.src='https://img.youtube.com/vi/${video.id}/hqdefault.jpg'`}
                  />
                  
                  {/* Overlay de play */}
                  <div class="absolute inset-0 bg-black/30 group-hover:bg-black/20 transition-colors duration-300 flex items-center justify-center">
                    <div class="w-14 h-14 bg-white/90 rounded-full flex items-center justify-center shadow-lg group-hover:scale-110 group-hover:bg-white transition-all duration-300">
                      <i class="fas fa-play text-[#f04e00] text-lg ml-0.5"></i>
                    </div>
                  </div>
                  
                  {/* Duraci√≥n */}
                  {video.duration && (
                    <div class="absolute bottom-2 right-2 bg-black/80 text-white text-xs px-2 py-1 rounded-md font-medium">
                      {video.duration}
                    </div>
                  )}
                </div>
                
                {/* Informaci√≥n del video */}
                <div class="p-4">
                  <h5 class="font-semibold text-gray-900 text-sm group-hover:text-[#f04e00] transition-colors mb-2 line-clamp-2 leading-tight">
                    {video.title}
                  </h5>
                  
                  {video.description && (
                    <p class="text-xs text-gray-500 line-clamp-2 leading-relaxed mb-3">
                      {video.description.length > 60 ? 
                        `${video.description.substring(0, 60)}...` : 
                        video.description
                      }
                    </p>
                  )}
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-1 text-xs text-gray-400">
                      <i class="fab fa-youtube"></i>
                      <span>YouTube</span>
                    </div>
                    
                    <span class="text-xs text-[#f04e00] font-medium">
                      Video
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Call to Action */}
      <div class="bg-white rounded-lg p-6 border border-gray-200 shadow-sm">
        <div class="text-center space-y-4">
          <div class="flex items-center justify-center gap-2 text-[#f04e00]">
            <i class="fas fa-video text-xl"></i>
            <span class="font-bold text-lg">¬øQuieres ver m√°s?</span>
          </div>
          
          <p class="text-gray-600 text-sm max-w-md mx-auto">
            Agenda una visita personalizada o solicita un video tour privado de esta incre√≠ble propiedad
          </p>
          
          <div class="flex flex-col sm:flex-row gap-3 justify-center">
            <button 
              onclick="requestPropertyVisit()"
              class="inline-flex items-center justify-center gap-2 bg-[#f04e00] text-white px-6 py-3 rounded-lg font-semibold hover:bg-[#d94400] transition-all duration-300 hover:shadow-lg"
            >
              <i class="fas fa-calendar-check"></i>
              <span>Agendar Visita</span>
            </button>
            
            <a 
              href="tel:+18295148080"
              class="inline-flex items-center justify-center gap-2 border-2 border-[#f04e00] text-[#f04e00] px-6 py-3 rounded-lg font-semibold hover:bg-[#f04e00] hover:text-white transition-all duration-300"
            >
              <i class="fas fa-phone"></i>
              <span>Llamar Ahora</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>