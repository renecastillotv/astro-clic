---
// components/propertylist/PropertyListStats.astro
export interface Props {
  properties: any[];
  searchInfo: {
    location?: string;
    propertyType?: string;
    operation?: string;
  };
  showMarketData?: boolean;
}

const { properties, searchInfo, showMarketData = true } = Astro.props;

// Detectar moneda predominante y tasa de cambio
function detectCurrencyAndRate(properties) {
  let usdCount = 0;
  let dopCount = 0;
  
  properties.forEach(p => {
    const priceText = p.precio || '';
    if (priceText.includes('USD') || (priceText.includes('$') && !priceText.includes('RD$'))) {
      usdCount++;
    } else if (priceText.includes('RD$') || priceText.includes('DOP')) {
      dopCount++;
    }
  });
  
  const predominantCurrency = usdCount >= dopCount ? 'USD' : 'DOP';
  const exchangeRate = 60; // Tasa aproximada USD to DOP
  
  return { predominantCurrency, exchangeRate, usdCount, dopCount };
}

// Extraer precio numérico y moneda de una propiedad
function extractPriceAndCurrency(property) {
  let amount = 0;
  let currency = 'USD';
  
  // Intentar primero con pricing_unified
  if (property.pricing_unified?.display_price?.amount) {
    amount = property.pricing_unified.display_price.amount;
    currency = property.pricing_unified.display_price.currency || 'USD';
  } else if (property.precio) {
    // Fallback: extraer del string de precio
    const priceText = property.precio;
    
    // Detectar moneda
    if (priceText.includes('RD$') || priceText.includes('DOP')) {
      currency = 'DOP';
    } else if (priceText.includes('USD') || priceText.includes('$')) {
      currency = 'USD';
    }
    
    // Extraer número
    const numbers = priceText.match(/[\d,]+/g);
    if (numbers && numbers.length > 0) {
      // Tomar el número más grande (precio principal)
      const cleanedNumbers = numbers.map(n => parseInt(n.replace(/,/g, '')));
      amount = Math.max(...cleanedNumbers);
    }
  }
  
  return { amount, currency };
}

// Convertir precio a moneda base
function convertToBaseCurrency(amount, fromCurrency, toCurrency, exchangeRate) {
  if (fromCurrency === toCurrency) return amount;
  
  if (fromCurrency === 'DOP' && toCurrency === 'USD') {
    return amount / exchangeRate;
  } else if (fromCurrency === 'USD' && toCurrency === 'DOP') {
    return amount * exchangeRate;
  }
  
  return amount;
}

// Calcular estadísticas dinámicas con manejo de múltiples monedas
function calculateStats(properties) {
  if (!properties || properties.length === 0) {
    return {
      totalProperties: 0,
      avgPrice: 0,
      minPrice: 0,
      maxPrice: 0,
      avgBedrooms: 0,
      avgArea: 0,
      pricePerSqm: 0,
      currency: 'USD',
      mixedCurrencies: false,
      currencyBreakdown: { USD: 0, DOP: 0 }
    };
  }

  // Detectar moneda predominante
  const { predominantCurrency, exchangeRate, usdCount, dopCount } = detectCurrencyAndRate(properties);
  const mixedCurrencies = usdCount > 0 && dopCount > 0;

  // Extraer y convertir precios
  const processedPrices = properties
    .map(p => {
      const { amount, currency } = extractPriceAndCurrency(p);
      if (amount > 0) {
        const convertedAmount = convertToBaseCurrency(amount, currency, predominantCurrency, exchangeRate);
        return convertedAmount;
      }
      return 0;
    })
    .filter(price => price > 0);

  // Calcular estadísticas de habitaciones
  const bedrooms = properties
    .map(p => p.habitaciones || 0)
    .filter(beds => beds > 0);

  // Calcular estadísticas de áreas
  const areas = properties
    .map(p => p.metros || 0)
    .filter(area => area > 0);

  return {
    totalProperties: properties.length,
    avgPrice: processedPrices.length > 0 ? Math.round(processedPrices.reduce((a, b) => a + b, 0) / processedPrices.length) : 0,
    minPrice: processedPrices.length > 0 ? Math.min(...processedPrices) : 0,
    maxPrice: processedPrices.length > 0 ? Math.max(...processedPrices) : 0,
    avgBedrooms: bedrooms.length > 0 ? Math.round(bedrooms.reduce((a, b) => a + b, 0) / bedrooms.length * 10) / 10 : 0,
    avgArea: areas.length > 0 ? Math.round(areas.reduce((a, b) => a + b, 0) / areas.length) : 0,
    pricePerSqm: processedPrices.length > 0 && areas.length > 0 ? 
      Math.round((processedPrices.reduce((a, b) => a + b, 0) / processedPrices.length) / (areas.reduce((a, b) => a + b, 0) / areas.length)) : 0,
    currency: predominantCurrency,
    mixedCurrencies: mixedCurrencies,
    currencyBreakdown: { USD: usdCount, DOP: dopCount }
  };
}

const stats = calculateStats(properties);

// Formatear números
function formatPrice(price, currency = 'USD') {
  const prefix = currency === 'DOP' ? 'RD$' : '$';
  
  if (price >= 1000000) {
    return `${prefix}${(price / 1000000).toFixed(1)}M`;
  }
  if (price >= 1000) {
    return `${prefix}${(price / 1000).toFixed(0)}K`;
  }
  return `${prefix}${price.toLocaleString()}`;
}

function formatNumber(num) {
  return num.toLocaleString();
}
---

{showMarketData && stats.totalProperties > 0 && (
  <section class="bg-white py-8 border-b border-gray-200">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        
        <!-- Header de estadísticas -->
        <div class="text-center mb-8">
          <h3 class="text-xl font-bold text-gray-900 mb-2">
            Estadísticas del Mercado
            {searchInfo.propertyType && searchInfo.location && (
              <span class="text-[#f04e00]"> - {searchInfo.propertyType}s en {searchInfo.location}</span>
            )}
          </h3>
          <p class="text-gray-600">
            Datos actualizados basados en {formatNumber(stats.totalProperties)} propiedades disponibles
          </p>
        </div>

        <!-- Grid de estadísticas -->
        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
          
          <!-- Precio Promedio -->
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl text-center border border-blue-200">
            <div class="text-2xl font-bold text-blue-900 mb-1">
              {formatPrice(stats.avgPrice, stats.currency)}
            </div>
            <div class="text-xs text-blue-700 font-medium">Precio Promedio</div>
            {stats.mixedCurrencies && (
              <div class="text-xs text-blue-600 mt-1">
                ({stats.currency} base)
              </div>
            )}
          </div>
          
          <!-- Rango de Precios -->
          <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl text-center border border-green-200">
            <div class="text-sm font-bold text-green-900 mb-1">
              {formatPrice(stats.minPrice, stats.currency)} - {formatPrice(stats.maxPrice, stats.currency)}
            </div>
            <div class="text-xs text-green-700 font-medium">Rango de Precios</div>
            {stats.mixedCurrencies && (
              <div class="text-xs text-green-600 mt-1">
                Convertido a {stats.currency}
              </div>
            )}
          </div>
          
          <!-- Habitaciones Promedio -->
          {stats.avgBedrooms > 0 && (
            <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl text-center border border-purple-200">
              <div class="text-2xl font-bold text-purple-900 mb-1">
                {stats.avgBedrooms}
              </div>
              <div class="text-xs text-purple-700 font-medium">Habitaciones Prom.</div>
            </div>
          )}
          
          <!-- Área Promedio -->
          {stats.avgArea > 0 && (
            <div class="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl text-center border border-orange-200">
              <div class="text-2xl font-bold text-orange-900 mb-1">
                {formatNumber(stats.avgArea)}m²
              </div>
              <div class="text-xs text-orange-700 font-medium">Área Promedio</div>
            </div>
          )}
          
          <!-- Precio por m² -->
          {stats.pricePerSqm > 0 && (
            <div class="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl text-center border border-red-200">
              <div class="text-sm font-bold text-red-900 mb-1">
                {formatPrice(stats.pricePerSqm, stats.currency)}/m²
              </div>
              <div class="text-xs text-red-700 font-medium">Precio por m²</div>
            </div>
          )}
          
          <!-- Total Disponibles -->
          <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-4 rounded-xl text-center border border-gray-200">
            <div class="text-2xl font-bold text-gray-900 mb-1">
              {formatNumber(stats.totalProperties)}
            </div>
            <div class="text-xs text-gray-700 font-medium">Disponibles</div>
          </div>
        </div>

        <!-- Insights adicionales con información de monedas mixtas -->
        <div class="mt-6 p-4 bg-gradient-to-r from-[#f04e00]/10 to-orange-100 rounded-xl border border-orange-200">
          <div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#f04e00] rounded-full flex items-center justify-center flex-shrink-0 mt-1">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="font-semibold text-[#f04e00] mb-1">Insight del Mercado</h4>
              <p class="text-sm text-gray-700">
                {searchInfo.location && searchInfo.propertyType ? (
                  `El mercado de ${searchInfo.propertyType.toLowerCase()}s en ${searchInfo.location} muestra un precio promedio de ${formatPrice(stats.avgPrice, stats.currency)}. ${stats.pricePerSqm > 0 ? `Con un costo por metro cuadrado de ${formatPrice(stats.pricePerSqm, stats.currency)}, ` : ''}esta zona ofrece excelentes oportunidades de inversión.`
                ) : (
                  `Con ${formatNumber(stats.totalProperties)} propiedades disponibles y un precio promedio de ${formatPrice(stats.avgPrice, stats.currency)}, el mercado muestra una oferta diversa para diferentes presupuestos.`
                )}
                {stats.mixedCurrencies && (
                  ` Los precios se muestran convertidos a ${stats.currency} (${stats.currencyBreakdown.USD} en USD, ${stats.currencyBreakdown.DOP} en RD$).`
                )}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
)}

<!-- Versión compacta para pocas propiedades -->
{!showMarketData && stats.totalProperties > 0 && stats.totalProperties <= 10 && (
  <div class="bg-gray-50 py-3 border-b border-gray-200">
    <div class="container mx-auto px-4">
      <div class="flex items-center justify-center gap-6 text-sm text-gray-600">
        <span class="flex items-center gap-2">
          <svg class="w-4 h-4 text-[#f04e00]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h4M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10V9a1 1 0 011-1h4a1 1 0 011 1v12m-6 0h6"></path>
          </svg>
          <strong>{formatNumber(stats.totalProperties)}</strong> propiedades
        </span>
        {stats.avgPrice > 0 && (
          <span class="flex items-center gap-2">
            <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
            Promedio: <strong>{formatPrice(stats.avgPrice, stats.currency)}</strong>
          </span>
        )}
        {stats.minPrice > 0 && stats.maxPrice > stats.minPrice && (
          <span class="flex items-center gap-2">
            <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4"></path>
            </svg>
            Desde: <strong>{formatPrice(stats.minPrice, stats.currency)}</strong>
          </span>
        )}
      </div>
    </div>
  </div>
)}