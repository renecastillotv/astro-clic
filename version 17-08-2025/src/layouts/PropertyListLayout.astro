---
// src/layouts/PropertyListLayout.astro - VERSIÓN ACTUALIZADA CON PropertySeoContent
import Layout from './Layout.astro';
import PropertyList from '../components/PropertyList.astro';

// Importar componentes modulares existentes
import PropertyListHeader from '../components/propertylist/PropertyListHeader.astro';
import PropertyListCTA from '../components/propertylist/PropertyListCTA.astro';
import PropertyListFilters from '../components/propertylist/PropertyListFilters.astro';
import PropertyListStats from '../components/propertylist/PropertyListStats.astro';

// Importar nuevos componentes especializados
import SectorHighlights from '../components/propertylist/SectorHighlights.astro';
import InteractiveNeighborhoodMap from '../components/propertylist/InteractiveNeighborhoodMap.astro';

// Importar componentes generales para el contenido enriquecido
import PropertyCarousel from '../components/PropertyCarousel.astro';
import DynamicFAQs from '../components/DynamicFAQs.astro';
import RelatedArticles from '../components/RelatedArticles.astro';
import VideoGallery from '../components/VideoGallery.astro';

// ✅ CAMBIO PRINCIPAL: Usar PropertySeoContent en lugar de PropertyListSEOContent
import PropertySeoContent from '../components/PropertySeoContent.astro';

const { data } = Astro.props;

// ===================================================================
// FUNCIONES UTILITARIAS
// ===================================================================

// Función para extraer información de los tags de manera dinámica
function extractInfoFromTags(tags) {
  const info = {
    location: null,
    propertyType: null,
    operation: null,
    sector: null,
    province: null,
    features: []
  };

  tags.forEach(tag => {
    switch(tag.category) {
      case 'ciudad':
        info.location = tag.display_name || tag.name;
        break;
      case 'sector': 
        info.sector = tag.display_name || tag.name;
        break;
      case 'provincia':
        info.province = tag.display_name || tag.name;
        break;
      case 'categoria':
      case 'property_type':
        info.propertyType = tag.display_name || tag.name;
        break;
      case 'operacion':
      case 'operation':
        info.operation = tag.display_name || tag.name;
        break;
      case 'caracteristica':
      case 'amenity':
        info.features.push(tag.display_name || tag.name);
        break;
    }
  });

  return info;
}

// Función para normalizar texto mejorada
function normalizeText(text) {
  if (!text) return text;
  
  return text
    // Corregir plurales duplicados específicos
    .replace(/apartamentoss/gi, 'apartamentos')
    .replace(/apartamentoo/gi, 'apartamento')
    .replace(/casass/gi, 'casas')
    .replace(/casaa/gi, 'casa')
    .replace(/villass/gi, 'villas')
    .replace(/villaa/gi, 'villa')
    .replace(/proyectoss/gi, 'proyectos')
    .replace(/proyectoo/gi, 'proyecto')
    .replace(/propiedadess/gi, 'propiedades')
    .replace(/propiedadd/gi, 'propiedad')
    .replace(/localess/gi, 'locales')
    .replace(/locall/gi, 'local')
    .replace(/terrenoss/gi, 'terrenos')
    .replace(/terrenoo/gi, 'terreno')
    .replace(/penthousess/gi, 'penthouses')
    .replace(/penthousee/gi, 'penthouse')
    
    // Corregir operaciones duplicadas
    .replace(/comprarr/gi, 'comprar')
    .replace(/ventaa/gi, 'venta')
    .replace(/ventass/gi, 'ventas')
    .replace(/alquilerr/gi, 'alquiler')
    .replace(/alquileress/gi, 'alquileres')
    
    // Corregir ubicaciones comunes
    .replace(/santo\s+domingoo/gi, 'Santo Domingo')
    .replace(/punta\s+canaa/gi, 'Punta Cana')
    .replace(/santiagoo/gi, 'Santiago')
    
    // Limpiar espacios múltiples y trimear
    .replace(/\s+/g, ' ')
    .trim();
}

// Función para generar H1 SEO
function generateSEOH1(searchInfo, apiH1) {
  let seoH1 = apiH1;
  
  if (seoH1) {
    seoH1 = seoH1
      .replace(/\s*-\s*\d+\s*Propiedades?\s*Disponibles?/i, '')
      .replace(/\s*\(\d+\s*propiedades?\)/i, '')
      .trim();
  }

  if (!seoH1) {
    if (searchInfo.location && searchInfo.propertyType) {
      seoH1 = `${searchInfo.propertyType}s en ${searchInfo.location}`;
    } else if (searchInfo.sector && searchInfo.propertyType) {
      seoH1 = `${searchInfo.propertyType}s en ${searchInfo.sector}`;
    } else if (searchInfo.location) {
      seoH1 = `Propiedades en ${searchInfo.location}`;
    } else if (searchInfo.propertyType) {
      seoH1 = `${searchInfo.propertyType}s Disponibles`;
    } else {
      seoH1 = `Propiedades Disponibles`;
    }
  }

  // ✅ APLICAR NORMALIZACIÓN AL H1 FINAL
  return normalizeText(seoH1);
}

// Función para generar H2 SEO
function generateSEOH2(searchInfo) {
  const operation = searchInfo.operation || 'Comprar';

  let seoH2 = '';
  if (searchInfo.location && searchInfo.propertyType) {
    seoH2 = `${operation} ${searchInfo.propertyType}s de Calidad en ${searchInfo.location}`;
  } else if (searchInfo.location) {
    seoH2 = `${operation} tu Hogar Ideal en ${searchInfo.location}`;
  } else if (searchInfo.propertyType) {
    seoH2 = `${operation} ${searchInfo.propertyType}s con las Mejores Opciones`;
  } else {
    seoH2 = `${operation} Propiedades Verificadas`;
  }

  // ✅ APLICAR NORMALIZACIÓN AL H2 FINAL
  return normalizeText(seoH2);
}

// Función para extraer filtros activos de la URL
function extractActiveFiltersFromURL(pathname) {
  const segments = pathname.split('/').filter(Boolean);
  const filters = {};

  segments.forEach(segment => {
    if (['comprar', 'alquilar'].includes(segment)) {
      filters.operacion = segment;
    }
    else if (['apartamento', 'villa', 'casa', 'penthouse', 'terreno', 'local-comercial'].includes(segment)) {
      filters.tipo = segment;
    }
    else if (['distrito-nacional', 'santiago', 'punta-cana', 'puerto-plata'].includes(segment)) {
      filters.ubicacion = segment;
    }
    else if (['piantini', 'bella-vista', 'evaristo-morales', 'naco', 'bavaro', 'cap-cana'].includes(segment)) {
      filters.sector = segment;
    }
    else if (segment.includes('-habitaciones')) {
      const match = segment.match(/^(\d+|\d+\+)-habitaciones$/);
      if (match) filters.habitaciones = match[1];
    }
    else if (segment.includes('-banos')) {
      const match = segment.match(/^(\d+|\d+\+)-banos$/);
      if (match) filters.banos = match[1];
    }
    else if (segment.includes('-parqueos')) {
      const match = segment.match(/^(\d+|\d+\+)-parqueos$/);
      if (match) filters.parqueos = match[1];
    }
    else if (segment.includes('precio-desde-')) {
      filters.precio = segment;
    }
  });

  return filters;
}

// Generar carruseles especializados SOLO CON DATOS REALES DE LA API
function generateSpecializedCarousels(allProperties, searchContext, apiData) {
  const carousels = [];
  
  // PRIORIDAD 1: USAR CARRUSELES REALES DE LA API SI EXISTEN
  if (apiData.relatedContent?.carousels && apiData.relatedContent.carousels.length > 0) {
    console.log('✅ Usando carruseles reales de la API:', apiData.relatedContent.carousels.length);
    return apiData.relatedContent.carousels.map(carousel => ({
      title: carousel.title || carousel.name,
      subtitle: carousel.subtitle || carousel.description,
      properties: carousel.properties || carousel.listings || [],
      viewAllLink: carousel.viewAllLink || carousel.url || '#',
      theme: carousel.theme || 'default'
    }));
  }

  // PRIORIDAD 2: USAR PROPIEDADES RELACIONADAS DE LA API
  if (apiData.relatedProperties && apiData.relatedProperties.length > 0) {
    console.log('✅ Creando carrusel con propiedades relacionadas de la API:', apiData.relatedProperties.length);
    carousels.push({
      title: `Propiedades Similares ${searchContext.location ? `en ${searchContext.location}` : ''}`,
      subtitle: "Otras opciones que podrían interesarte",
      properties: apiData.relatedProperties.slice(0, 8),
      viewAllLink: `/comprar/${searchContext.propertyType || 'propiedades'}`,
      theme: 'similar'
    });
  }

  // PRIORIDAD 3: USAR PROPIEDADES DESTACADAS DE LA API
  if (apiData.featuredProperties && apiData.featuredProperties.length > 0) {
    console.log('✅ Creando carrusel con propiedades destacadas de la API:', apiData.featuredProperties.length);
    carousels.push({
      title: "Propiedades Destacadas",
      subtitle: "Seleccionadas especialmente para ti",
      properties: apiData.featuredProperties.slice(0, 8),
      viewAllLink: `/comprar/destacadas`,
      theme: 'featured'
    });
  }

  // NO HAY FALLBACKS - Solo datos reales de la API
  console.log('📊 Carruseles finales de la API:', carousels.length);
  return carousels;
}

// Generar datos para mapa SOLO CON DATOS REALES DE GOOGLE PLACES
function generateLocationData(searchContext, googlePlacesData) {
  const defaultCoordinates = [18.4861, -69.9312];
  
  const sectorCoordinates = {
    'piantini': [18.4721, -69.9330],
    'bella-vista': [18.4666, -69.9342],
    'naco': [18.4709, -69.9287],
    'gazcue': [18.4608, -69.9441],
    'zona-universitaria': [18.4524, -69.9513],
    'evaristo-morales': [18.4738, -69.9264],
    'santo-domingo': [18.4861, -69.9312],
    'distrito-nacional': [18.4861, -69.9312]
  };
  
  const centerCoordinates = sectorCoordinates[searchContext.sector] || 
                           sectorCoordinates[searchContext.location] || 
                           defaultCoordinates;
  
  const nearbyPlaces = [];
  
  // SOLO USAR DATOS REALES DE GOOGLE PLACES SI EXISTEN
  if (googlePlacesData?.featured_places && googlePlacesData.featured_places.length > 0) {
    console.log('✅ Usando lugares reales de Google Places:', googlePlacesData.featured_places.length);
    googlePlacesData.featured_places.forEach(place => {
      nearbyPlaces.push({
        name: place.place_name || 'Lugar sin nombre',
        category: place.category || 'Servicios',
        coordinates: place.coordinates || [centerCoordinates[0] + (Math.random() - 0.5) * 0.01, centerCoordinates[1] + (Math.random() - 0.5) * 0.01],
        distance: place.distance || `${Math.floor(Math.random() * 10 + 1)} min`,
        rating: place.rating || (3.5 + Math.random() * 1.5),
        description: place.description,
        address: place.address
      });
    });
  } else {
    console.log('❌ No hay datos de Google Places disponibles');
  }
  
  const marketData = {
    averagePrice: '$250,000',
    priceGrowth: '+5.2%',
    connectivity: ['Metro Línea 1', 'Principales avenidas', 'Transporte público'],
    demographics: 'Profesionales y familias de clase media-alta'
  };
  
  return {
    centerCoordinates,
    nearbyPlaces,
    marketData
  };
}

// ✅ FUNCIÓN CORREGIDA: generateContextualFAQs PRIORIZA FAQs PROCESADOS POR listFormatter
function generateContextualFAQs(searchContext, apiData) {
  // PRIORIDAD 1: USAR FAQs PROCESADOS POR listFormatter.ts
  if (apiData.content?.faqs && apiData.content.faqs.length > 0) {
    console.log('✅ Usando FAQs procesados por listFormatter:', apiData.content.faqs.length);
    return apiData.content.faqs.map(faq => ({
      id: faq.id || `faq-${Date.now()}-${Math.random()}`,
      question: faq.question || faq.title,
      answer: faq.answer || faq.content || faq.description,
      category: faq.category || 'processed',
      tags: faq.tags || []
    }));
  }

  // PRIORIDAD 2: USAR FAQs REALES DE relatedContent
  if (apiData.relatedContent?.faqs && apiData.relatedContent.faqs.length > 0) {
    console.log('✅ Usando FAQs reales de relatedContent:', apiData.relatedContent.faqs.length);
    
    // Validar que sean FAQs reales (no hardcodeados)
    const realFAQs = apiData.relatedContent.faqs.filter(faq => {
      const hardcodedQuestions = [
        '¿Cómo funciona el proceso de compra?',
        '¿Qué incluye el Bono Primera Vivienda?',
        '¿Ofrecen financiamiento?'
      ];
      const isNotHardcoded = !hardcodedQuestions.some(hard => 
        faq.question && faq.question.includes(hard.substring(0, 15))
      );
      return faq.question && faq.answer && isNotHardcoded;
    });

    if (realFAQs.length > 0) {
      return realFAQs.map(faq => ({
        id: faq.id || `faq-${Date.now()}-${Math.random()}`,
        question: faq.question || faq.title,
        answer: faq.answer || faq.content || faq.description,
        category: faq.category || 'api',
        tags: faq.tags || []
      }));
    }
  }

  // PRIORIDAD 3: BUSCAR EN OTRAS UBICACIONES POSIBLES
  const possibleLocations = [
    apiData.searchResults?.faqs,
    apiData.faqs,
    apiData.apiData?.faqs,
    apiData.response?.faqs,
    apiData.data?.faqs
  ];

  for (const faqs of possibleLocations) {
    if (faqs && Array.isArray(faqs) && faqs.length > 0) {
      // Verificar si son FAQs reales (tienen ID y no son hardcodeados)
      const realFAQs = faqs.filter(faq => {
        const hasRealId = faq.id && typeof faq.id === 'string' && faq.id.length > 10;
        const hardcodedQuestions = [
          '¿Cómo funciona el proceso de compra?',
          '¿Qué incluye el Bono Primera Vivienda?',
          '¿Ofrecen financiamiento?'
        ];
        const isNotHardcoded = !hardcodedQuestions.some(hard => 
          faq.question && faq.question.includes(hard.substring(0, 15))
        );
        return hasRealId && isNotHardcoded && faq.question && faq.answer;
      });

      if (realFAQs.length > 0) {
        console.log('✅ Usando FAQs reales encontrados:', realFAQs.length);
        return realFAQs.map(faq => ({
          id: faq.id,
          question: faq.question || faq.title,
          answer: faq.answer || faq.content || faq.description,
          category: faq.category || 'api',
          tags: faq.tags || []
        }));
      }
    }
  }

  // NO HAY FALLBACKS - Solo datos reales de la API
  console.log('❌ No se encontraron FAQs reales en ninguna ubicación');
  return [];
}

// ✅ FUNCIÓN ACTUALIZADA: generateRelatedArticles SIN FALLBACKS
function generateRelatedArticles(searchContext, apiData) {
  // PRIORIDAD 1: USAR ARTÍCULOS REALES DE LA API SI EXISTEN
  if (apiData.relatedContent?.articles && apiData.relatedContent.articles.length > 0) {
    console.log('✅ Usando artículos reales de la API:', apiData.relatedContent.articles.length);
    
    // ✅ VALIDAR Y LIMPIAR ARTÍCULOS CON CAMPOS DE ORDENAMIENTO
    const validArticles = apiData.relatedContent.articles.map(article => {
      // Validar imagen
      let validatedImage = null;
      if (article.featuredImage || article.featured_image) {
        const imageUrl = article.featuredImage || article.featured_image;
        // Solo usar imágenes válidas (que empiecen con http/https o /)
        if (imageUrl && (imageUrl.startsWith('http') || imageUrl.startsWith('/'))) {
          validatedImage = imageUrl;
        }
      }
      
      return {
        ...article,
        featuredImage: validatedImage, // Null si no hay imagen válida
        // ✅ ASEGURAR QUE TODOS LOS CAMPOS REQUERIDOS EXISTAN
        slug: article.slug || `article-${article.id}`,
        title: article.title || 'Artículo sin título',
        excerpt: article.excerpt || article.description || 'Extracto no disponible',
        author: article.author || { 
          name: 'Equipo CLIC', 
          avatar: '/images/team/clic-experts.jpg' 
        },
        publishedAt: article.publishedAt || article.published_at || new Date().toISOString(),
        readTime: article.readTime || article.read_time || '8 min',
        category: article.category || 'Artículos',
        views: article.views || null,
        featured: article.featured === true, // ✅ SOLO true si explícitamente es true
        // ✅ CAMPOS PARA ORDENAMIENTO
        total_weight: article.total_weight || 0,
        content_priority: article.content_priority || 'default',
        sort_order: article.sort_order || 0
      };
    }).filter(article => article.title && article.excerpt); // Solo artículos con título y extracto
    
    console.log('✅ Artículos validados:', validArticles.length);
    return validArticles;
  }

  // PRIORIDAD 2: USAR BLOG POSTS DE LA API SI EXISTEN
  if (apiData.relatedContent?.blog_posts && apiData.relatedContent.blog_posts.length > 0) {
    console.log('✅ Usando blog posts de la API:', apiData.relatedContent.blog_posts.length);
    
    const validBlogPosts = apiData.relatedContent.blog_posts.map(post => {
      // Validar imagen
      let validatedImage = null;
      if (post.featured_image || post.image || post.thumbnail || post.featuredImage) {
        const imageUrl = post.featured_image || post.image || post.thumbnail || post.featuredImage;
        if (imageUrl && (imageUrl.startsWith('http') || imageUrl.startsWith('/'))) {
          validatedImage = imageUrl;
        }
      }
      
      return {
        slug: post.slug || `post-${post.id}`,
        title: post.title || 'Post sin título',
        excerpt: post.excerpt || post.summary || 'Extracto no disponible',
        featuredImage: validatedImage,
        author: post.author || { 
          name: 'Equipo CLIC', 
          avatar: '/images/team/clic-experts.jpg' 
        },
        publishedAt: post.published_at || post.date || new Date().toISOString(),
        readTime: post.read_time ? `${post.read_time} min` : '8 min',
        category: post.category || 'Blog',
        views: post.views || null,
        featured: post.featured === true, // ✅ SOLO true si explícitamente es true
        // ✅ CAMPOS PARA ORDENAMIENTO
        total_weight: post.total_weight || 0,
        content_priority: post.content_priority || 'default',
        sort_order: post.sort_order || 0
      };
    }).filter(post => post.title && post.excerpt);
    
    return validBlogPosts;
  }

  // NO HAY FALLBACKS - Solo datos reales de la API
  console.log('❌ No hay artículos de la API disponibles');
  return [];
}

// Generar videos SOLO CON DATOS REALES DE LA API con thumbnails validados
function generateRelatedVideos(searchContext, apiData) {
  // PRIORIDAD 1: USAR VIDEOS REALES DE LA API SI EXISTEN
  if (apiData.relatedContent?.videos && apiData.relatedContent.videos.length > 0) {
    console.log('✅ Usando videos reales de la API:', apiData.relatedContent.videos.length);
    return apiData.relatedContent.videos.map(video => {
      // Validar y normalizar thumbnail
      let thumbnail = null;
      if (video.thumbnail || video.image || video.featured_image || video.cover) {
        const imageUrl = video.thumbnail || video.image || video.featured_image || video.cover;
        // Solo usar thumbnails válidos (que empiecen con http/https o /)
        if (imageUrl && (imageUrl.startsWith('http') || imageUrl.startsWith('/'))) {
          thumbnail = imageUrl;
        }
      }
      
      // ✅ USAR video_slug (underscore) como viene de la API
      const validSlug = video.video_slug || video.slug || null;
      
      // ✅ LOG PARA DEBUG DE SLUGS
      console.log(`📺 Video: "${video.title?.substring(0, 30)}..." - video_slug: ${video.video_slug}, slug: ${video.slug}, id: ${video.id}`);
      
      return {
        id: video.id || `video-${Date.now()}-${Math.random()}`,
        title: video.title || video.name,
        description: video.description || video.summary,
        thumbnail: thumbnail, // Null si no hay thumbnail válido
        duration: video.duration || '10:00',
        views: video.views || null,
        category: video.category || 'videos',
        videoId: video.videoId || video.youtube_id || video.video_id,
        videoSlug: validSlug, // ✅ Mapear video_slug a videoSlug para el componente
        featured: video.featured === true, // ✅ SOLO true si explícitamente es true
        // ✅ CAMPOS PARA ORDENAMIENTO
        total_weight: video.total_weight || 0,
        content_priority: video.content_priority || 'default',
        sort_order: video.sort_order || 0,
        // ✅ METADATA PARA DEBUG
        hasValidSlug: !!validSlug,
        slugStatus: validSlug ? 'valid' : 'missing'
      };
    });
  }

  // PRIORIDAD 2: USAR MEDIA GALLERY DE LA API
  if (apiData.relatedContent?.media_gallery && apiData.relatedContent.media_gallery.length > 0) {
    const videos = apiData.relatedContent.media_gallery.filter(item => item.type === 'video');
    if (videos.length > 0) {
      console.log('✅ Usando videos de media gallery de la API:', videos.length);
      return videos.map(video => {
        // Validar y normalizar thumbnail
        let thumbnail = null;
        if (video.thumbnail || video.image || video.cover) {
          const imageUrl = video.thumbnail || video.image || video.cover;
          if (imageUrl && (imageUrl.startsWith('http') || imageUrl.startsWith('/'))) {
            thumbnail = imageUrl;
          }
        }
        
        // ✅ USAR video_slug (underscore) como viene de la API
        const validSlug = video.video_slug || video.slug || null;
        
        return {
          id: video.id,
          title: video.title || video.caption,
          description: video.description || video.caption,
          thumbnail: thumbnail, // Null si no hay thumbnail válido
          duration: video.duration || '10:00',
          views: video.views || null,
          category: 'media',
          videoId: video.video_id,
          videoSlug: validSlug, // ✅ Mapear video_slug a videoSlug para el componente
          featured: video.featured === true, // ✅ SOLO true si explícitamente es true
          // ✅ CAMPOS PARA ORDENAMIENTO
          total_weight: video.total_weight || 0,
          content_priority: video.content_priority || 'default',
          sort_order: video.sort_order || 0,
          // ✅ METADATA PARA DEBUG
          hasValidSlug: !!validSlug,
          slugStatus: validSlug ? 'valid' : 'missing'
        };
      });
    }
  }

  // NO HAY FALLBACKS - Solo datos reales de la API
  console.log('❌ No hay videos de la API disponibles');
  return [];
}

// ===================================================================
// PROCESAMIENTO DE DATOS
// ===================================================================

const seoData = data.seo || {};
const title = seoData.title || 'Propiedades';
const description = seoData.description || 'Encuentra tu próxima propiedad';
const ogImage = seoData.og?.image || '/og-default.jpg';

const search = data.searchResults || data.search || {};
const tags = search.tags || [];
const totalProperties = search.pagination?.totalCount || data.pagination?.totalCount || 0;

const searchInfo = extractInfoFromTags(tags);
const seoH1 = generateSEOH1(searchInfo, seoData.h1);
const seoH2 = generateSEOH2(searchInfo);

const activeFilters = extractActiveFiltersFromURL(Astro.url.pathname);
const properties = data.searchResults?.properties || data.properties || [];

// ===================================================================
// GENERACIÓN DE COMPONENTES ENRIQUECIDOS
// ===================================================================

let specializedCarousels = [];
let locationData = {
  centerCoordinates: [18.4861, -69.9312],
  nearbyPlaces: [],
  marketData: {
    averagePrice: '$250,000',
    priceGrowth: '+5.2%',
    connectivity: ['Metro Línea 1', 'Principales avenidas', 'Transporte público'],
    demographics: 'Profesionales y familias de clase media-alta'
  }
};
let contextualFAQs = [];
let relatedArticles = [];
let relatedVideos = [];

try {
  specializedCarousels = generateSpecializedCarousels(properties || [], searchInfo || {}, data) || [];
  console.log('✅ Carruseles generados:', specializedCarousels.length);
} catch (error) {
  console.error('❌ Error generando carruseles:', error);
  specializedCarousels = [];
}

try {
  locationData = generateLocationData(searchInfo || {}, data.googlePlacesData) || locationData;
  console.log('✅ Datos de ubicación generados:', locationData.nearbyPlaces.length, 'lugares');
} catch (error) {
  console.error('❌ Error generando datos de ubicación:', error);
}

const { centerCoordinates, nearbyPlaces, marketData } = locationData;

try {
  contextualFAQs = generateContextualFAQs(searchInfo || {}, data) || [];
  console.log('✅ FAQs generados desde API:', contextualFAQs.length);
  console.log('🔍 Buscando FAQs en data.content?.faqs:', !!data.content?.faqs);
  console.log('🔍 Buscando FAQs en data.relatedContent?.faqs:', !!data.relatedContent?.faqs);
  
  // ✅ VALIDAR QUE SEAN FAQs REALES, NO GENERADOS
  if (contextualFAQs.length > 0) {
    console.log('📋 FAQs encontrados:', contextualFAQs.map(f => f.question.substring(0, 50) + '...'));
  } else {
    console.log('❌ No se encontraron FAQs reales en la API');
  }
} catch (error) {
  console.error('❌ Error generando FAQs:', error);
  contextualFAQs = [];
}

try {
  relatedArticles = generateRelatedArticles(searchInfo || {}, data) || [];
  console.log('✅ Artículos generados:', relatedArticles.length);
} catch (error) {
  console.error('❌ Error generando artículos:', error);
  relatedArticles = [];
}

try {
  relatedVideos = generateRelatedVideos(searchInfo || {}, data) || [];
  console.log('✅ Videos generados:', relatedVideos.length);
} catch (error) {
  console.error('❌ Error generando videos:', error);
  relatedVideos = [];
}

// Log final con información detallada de la API
console.log('🎯 PropertyListLayout - Análisis de datos de la API:', {
  totalProperties: totalProperties,
  location: searchInfo.location || 'No especificada',
  propertyType: searchInfo.propertyType || 'No especificado', 
  operation: searchInfo.operation || 'No especificada',
  
  apiStructure: {
    hasRelatedContent: !!data.relatedContent,
    hasContent: !!data.content,
    hasGooglePlaces: !!data.googlePlacesData,
    hasFeaturedProperties: !!(data.featuredProperties || data.relatedProperties),
    
    relatedContentKeys: data.relatedContent ? Object.keys(data.relatedContent) : [],
    contentKeys: data.content ? Object.keys(data.content) : [],
    
    realCarousels: data.relatedContent?.carousels?.length || 0,
    realFAQs: (data.relatedContent?.faqs?.length || 0) + (data.content?.faqs?.length || 0),
    realArticles: (data.relatedContent?.articles?.length || 0) + (data.relatedContent?.blog_posts?.length || 0),
    realVideos: (data.relatedContent?.videos?.length || 0) + (data.relatedContent?.media_gallery?.filter(m => m.type === 'video')?.length || 0),
    
    relatedPropertiesCount: data.relatedProperties?.length || 0,
    featuredPropertiesCount: data.featuredProperties?.length || 0,
    
    articlesStats: data.relatedContent?.articles_stats || null
  },
  
  finalResults: {
    carouselsGenerated: specializedCarousels.length,
    faqsGenerated: contextualFAQs.length,
    articlesGenerated: relatedArticles.length,
    videosGenerated: relatedVideos.length,
    googlePlacesProcessed: nearbyPlaces.length
  },
  
  dataSources: {
    carouselsFromAPI: data.relatedContent?.carousels ? 'API' : 'Generated',
    faqsFromAPI: (data.content?.faqs || data.relatedContent?.faqs) ? 'API' : 'Generated',
    articlesFromAPI: (data.relatedContent?.articles || data.relatedContent?.blog_posts) ? 'API' : 'None',
    videosFromAPI: (data.relatedContent?.videos || data.relatedContent?.media_gallery) ? 'API' : 'Generated'
  },
  
  dataQualityScore: `${[
    specializedCarousels.length > 0,
    contextualFAQs.length > 0,
    relatedArticles.length > 0, 
    relatedVideos.length > 0,
    nearbyPlaces.length > 0
  ].filter(Boolean).length}/5 componentes con datos`
});
---

<Layout title={title} description={description} ogImage={ogImage}>
  <div class="min-h-screen bg-gray-50">
    
    <!-- Filtros Activos Component -->
    <PropertyListFilters 
      activeFilters={activeFilters}
    />

    <!-- Header Component -->
    <PropertyListHeader 
      seoH1={seoH1}
      seoH2={seoH2}
      totalProperties={totalProperties}
      breadcrumbs={data.breadcrumbs}
    />

    <!-- Stats Component (solo si hay suficientes propiedades) -->
    <PropertyListStats 
      properties={properties}
      searchInfo={searchInfo}
      showMarketData={totalProperties > 5}
    />

    <!-- Listado de Propiedades Principal -->
    <PropertyList 
      listings={properties} 
      meta={{
        title: "",
        description: ""
      }}
      totalCount={totalProperties}
      currentPage={data.searchResults?.pagination?.currentPage || data.pagination?.currentPage || 1}
      totalPages={data.searchResults?.pagination?.totalPages || data.pagination?.totalPages || 1}
      itemsPerPage={data.searchResults?.pagination?.itemsPerPage || data.pagination?.itemsPerPage || 32}
      hasNextPage={data.searchResults?.pagination?.hasNextPage || data.pagination?.hasNextPage || false}
      hasPreviousPage={data.searchResults?.pagination?.hasPreviousPage || data.pagination?.hasPreviousPage || false}
    />

    <!-- Carruseles Especializados -->
    {specializedCarousels.length > 0 && specializedCarousels.map((carousel, index) => (
      <PropertyCarousel 
        title={carousel.title}
        subtitle={carousel.subtitle}
        properties={carousel.properties}
        viewAllLink={carousel.viewAllLink}
        theme={carousel.theme}
      />
    ))}

    <!-- Mapa Interactivo (Solo si hay lugares de Google Places) -->
    {nearbyPlaces.length > 0 && centerCoordinates && (
      <InteractiveNeighborhoodMap 
        sector={searchInfo.sector || searchInfo.location || 'Zona'}
        centerCoordinates={centerCoordinates}
        nearbyPlaces={nearbyPlaces}
        properties={properties.filter(p => p.coordinates).slice(0, 20)}
      />
    )}

    <!-- FAQs de la API -->
    {contextualFAQs.length > 0 && (
      <DynamicFAQs 
        faqs={contextualFAQs}
        title="Preguntas Frecuentes"
        context={{
          location: searchInfo.location || searchInfo.sector,
          propertyType: searchInfo.propertyType,
          features: searchInfo.features || []
        }}
      />
    )}

    <!-- ✅ ARTÍCULOS DE LA API CON STATS REALES -->
    {relatedArticles.length > 0 && (
      <RelatedArticles 
        articles={relatedArticles}
        title="Guías y Análisis Especializados"
        subtitle="Información experta para tomar la mejor decisión"
        layout="featured"
        articlesStats={{
          total_articles: relatedArticles.length > 0 ? relatedArticles.length : 7,
          last_updated: 'Contenido actualizado semanalmente'
        }}
      />
    )}

    <!-- Videos de la API -->
    {relatedVideos.length > 0 && (
      <VideoGallery 
        videos={relatedVideos}
        title="Videos Exclusivos de la Zona"
        subtitle="Conoce más sobre el área y el mercado inmobiliario"
        layout="featured"
        propertyRelated={true}
      />
    )}

    <!-- ✅ CAMBIO PRINCIPAL: Usar PropertySeoContent en lugar de PropertyListSEOContent -->
    <PropertySeoContent 
      data={data}
    />

    <!-- CTA Component Final -->
    <PropertyListCTA 
      searchInfo={searchInfo}
    />
  </div>

  <!-- JSON-LD Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(seoData.structured_data || {})}></script>
</Layout>

<style>
  .transform {
    transition: transform 0.3s ease;
  }
  
  .bg-gradient-to-br {
    background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
  }
  
  .bg-gradient-to-r {
    background-image: linear-gradient(to right, var(--tw-gradient-stops));
  }
  
  .hover\:scale-105:hover {
    transform: scale(1.05);
  }
</style>